#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ SC Referral Bot
"""
import asyncio
import sqlite3
from datetime import datetime
from app.config import Settings
from app.db import Database
from app.services.captcha import CaptchaService
from app.services.capsules import CapsuleService

def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    db = Database("bot.db")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        print(f"–¢–∞–±–ª–∏—Ü—ã: {', '.join(tables)}")
        
        # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT COUNT(*) FROM users")
        user_count = cursor.fetchone()[0]
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {user_count}")

def test_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    cfg = Settings.from_env()
    print(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞: {'‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' if cfg.BOT_TOKEN else '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    print(f"ID –∫–∞–Ω–∞–ª–∞: {cfg.REQUIRED_CHANNEL_ID if cfg.REQUIRED_CHANNEL_ID else '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"ID –≥—Ä—É–ø–ø—ã: {cfg.REQUIRED_GROUP_ID if cfg.REQUIRED_GROUP_ID else '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}")
    print(f"–õ–∏–º–∏—Ç –∫–∞–ø—Å—É–ª –≤ –¥–µ–Ω—å: {cfg.DAILY_CAPSULE_LIMIT}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≥—Ä–∞–¥ –≤ –∫–∞–ø—Å—É–ª–∞—Ö: {len(cfg.CAPSULE_REWARDS)}")

async def test_services():
    """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\nüõ†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–ø—Å—É–ª
    capsule_service = CapsuleService()
    cfg = Settings.from_env()
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞–≥—Ä–∞–¥
    errors = capsule_service.validate_rewards_config(cfg.CAPSULE_REWARDS)
    if errors:
        print(f"‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–ø—Å—É–ª: {errors}")
    else:
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–ø—Å—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–ø—Å—É–ª
        rewards = []
        for _ in range(10):
            reward = capsule_service.open_capsule(cfg.CAPSULE_REWARDS)
            if reward:
                rewards.append(reward)
        
        if rewards:
            avg_reward = sum(r.amount for r in rewards) / len(rewards)
            print(f"–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 10 –∫–∞–ø—Å—É–ª: {avg_reward:.2f} SC")

def test_bot_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    print("\nü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
        with open("bot.log", "r") as f:
            recent_logs = f.readlines()[-5:]
            print("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:")
            for log in recent_logs:
                print(f"  {log.strip()}")
    except FileNotFoundError:
        print("–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        import os
        db_time = datetime.fromtimestamp(os.path.getmtime("bot.db"))
        print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞: {db_time.strftime('%d.%m.%Y %H:%M:%S')}")
    except FileNotFoundError:
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

def main():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ SC Referral Bot\n")
    
    test_database()
    test_config() 
    asyncio.run(test_services())
    test_bot_status()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()