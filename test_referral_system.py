#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, –∫–∞–ø—Å—É–ª –∏ –±–∞–ª–∞–Ω—Å–æ–≤
"""
import asyncio
import sys
import os
sys.path.append('.')

from app.core.context import get_context
from app.services.capsule import CapsuleService
from app.services.validator import ReferralValidator

async def test_referral_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...")
    
    context = get_context()
    validator = ReferralValidator(context)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    db = context.db
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await db.get_all_users()
    active_users = [u for u in users if u.balance > 0 or u.referral_count > 0]
    
    print(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
    print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø –ø–æ –±–∞–ª–∞–Ω—Å—É
    top_users = sorted(users, key=lambda x: x.balance, reverse=True)[:5]
    print("\nüèÜ –¢–û–ü-5 –ø–æ –±–∞–ª–∞–Ω—Å—É:")
    for i, user in enumerate(top_users, 1):
        print(f"{i}. {user.username or user.user_id}: {user.balance} SC")
    
    return True

async def test_capsule_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø—Å—É–ª"""
    print("\nüéÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø—Å—É–ª...")
    
    context = get_context()
    capsule_service = CapsuleService(context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ø—Å—É–ª
    config = context.config.capsule
    print(f"‚úÖ –®–∞–Ω—Å –æ–±—ã—á–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã: {config.common_chance}%")
    print(f"‚úÖ –®–∞–Ω—Å —Ä–µ–¥–∫–æ–π –Ω–∞–≥—Ä–∞–¥—ã: {config.rare_chance}%")
    print(f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω –æ–±—ã—á–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥: {config.common_min}-{config.common_max} SC")
    print(f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–¥–∫–∏—Ö –Ω–∞–≥—Ä–∞–¥: {config.rare_min}-{config.rare_max} SC")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–ø—Å—É–ª—ã
    reward = capsule_service._calculate_reward()
    print(f"‚úÖ –ü—Ä–∏–º–µ—Ä –Ω–∞–≥—Ä–∞–¥—ã: {reward} SC")
    
    return True

async def test_balance_operations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–∞–Ω—Å–æ–º"""
    print("\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–∞–Ω—Å–æ–º...")
    
    context = get_context()
    db = context.db
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å —Å–∏—Å—Ç–µ–º—ã
    users = await db.get_all_users()
    total_balance = sum(user.balance for user in users)
    total_earned = sum(user.total_earned for user in users)
    
    print(f"‚úÖ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤ —Å–∏—Å—Ç–µ–º–µ: {total_balance} SC")
    print(f"‚úÖ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {total_earned} SC")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞
    admin_user = await db.get_user(545921)  # Little_Pugg
    if admin_user:
        print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –∞–¥–º–∏–Ω–∞ Little_Pugg: {admin_user.balance} SC")
        print(f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É –∞–¥–º–∏–Ω–∞: {admin_user.referral_count}")
    
    return True

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
        await test_referral_system()
        await test_capsule_system() 
        await test_balance_operations()
        
        print("\n" + "=" * 50)
        print("‚úÖ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        return False
    
    return True

if __name__ == "__main__":
    asyncio.run(main())