#!/usr/bin/env python3
"""
üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Å–µ—Ä–≤–µ—Ä
"""
import os
import shutil
import tarfile
from datetime import datetime

def create_deployment_package():
    """–°–æ–∑–¥–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –∞—Ä—Ö–∏–≤ –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    
    # –§–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –ø–∞–∫–µ—Ç
    include_files = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã Python
        'main.py', 'run.py', 'start_server.py',
        'simple_session_generator.py', 'generate_session.py',
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        'pyproject.toml', 'server_requirements.txt',
        'env_example.txt', 'Dockerfile',
        'deploy_instructions.md',
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
        'bot.db',
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∫–æ–¥–æ–º
        'app/', 'src/', 'public/', 'assets/', 'tma/',
        
        # Frontend —Ñ–∞–π–ª—ã
        'package.json', 'vite.config.js', 'index.html',
        
        # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        'tonconnect-manifest.json', 'privacy.html', 'terms.html',
        'icon.svg', 'icon-192.png', 'icon-192.svg'
    ]
    
    # –°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    package_name = f"sc-bot-deploy-{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    temp_dir = f"/tmp/{package_name}"
    
    print(f"üì¶ –°–æ–∑–¥–∞—é –ø–∞–∫–µ—Ç –¥–ª—è –¥–µ–ø–ª–æ—è: {package_name}")
    
    # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    os.makedirs(temp_dir, exist_ok=True)
    
    copied_files = []
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã
    for item in include_files:
        src_path = item
        dst_path = os.path.join(temp_dir, item)
        
        try:
            if os.path.isfile(src_path):
                # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª
                os.makedirs(os.path.dirname(dst_path), exist_ok=True)
                shutil.copy2(src_path, dst_path)
                copied_files.append(f"‚úÖ {src_path}")
                
            elif os.path.isdir(src_path):
                # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                shutil.copytree(src_path, dst_path, ignore=shutil.ignore_patterns(
                    '*.pyc', '__pycache__', '*.log', '*.session', 'node_modules'
                ))
                copied_files.append(f"üìÅ {src_path}/")
                
            else:
                copied_files.append(f"‚ö†Ô∏è {src_path} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
                
        except Exception as e:
            copied_files.append(f"‚ùå {src_path} (–æ—à–∏–±–∫–∞: {e})")
    
    # –°–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤
    archive_name = f"{package_name}.tar.gz"
    archive_path = os.path.join(os.getcwd(), archive_name)
    
    with tarfile.open(archive_path, "w:gz") as tar:
        tar.add(temp_dir, arcname=package_name)
    
    # –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    shutil.rmtree(temp_dir)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\\n" + "="*60)
    print("üìã –§–ê–ô–õ–´ –í –ü–ê–ö–ï–¢–ï:")
    for file_info in copied_files:
        print(f"   {file_info}")
    
    print("\\n" + "="*60)
    print(f"‚úÖ –ü–ê–ö–ï–¢ –°–û–ó–î–ê–ù: {archive_name}")
    print(f"üìè –†–∞–∑–º–µ—Ä: {os.path.getsize(archive_path) / 1024 / 1024:.1f} MB")
    print("\\nüöÄ –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ –ù–ê –°–¢–û–†–û–ù–ù–ò–ô –°–ï–†–í–ï–†!")
    print("\\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ –Ω–∞ —Å–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä")
    print("2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä (scp, ftp, etc)")
    print("3. –†–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å: tar -xzf " + archive_name)
    print("4. –°–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ deploy_instructions.md")
    
    return archive_path

if __name__ == "__main__":
    try:
        archive_path = create_deployment_package()
        print(f"\\nüì¶ –ê—Ä—Ö–∏–≤ –≥–æ—Ç–æ–≤: {archive_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()