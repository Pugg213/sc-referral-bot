"""
Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
"""
import logging
from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.enums import ChatType

router = Router()

@router.callback_query()
async def fallback_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback"""
    logging.warning(f"Unhandled callback: {callback.data} from user {callback.from_user.id if callback.from_user else 'None'}")
    
    if callback.data:
        if callback.data.startswith("main_menu") or callback.data.startswith("back"):
            await callback.answer("üè† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        elif callback.data.startswith("open_capsule"):
            await callback.answer("üéÅ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–∫—Ä—ã—Ç—å –∫–∞–ø—Å—É–ª—É' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")
        elif callback.data.startswith("profile") or callback.data.startswith("wallet"):
            await callback.answer("üë§ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")
        else:
            await callback.answer("‚ÑπÔ∏è –§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    else:
        await callback.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

@router.message(F.chat.type == ChatType.PRIVATE)
async def fallback_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–∞–Ω–¥ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö"""
    if not message.from_user:
        return
        
    text = message.text or ""
    user_id = message.from_user.id
    
    # –û—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if text.startswith('/'):
        logging.warning(f"Unhandled command: '{text}' from user {user_id}")
        await message.answer(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n" 
            "/wallet <–∞–¥—Ä–µ—Å> - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ—à–µ–ª–µ–∫"
        )
    else:
        # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –ù–ï –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–∏—Ö
        logging.info(f"Regular message ignored: '{text}' from user {user_id}")
        # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥—Ä—É–ø–ø - –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
async def group_message_handler(message: types.Message):
    """–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö"""
    # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ, –Ω–æ –ù–ï –æ—Ç–≤–µ—á–∞–µ–º
    if message.from_user:
        logging.info(f"Group message ignored from user {message.from_user.id} in chat {message.chat.id}")
    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º - –Ω–∏–∫–∞–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤