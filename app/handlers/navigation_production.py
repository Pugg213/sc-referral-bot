"""
–§–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –ë–ï–ó LSP –æ—à–∏–±–æ–∫ –¥–ª—è –ü–†–û–î–ê–ö–®–ù–ê
"""
import logging
from aiogram import Router, types, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ChatType

from app.context import get_config, get_db
from app.keyboards import get_main_keyboard
from datetime import date
from app.utils.helpers import format_balance

router = Router()

# TEXT MESSAGE HANDLERS - –¥–ª—è Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

# –ü–†–û–§–ò–õ–¨ HANDLER - –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–ù–´–ô  
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å", F.chat.type == ChatType.PRIVATE)
async def profile_text_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ '–ü—Ä–æ—Ñ–∏–ª—å' """
    try:
        if not message.from_user:
            return
            
        user_id = message.from_user.id
        db = get_db()
        user = db.get_user(user_id)
        
        if not user:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
        cfg = get_config()
        daily_limit = cfg.DAILY_CAPSULE_LIMIT if cfg else 3
        
        profile_text = f"""üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

üÜî <b>ID:</b> <code>{user['user_id']}</code>
üëã <b>–ò–º—è:</b> {user['first_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {user['registration_date'][:10] if user['registration_date'] else '–ù–µ–¥–∞–≤–Ω–æ'}

üí∞ <b>–ë–∞–ª–∞–Ω—Å SC:</b>
üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {format_balance(user['balance'])} SC
‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ: {format_balance(user['paid_balance'])} SC  
üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_balance(user['total_earnings'])} SC

üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã:</b>
üîó –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user.get('total_referrals', 0) or 0}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {user.get('validated_referrals', 0) or 0}

üéÅ <b>–ö–∞–ø—Å—É–ª—ã:</b>
üì¶ –û—Ç–∫—Ä—ã—Ç–æ —Å–µ–≥–æ–¥–Ω—è: {user['daily_capsules_opened']}
üéØ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {daily_limit + (user.get('validated_referrals', 0) or 0)}
üìä –í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ: {user['total_capsules_opened'] or 0}"""
        
        # Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
        keyboard_buttons = [
            [InlineKeyboardButton(text="üéÅ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ø—Å—É–ª—É", callback_data="open_capsule")],
            [InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals"), InlineKeyboardButton(text="üíº –ö–æ—à–µ–ª–µ–∫", callback_data="wallet")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await message.answer(profile_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logging.error(f"Profile handler error: {e}")
        try:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")
        except Exception as e2:
            logging.error(f"Profile fallback failed: {e2}")

# –ö–ê–ü–°–£–õ–´ HANDLER - –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–ù–´–ô
@router.message(F.text == "üéÅ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ø—Å—É–ª—É", F.chat.type == ChatType.PRIVATE)
async def capsule_text_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ '–û—Ç–∫—Ä—ã—Ç—å –∫–∞–ø—Å—É–ª—É' """
    try:
        if not message.from_user:
            return
            
        user_id = message.from_user.id
        db = get_db()
        user = db.get_user(user_id)
        
        if not user:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–ø—Å—É–ª—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ (—Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤)
        from app.services.special_rewards import SpecialRewardService
        special_service = SpecialRewardService()
        available_capsules = special_service.get_available_capsules(user_id)
        
        if available_capsules <= 0:
            cfg = get_config()
            referral_bonus = user['validated_referrals'] if user['validated_referrals'] else 0
            bonus_capsules = user.get('bonus_capsules', 0) or 0
            
            limit_text = (
                f"üì¶ –õ–∏–º–∏—Ç –∫–∞–ø—Å—É–ª –∏—Å—á–µ—Ä–ø–∞–Ω!\n\n"
                f"üí° –í–∞—à –ª–∏–º–∏—Ç:\n"
                f"‚Ä¢ {cfg.DAILY_CAPSULE_LIMIT} –±–∞–∑–æ–≤—ã—Ö –∫–∞–ø—Å—É–ª\n"
                f"‚Ä¢ +{referral_bonus} –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
                f"‚Ä¢ +{bonus_capsules} –±–æ–Ω—É—Å–Ω—ã—Ö\n\n"
                f"‚è∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π!"
            )
            await message.answer(limit_text)
            return
            
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–ê–í–ò–õ–¨–ù–£–Æ –°–ò–°–¢–ï–ú–£ –ö–ê–ü–°–£–õ
        from app.services.capsules import CapsuleService
        from app.services.special_rewards import SpecialRewardService
        cfg = get_config()
        
        capsule_service = CapsuleService()
        special_service = SpecialRewardService()
        
        # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        reward_obj = capsule_service.open_capsule(cfg.CAPSULE_REWARDS)
        if not reward_obj:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–ø—Å—É–ª—ã")
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
        reward_result = special_service.process_special_reward(user_id, reward_obj.name, reward_obj.amount)
        
        # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–ø—Å—É–ª
        db.update_user_capsule_stats(user_id, reward_obj.amount)
        
        # –ó–∞–ø–∏—Å–∞—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        db.record_capsule_opening(user_id, reward_obj.name, reward_obj.amount)
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ª–∏–º–∏—Ç–∞
        total_limit = cfg.DAILY_CAPSULE_LIMIT + (user.get('validated_referrals', 0) or 0) + (user.get('bonus_capsules', 0) or 0)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        updated_user = db.get_user(user_id)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        emoji = reward_result.get('emoji', 'üéÅ') if reward_result else 'üéÅ'
        message = reward_result.get('message', f"–ù–∞–≥—Ä–∞–¥–∞: {reward_obj.amount} SC") if reward_result else f"–ù–∞–≥—Ä–∞–¥–∞: {reward_obj.amount} SC"
        
        capsule_text = f"""üéÅ <b>–ö–∞–ø—Å—É–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞!</b>

{emoji} {message}
üì¶ –û—Ç–∫—Ä—ã—Ç–æ —Å–µ–≥–æ–¥–Ω—è: {updated_user['daily_capsules_opened']}/{total_limit}
üí≥ –ë–∞–ª–∞–Ω—Å: {format_balance(updated_user['balance'])} SC"""
        
        # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è
        keyboard_buttons = [
            [InlineKeyboardButton(text="üéÅ –û—Ç–∫—Ä—ã—Ç—å –µ—â–µ", callback_data="open_capsule")],
            [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"), InlineKeyboardButton(text="üíº –ö–æ—à–µ–ª–µ–∫", callback_data="wallet")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await message.answer(capsule_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logging.error(f"Capsule handler error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–ø—Å—É–ª—ã")

# –†–ï–§–ï–†–ê–õ–´ HANDLER - –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–ù–´–ô
@router.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", F.chat.type == ChatType.PRIVATE)
async def referrals_text_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ '–†–µ—Ñ–µ—Ä–∞–ª—ã' """
    try:
        if not message.from_user:
            return
            
        user_id = message.from_user.id  
        db = get_db()
        user = db.get_user(user_id)
        
        if not user:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        referrals_text = f"""üë• <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b>

üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>
<code>https://t.me/scReferalbot?start={user_id}</code>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üë§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user.get('total_referrals', 0) or 0}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {user.get('validated_referrals', 0) or 0}
üí∞ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {format_balance(user.get('total_earnings', 0) or 0)} SC

üéÅ <b>–ë–æ–Ω—É—Å—ã:</b>
‚Ä¢ +1 –∫–∞–ø—Å—É–ª–∞ –≤ –¥–µ–Ω—å –∑–∞ –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
‚Ä¢ 10% –æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª–µ–π

üí° <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–µ–π —Å—Å—ã–ª–∫–æ–π
2. –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è
3. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ - –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å—ã"""
        
        keyboard_buttons = [
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="referral_stats")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await message.answer(referrals_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logging.error(f"Referrals handler error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")

# –¢–û–ü HANDLER - –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–ù–´–ô
@router.message(F.text == "üèÜ –¢–æ–ø", F.chat.type == ChatType.PRIVATE)
async def top_text_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ '–¢–æ–ø' """
    try:
        if not message.from_user:
            return
            
        user_id = message.from_user.id
        db = get_db()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT first_name, total_earnings, validated_referrals, user_id
                FROM users 
                WHERE total_earnings > 0
                ORDER BY total_earnings DESC
                LIMIT 10
            """)
            top_users = cursor.fetchall()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                SELECT COUNT(*) + 1 as position
                FROM users
                WHERE total_earnings > (
                    SELECT total_earnings FROM users WHERE user_id = ?
                )
            """, (user_id,))
            user_position = cursor.fetchone()[0]
        
        top_text = "üèÜ <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        
        if top_users:
            for i, (name, earnings, refs, uid) in enumerate(top_users, 1):
                icon = "üëë" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
                name_display = name or "–ê–Ω–æ–Ω–∏–º–Ω—ã–π"
                if len(name_display) > 15:
                    name_display = name_display[:15] + "..."
                
                top_text += f"{icon} <b>{name_display}</b>\n"
                top_text += f"    üí∞ {format_balance(earnings)} SC | üë• {refs or 0} ref\n\n"
        else:
            top_text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
            
        top_text += f"üìä <b>–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:</b> #{user_position}"
        
        keyboard_buttons = [
            [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await message.answer(top_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logging.error(f"Top handler error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞")

# –ö–û–®–ï–õ–ï–ö HANDLER - –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–ù–´–ô
@router.message(F.text == "üíº –ö–æ—à–µ–ª–µ–∫", F.chat.type == ChatType.PRIVATE)
async def wallet_text_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ '–ö–æ—à–µ–ª–µ–∫' """
    try:
        if not message.from_user:
            return
            
        user_id = message.from_user.id
        db = get_db()
        user = db.get_user(user_id)
        
        if not user:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
            
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
        cfg = get_config()
        daily_limit = cfg.DAILY_CAPSULE_LIMIT if cfg else 3
        
        wallet_text = f"""üíº <b>–í–∞—à –∫–æ—à–µ–ª–µ–∫</b>

üí∞ <b>–ë–∞–ª–∞–Ω—Å SC:</b>
üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {format_balance(user['balance'])} SC
‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ: {format_balance(user['paid_balance'])} SC
üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_balance(user['total_earnings'])} SC

üè¶ <b>TON –ö–æ—à–µ–ª–µ–∫:</b>
üì± –ê–¥—Ä–µ—Å: {user['wallet_address'] if user['wallet_address'] else '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}

üéÅ <b>–ö–∞–ø—Å—É–ª—ã —Å–µ–≥–æ–¥–Ω—è:</b>
üì¶ –û—Ç–∫—Ä—ã—Ç–æ: {user['daily_capsules_opened']}
üéØ –õ–∏–º–∏—Ç: {daily_limit + (user['validated_referrals'] or 0)}

üí° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–º:</b>
/wallet - –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
/withdraw - –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"""
        
        # Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
        keyboard_buttons = [
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await message.answer(wallet_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logging.error(f"Wallet handler error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–∞")

# –ö–û–®–ï–õ–ï–ö CALLBACK HANDLER - –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–ù–´–ô –¥–ª—è Inline –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "wallet")
async def wallet_callback_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback 'wallet' –¥–ª—è Inline –∫–Ω–æ–ø–æ–∫"""
    try:
        if not callback.from_user or not callback.message:
            return
            
        user_id = callback.from_user.id
        db = get_db()
        user = db.get_user(user_id)
        
        if not user:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", show_alert=True)
            return
            
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
        cfg = get_config()
        daily_limit = cfg.DAILY_CAPSULE_LIMIT if cfg else 3
        
        wallet_text = f"""üíº <b>–í–∞—à –∫–æ—à–µ–ª–µ–∫</b>

üí∞ <b>–ë–∞–ª–∞–Ω—Å SC:</b>
üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {format_balance(user['balance'])} SC
‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ: {format_balance(user['paid_balance'])} SC
üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_balance(user['total_earnings'])} SC

üè¶ <b>TON –ö–æ—à–µ–ª–µ–∫:</b>
üì± –ê–¥—Ä–µ—Å: {user['wallet_address'] if user['wallet_address'] else '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}

üéÅ <b>–ö–∞–ø—Å—É–ª—ã —Å–µ–≥–æ–¥–Ω—è:</b>
üì¶ –û—Ç–∫—Ä—ã—Ç–æ: {user['daily_capsules_opened']}
üéØ –õ–∏–º–∏—Ç: {daily_limit + (user['validated_referrals'] or 0)}

üí° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–º:</b>
/wallet - –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
/withdraw - –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"""
        
        # Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
        keyboard_buttons = [
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if callback.message:
            await callback.message.answer(wallet_text, reply_markup=keyboard, parse_mode="HTML")
        
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Wallet callback error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–∞", show_alert=True)

@router.message(F.text == "üìã –ü—Ä–∞–≤–∏–ª–∞", F.chat.type == ChatType.PRIVATE)
async def rules_text_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ '–ü—Ä–∞–≤–∏–ª–∞' """
    try:
        rules_text = """üìã <b>–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞</b>

üî∏ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:</b>
‚Ä¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –≤–æ–π–¥–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É
‚Ä¢ –ù–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ñ–µ–π–∫–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ù–µ —Å–ø–∞–º—å—Ç–µ –∏ –Ω–µ –Ω–∞—Ä—É—à–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ Telegram

üéÅ <b>–°–∏—Å—Ç–µ–º–∞ –∫–∞–ø—Å—É–ª:</b>
‚Ä¢ 3 –∫–∞–ø—Å—É–ª—ã –≤ –¥–µ–Ω—å –±–∞–∑–æ–≤–æ
‚Ä¢ +1 –∫–∞–ø—Å—É–ª–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ –∫–∞–ø—Å—É–ª—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π

üí∞ <b>–ù–∞–≥—Ä–∞–¥—ã:</b>
‚Ä¢ 0.5-10 SC —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –∫–∞–ø—Å—É–ª—É
‚Ä¢ –ë–æ–Ω—É—Å—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤

‚ö†Ô∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>
‚Ä¢ –ù–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –∫–∞—Ä–∞–Ω—Ç–∏–Ω 1 —á–∞—Å
‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è
‚Ä¢ –ù–∞—Ä—É—à–∏—Ç–µ–ª–∏ –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã

üîó <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</b>
‚Ä¢ –ö–∞–Ω–∞–ª: https://t.me/just_a_simple_coin
‚Ä¢ –ß–∞—Ç: https://t.me/simplecoin_chatSC"""
        
        await message.answer(rules_text, reply_markup=get_main_keyboard(), parse_mode="HTML")
    except Exception as e:
        logging.error(f"Rules text error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª")

@router.message(F.text == "üéØ –ó–∞–¥–∞–Ω–∏—è", F.chat.type == ChatType.PRIVATE)
async def tasks_text_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ '–ó–∞–¥–∞–Ω–∏—è' - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–∞–¥–∞–Ω–∏–π"""
    from app.handlers.tasks_unified import tasks_menu
    try:
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–∞–¥–∞–Ω–∏–π
        await tasks_menu(message)
    except Exception as e:
        logging.error(f"Tasks redirect error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π")

# CALLBACK HANDLERS - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –ë–ï–ó LSP –æ—à–∏–±–æ–∫
@router.callback_query(F.data == "main_menu")
async def callback_main_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        text = "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"
        await callback.answer()
        if callback.message:
            await callback.message.answer(text, reply_markup=get_main_keyboard())
    except Exception as e:
        logging.error(f"Main menu error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data == "back_to_menu")
async def callback_back_to_menu(callback: CallbackQuery):
    """–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"""
    try:
        text = "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await callback.answer()
        if callback.message:
            await callback.message.answer(text, reply_markup=get_main_keyboard())
    except Exception as e:
        logging.error(f"Back to menu error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.message(F.text == "üìÖ –ß–µ–∫-–∏–Ω")
async def checkin_button(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —á–µ–∫-–∏–Ω–∞"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    db = get_db()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT subscription_checked, pending_balance 
            FROM users WHERE user_id = ?
        """, (user_id,))
        user_data = cursor.fetchone()
        
        if not user_data:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
            return
        
        if not user_data[0]:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫-–∏–Ω —Å–µ–≥–æ–¥–Ω—è
        today = date.today().isoformat()
        cursor.execute("""
            SELECT id FROM user_checkins 
            WHERE user_id = ? AND checkin_date = ?
        """, (user_id, today))
        
        existing_checkin = cursor.fetchone()
        if existing_checkin:
            await message.answer("‚ùå –í—ã —É–∂–µ –¥–µ–ª–∞–ª–∏ —á–µ–∫-–∏–Ω —Å–µ–≥–æ–¥–Ω—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞.")
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ–∫-–∏–Ω
        checkin_reward = 0.5
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫-–∏–Ω
            cursor.execute("""
                INSERT INTO user_checkins (user_id, checkin_date, sc_amount)
                VALUES (?, ?, ?)
            """, (user_id, today, checkin_reward))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            cursor.execute("""
                UPDATE users 
                SET pending_balance = pending_balance + ?,
                    total_earnings = total_earnings + ?
                WHERE user_id = ?
            """, (checkin_reward, checkin_reward, user_id))
            
            conn.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫-–∏–Ω–æ–≤
            cursor.execute("""
                SELECT COUNT(*) FROM user_checkins WHERE user_id = ?
            """, (user_id,))
            total_checkins = cursor.fetchone()[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            new_balance = user_data[1] + checkin_reward
            
            success_text = (
                f"‚úÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                f"üéÅ –ü–æ–ª—É—á–µ–Ω–æ: {format_balance(checkin_reward)} SC\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {format_balance(new_balance)} SC\n"
                f"üìÖ –í—Å–µ–≥–æ —á–µ–∫-–∏–Ω–æ–≤: {total_checkins}\n\n"
                f"üí° –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥–æ–π!"
            )
            
            await message.answer(success_text)
            
        except Exception as e:
            logging.error(f"Checkin execution error for user {user_id}: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ–∫-–∏–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "daily_checkin")
async def daily_checkin_callback(callback: types.CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —á–µ–∫-–∏–Ω–∞ —á–µ—Ä–µ–∑ callback"""
    if not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã", show_alert=True)
        return
    
    user_id = callback.from_user.id
    db = get_db()
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫-–∏–Ω —Å–µ–≥–æ–¥–Ω—è
            today = date.today().isoformat()
            cursor.execute("""
                SELECT id FROM user_checkins 
                WHERE user_id = ? AND checkin_date = ?
            """, (user_id, today))
            
            existing_checkin = cursor.fetchone()
            if existing_checkin:
                await callback.answer("‚ùå –ß–µ–∫-–∏–Ω —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å–µ–≥–æ–¥–Ω—è!", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                SELECT subscription_checked, pending_balance, total_earnings
                FROM users WHERE user_id = ?
            """, (user_id,))
            user_data = cursor.fetchone()
            
            if not user_data or not user_data[0]:
                await callback.answer("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª", show_alert=True)
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ–∫-–∏–Ω
            checkin_reward = 0.5
            
            # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫-–∏–Ω
            cursor.execute("""
                INSERT INTO user_checkins (user_id, checkin_date, sc_amount)
                VALUES (?, ?, ?)
            """, (user_id, today, checkin_reward))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            cursor.execute("""
                UPDATE users 
                SET pending_balance = pending_balance + ?,
                    total_earnings = total_earnings + ?
                WHERE user_id = ?
            """, (checkin_reward, checkin_reward, user_id))
            
            conn.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫-–∏–Ω–æ–≤
            cursor.execute("""
                SELECT COUNT(*) FROM user_checkins WHERE user_id = ?
            """, (user_id,))
            total_checkins = cursor.fetchone()[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            new_balance = user_data[1] + checkin_reward
            
            success_text = (
                f"‚úÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                f"üéÅ –ü–æ–ª—É—á–µ–Ω–æ: {format_balance(checkin_reward)} SC\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {format_balance(new_balance)} SC\n"
                f"üìÖ –í—Å–µ–≥–æ —á–µ–∫-–∏–Ω–æ–≤: {total_checkins}\n\n"
                f"üí° –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥–æ–π!"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if callback.message:
                await callback.message.answer(success_text, reply_markup=keyboard, parse_mode="HTML")
            
            await callback.answer("üéâ –ß–µ–∫-–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω! +0.5 SC")
            
    except Exception as e:
        logging.error(f"Daily checkin error for user {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ–∫-–∏–Ω–∞", show_alert=True)

@router.callback_query(F.data == "checkin_stats")
async def checkin_stats_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ–∫-–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã", show_alert=True)
        return
    
    user_id = callback.from_user.id
    db = get_db()
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                SELECT COUNT(*), SUM(sc_amount), MAX(checkin_date)
                FROM user_checkins WHERE user_id = ?
            """, (user_id,))
            stats = cursor.fetchone()
            
            total_checkins = stats[0] if stats[0] else 0
            total_earned = stats[1] if stats[1] else 0
            last_checkin = stats[2] if stats[2] else "–ù–∏–∫–æ–≥–¥–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫-–∏–Ω —Å–µ–≥–æ–¥–Ω—è
            today = date.today().isoformat()
            cursor.execute("""
                SELECT id FROM user_checkins 
                WHERE user_id = ? AND checkin_date = ?
            """, (user_id, today))
            
            today_checkin = cursor.fetchone() is not None
            
            stats_text = (
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ–∫-–∏–Ω–æ–≤</b>\n\n"
                f"üìÖ –í—Å–µ–≥–æ —á–µ–∫-–∏–Ω–æ–≤: {total_checkins}\n"
                f"üéÅ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_balance(total_earned)} SC\n"
                f"üìÜ –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–µ–∫-–∏–Ω: {last_checkin}\n"
                f"‚úÖ –°–µ–≥–æ–¥–Ω—è: {'–í—ã–ø–æ–ª–Ω–µ–Ω' if today_checkin else '–î–æ—Å—Ç—É–ø–µ–Ω'}\n\n"
                f"üí° –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω –¥–∞–µ—Ç 0.5 SC!"
            )
            
            keyboard_buttons = []
            
            if not today_checkin:
                keyboard_buttons.append([InlineKeyboardButton(text="üéØ –°–¥–µ–ª–∞—Ç—å —á–µ–∫-–∏–Ω", callback_data="daily_checkin")])
            
            keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if callback.message:
                await callback.message.answer(stats_text, reply_markup=keyboard, parse_mode="HTML")
            
            await callback.answer()
            
    except Exception as e:
        logging.error(f"Checkin stats error for user {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

# ===============================
# –ö–†–ò–¢–ò–ß–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö
# –ë–ï–ó –ù–ò–• –ö–ù–û–ü–ö–ò –ù–ï –†–ê–ë–û–¢–ê–Æ–¢!
# ===============================

@router.callback_query(F.data == "profile")
async def callback_profile(callback: CallbackQuery):
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await callback.answer()
        if callback.message and callback.from_user:
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            await profile_text_handler(callback.message)
    except Exception as e:
        logging.error(f"Profile callback error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data == "open_capsule")
async def callback_open_capsule(callback: CallbackQuery):
    """–û—Ç–∫—Ä—ã—Ç—å –∫–∞–ø—Å—É–ª—É"""
    try:
        await callback.answer()
        if callback.message and callback.from_user:
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ø—Å—É–ª
            await capsule_text_handler(callback.message)
    except Exception as e:
        logging.error(f"Open capsule callback error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data == "referrals")
async def callback_referrals(callback: CallbackQuery):
    """–†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await callback.answer()
        if callback.message and callback.from_user:
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            await referrals_text_handler(callback.message)
    except Exception as e:
        logging.error(f"Referrals callback error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data == "leaderboard")
async def callback_leaderboard(callback: CallbackQuery):
    """–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        await callback.answer()
        if callback.message and callback.from_user:
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ø–∞
            # –ü—Ä–æ—Å—Ç–æ–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞
            text = "üèÜ <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\nüìä –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤!"
            await callback.message.answer(text, parse_mode="HTML", reply_markup=get_main_keyboard())
    except Exception as e:
        logging.error(f"Leaderboard callback error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data == "link_wallet")
async def callback_link_wallet(callback: CallbackQuery):
    """–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ—à–µ–ª–µ–∫"""
    try:
        await callback.answer()
        if callback.message:
            text = "üîó <b>–ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞</b>\n\n–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π 'Stars Store' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
            await callback.message.answer(text, parse_mode="HTML", reply_markup=get_main_keyboard())
    except Exception as e:
        logging.error(f"Link wallet callback error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data == "request_withdrawal")
async def callback_request_withdrawal(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–≤–æ–¥"""
    try:
        await callback.answer()
        if callback.message:
            text = "üí∏ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–∞."
            await callback.message.answer(text, parse_mode="HTML")
    except Exception as e:
        logging.error(f"Request withdrawal callback error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data == "share_link")
async def callback_share_link(callback: CallbackQuery):
    """–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π"""
    try:
        await callback.answer()
        if callback.message and callback.from_user:
            user_id = callback.from_user.id
            referral_link = f"https://t.me/scReferalbot?start=ref_{user_id}"
            text = f"üì± <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n\n`{referral_link}`\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!"
            await callback.message.answer(text, parse_mode="HTML")
    except Exception as e:
        logging.error(f"Share link callback error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data == "my_referrals")
async def callback_my_referrals(callback: CallbackQuery):
    """–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã"""
    try:
        await callback.answer()
        if callback.message and callback.from_user:
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            await referrals_text_handler(callback.message)
    except Exception as e:
        logging.error(f"My referrals callback error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data == "check_subscription")
async def callback_check_subscription(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        await callback.answer()
        if callback.message:
            text = "‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ..."
            await callback.message.answer(text, parse_mode="HTML")
    except Exception as e:
        logging.error(f"Check subscription callback error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")