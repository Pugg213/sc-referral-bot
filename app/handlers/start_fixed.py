"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Å—Ç–∞—Ä—Ç–∞ –ë–ï–ó LSP –æ—à–∏–±–æ–∫
"""
import logging
from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ChatType

from app.context import get_config, get_db
from app.keyboards import get_main_keyboard, get_subscription_keyboard
from app.services.captcha import CaptchaService
from app.utils.subscription import check_user_subscriptions
from app.utils.helpers import extract_referrer_id, format_user_mention

router = Router()

class OnboardingStates(StatesGroup):
    captcha = State()
    subscription_check = State()

@router.message(CommandStart(), F.chat.type == ChatType.PRIVATE)
async def start_command(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start —Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º"""
    if not message.from_user:
        return
    user_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""
    
    cfg = get_config()
    db = get_db()
    
    # –ò–∑–≤–ª–µ—á—å ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏–∑ deeplink
    referrer_id = extract_referrer_id(message.text or "")
    logging.info(f"Start command processing - User: {user_id}, Command text: '{message.text}', Extracted referrer: {referrer_id}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = db.get_user(user_id)
    
    if not user:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞—Ç—å –∏ –Ω–∞—á–∞—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        logging.info(f"Creating new user: {user_id}, username: {username}, referrer: {referrer_id}")
        if db.create_user(user_id, username, first_name, referrer_id or 0):
            logging.info(f"‚úÖ New user registered successfully: {user_id} (referred by: {referrer_id})")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–ª—Å—è
            created_user = db.get_user(user_id)
            if created_user:
                logging.info(f"‚úÖ User verification: {created_user.get('referrer_id', 'No referrer field')}")
            else:
                logging.error(f"‚ùå User not found after creation: {user_id}")
                
            # –ù–∞—á–∞—Ç—å —Å –∫–∞–ø—á–∏
            captcha_service = CaptchaService()
            session_id, captcha_text, keyboard = await captcha_service.generate_captcha(user_id)
            
            await state.update_data(captcha_session_id=session_id)
            await state.set_state(OnboardingStates.captcha)
            
            welcome_text = (
                f"üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SC Referral Bot!</b>\n\n"
                f"üëã –ü—Ä–∏–≤–µ—Ç, {format_user_mention(first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', username or '')}!\n\n"
                f"üéÅ –¢–µ–±—è –∂–¥—É—Ç –∫–∞–ø—Å—É–ª—ã —Å SC –Ω–∞–≥—Ä–∞–¥–∞–º–∏!\n"
                f"üë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!\n\n"
                f"üì¢ <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É:</b>\n"
                f"üîó –ö–∞–Ω–∞–ª: https://t.me/just_a_simple_coin\n"
                f"üí¨ –ß–∞—Ç: https://t.me/simplecoin_chatSC\n\n"
                f"üîê –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n"
                f"{captcha_text}"
            )
            
            try:
                await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")
            except Exception as e:
                logging.error(f"Welcome message send error: {e}")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                try:
                    await message.answer("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SC Referral Bot! –ü—Ä–æ–π–¥–∏—Ç–µ –∫–∞–ø—á—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
                except Exception as e2:
                    logging.error(f"Fallback welcome message failed: {e2}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        try:
            await show_main_menu(message)
        except Exception as e:
            logging.error(f"Error showing main menu for existing user {user_id}: {e}")
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            try:
                await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!", reply_markup=get_main_keyboard())
            except Exception as e2:
                logging.error(f"Failed to send fallback message: {e2}")

@router.callback_query(F.data.startswith("captcha_"))
async def handle_captcha(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–ø—á—É"""
    if not callback.data or not callback.from_user:
        return
    try:
        parts = callback.data.split("_")
        session_id = int(parts[1])
        user_answer = int(parts[2])
        
        captcha_service = CaptchaService()
        is_correct, solve_time = await captcha_service.check_captcha(session_id, user_answer)
        
        if is_correct:
            # –ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            cfg = get_config()
            db = get_db()
            
            # –í—ã—á–∏—Å–ª–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å captcha_score
            captcha_score = captcha_service.calculate_captcha_score(solve_time, cfg.RISK_THRESHOLDS)
            db.update_user_scores(callback.from_user.id, captcha_score=captcha_score)
            
            # –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏
            await callback.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ message –¥–æ—Å—Ç—É–ø–Ω–æ
            if callback.message and hasattr(callback.message, 'answer'):
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞
                from aiogram.types import Message
                if isinstance(callback.message, Message):
                    await start_subscription_check(callback.message, state)
        else:
            await callback.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
            
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ø—á–∏.", show_alert=True)

async def start_subscription_check(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏"""
    cfg = get_config()
    
    keyboard = get_subscription_keyboard(cfg.CHANNEL_LINK, cfg.GROUP_LINK)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
    if cfg.CHANNEL_LINK:
        channel_link_text = f'<a href="{cfg.CHANNEL_LINK}">üì¢ –ö–∞–Ω–∞–ª Simple Coin</a>'
    else:
        channel_link_text = "üì¢ –ö–∞–Ω–∞–ª Simple Coin"
    
    if cfg.GROUP_LINK:
        group_link_text = f'<a href="{cfg.GROUP_LINK}">üí¨ –ì—Ä—É–ø–ø–∞ Simple Coin</a>'
    else:
        group_link_text = "üí¨ –ì—Ä—É–ø–ø–∞ Simple Coin"
    
    text = (
        "üìã <b>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ Simple Coin:</b>\n\n"
        "<b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ:</b> –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏\n"
        f"üîó {channel_link_text}\n\n"
        "<b>–ü–æ –∂–µ–ª–∞–Ω–∏—é:</b> –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n"
        f"üîó {group_link_text}\n\n"
        "üí° <i>–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\"</i>"
    )
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(OnboardingStates.subscription_check)

@router.callback_query(F.data == "check_subscription")
async def handle_subscription_check(callback: types.CallbackQuery, state: FSMContext):
    """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô HANDLER: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not callback.from_user:
        return
    
    user_id = callback.from_user.id
    cfg = get_config()
    db = get_db()
    
    await callback.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫—É...")
    
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä bot
        from app.utils.subscription import check_user_subscriptions
        
        # –ü–æ–ª—É—á–∞–µ–º bot –∏–∑ callback (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π)
        bot = callback.bot
        if not bot:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã", show_alert=True)
            return
            
        is_subscribed = await check_user_subscriptions(
            bot, user_id, cfg.REQUIRED_CHANNEL_ID, cfg.REQUIRED_GROUP_ID
        )
        
        if is_subscribed:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º subscription_checked –≤ –ë–î
            db.update_subscription_status(user_id, True)
            
            try:
                from aiogram.types import Message
                if callback.message and isinstance(callback.message, Message):
                    await callback.message.edit_text(
                        "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Simple Coin!\n"
                        "üéÅ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–∞–ø—Å—É–ª—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å SC!"
                    )
            except Exception:
                pass  # Message might be inaccessible
            
            await state.clear()
            # –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if callback.message and hasattr(callback.message, 'answer'):
                from aiogram.types import Message
                if isinstance(callback.message, Message):
                    await show_main_menu(callback.message)
                
        else:
            try:
                from aiogram.types import Message
                if callback.message and isinstance(callback.message, Message):
                    await callback.message.edit_text(
                        "‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\n"
                        "üìã –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã:\n"
                        "‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª Simple Coin\n"
                        "‚Ä¢ –í—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)\n\n"
                        "üí° –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑",
                        reply_markup=get_subscription_keyboard(cfg.CHANNEL_LINK, cfg.GROUP_LINK)
                    )
            except Exception:
                pass  # Message might be inaccessible
            
    except Exception as e:
        logging.error(f"Subscription check error for user {user_id}: {e}")
        try:
            from aiogram.types import Message
            if callback.message and isinstance(callback.message, Message):
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_subscription_keyboard(cfg.CHANNEL_LINK, cfg.GROUP_LINK)
                )
        except Exception:
            pass  # Message might be inaccessible




async def show_main_menu(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ message –∏ chat –¥–æ—Å—Ç—É–ø–Ω—ã
        if not message or not message.chat:
            logging.warning("show_main_menu: message or chat is None")
            return
            
        text = (
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SC Referral Bot! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:\n\n"
            "üéÅ <b>–ö–∞–ø—Å—É–ª—ã</b> - –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã\n"
            "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã</b> - –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π\n"
            "üí∞ <b>–ë–∞–ª–∞–Ω—Å</b> - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ SC —Ç–æ–∫–µ–Ω—ã\n"
            "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "üìã <b>–ü—Ä–∞–≤–∏–ª–∞</b> - –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞\n"
            "üéØ <b>–ó–∞–¥–∞–Ω–∏—è</b> - –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã"
        )
        
        keyboard = get_main_keyboard()
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logging.error(f"show_main_menu error: {e}")
        # –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ chat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω