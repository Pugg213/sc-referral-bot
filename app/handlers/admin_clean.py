"""
–ü–æ–ª–Ω–∞—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ LSP –æ—à–∏–±–∫–∞–º–∏
–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –í–°–ï —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
"""

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.enums import ChatType
import logging
from typing import Optional

from app.context import get_db, get_config

router = Router()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞"""
    cfg = get_config()
    return user_id in cfg.ADMIN_IDS

def format_balance(amount: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    return f"{amount:.2f}"

# ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò =====

@router.message(Command("admin"), F.chat.type == ChatType.PRIVATE)
async def admin_panel(message: types.Message):
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not message.from_user or not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üí∏ –í—ã–ø–ª–∞—Ç—ã", callback_data="admin_payouts")
        ],
        [
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            InlineKeyboardButton(text="üéØ –ó–∞–¥–∞–Ω–∏—è", callback_data="admin_tasks")
        ],
        [
            InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
        ]
    ])
    
    await message.answer(
        "üõ† <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.message(Command("stats"), F.chat.type == ChatType.PRIVATE)
async def show_stats(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    db = get_db()
    
    with db.get_connection() as conn:
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM users WHERE subscription_checked = 1")
        verified_users = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM capsule_openings")
        total_capsules = cursor.fetchone()[0]
        
        cursor.execute("SELECT SUM(validated_referrals) FROM users")
        total_validated_refs_result = cursor.fetchone()[0] 
        total_validated_refs = total_validated_refs_result if total_validated_refs_result else 0
        
        cursor.execute("SELECT COUNT(*) FROM users WHERE referrer_id IS NOT NULL")
        total_referrals = cursor.fetchone()[0]
        
        cursor.execute("SELECT SUM(total_earnings) FROM users")
        total_earnings_result = cursor.fetchone()[0]
        total_earnings = total_earnings_result if total_earnings_result else 0
        
        cursor.execute("SELECT SUM(pending_balance) FROM users")
        pending_balance_result = cursor.fetchone()[0]
        pending_balance = pending_balance_result if pending_balance_result else 0
        
        cursor.execute("SELECT SUM(paid_balance) FROM users")
        paid_balance_result = cursor.fetchone()[0] 
        paid_balance = paid_balance_result if paid_balance_result else 0

    text = f"""üìä <b>–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_users}
‚Ä¢ –ü—Ä–æ—à–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é: {verified_users}

üéÅ <b>–ö–∞–ø—Å—É–ª—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ: {total_capsules}

üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {total_referrals}
‚Ä¢ –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {total_validated_refs}

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_balance(total_earnings)} SC
‚Ä¢ –ö –≤—ã–ø–ª–∞—Ç–µ: {format_balance(pending_balance)} SC  
‚Ä¢ –í—ã–ø–ª–∞—á–µ–Ω–æ: {format_balance(paid_balance)} SC"""
    
    await message.answer(text, parse_mode="HTML")

# ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø–ú–ò =====

@router.message(Command("add_task"), F.chat.type == ChatType.PRIVATE)
async def add_task_command(message: types.Message):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: /add_task "–ù–∞–∑–≤–∞–Ω–∏–µ" "–û–ø–∏—Å–∞–Ω–∏–µ" –Ω–∞–≥—Ä–∞–¥–∞_–∫–∞–ø—Å—É–ª –¥–Ω–∏
    args = message.text.split(maxsplit=1) if message.text else []
    if len(args) < 2:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "<code>/add_task \"–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\" \"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\" –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–∞–ø—Å—É–ª –¥–Ω–∏</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>/add_task \"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª\" \"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @simplecoin_chat\" 3 7</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        parts = args[1].split()
        if len(parts) < 4:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∫–∞–≤—ã—á–µ–∫
        text_parts = args[1]
        
        # –ò—â–µ–º –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
        first_quote = text_parts.find('"')
        if first_quote == -1:
            raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∫–∞–≤—ã—á–∫–∞—Ö")
            
        second_quote = text_parts.find('"', first_quote + 1)
        if second_quote == -1:
            raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∫–∞–≤—ã—á–∫–∞—Ö")
            
        title = text_parts[first_quote + 1:second_quote]
        
        # –ò—â–µ–º –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
        remaining = text_parts[second_quote + 1:].strip()
        third_quote = remaining.find('"')
        if third_quote == -1:
            raise ValueError("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∫–∞–≤—ã—á–∫–∞—Ö")
            
        fourth_quote = remaining.find('"', third_quote + 1)
        if fourth_quote == -1:
            raise ValueError("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∫–∞–≤—ã—á–∫–∞—Ö")
            
        description = remaining[third_quote + 1:fourth_quote]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        remaining_params = remaining[fourth_quote + 1:].strip().split()
        if len(remaining_params) < 2:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            
        reward_capsules = int(remaining_params[0])
        period_days = int(remaining_params[1])
        
        if reward_capsules <= 0 or period_days <= 0:
            raise ValueError("–ù–∞–≥—Ä–∞–¥–∞ –∏ –ø–µ—Ä–∏–æ–¥ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏")
        
    except (ValueError, IndexError) as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö:</b> {str(e)}\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
            "<code>/add_task \"–ù–∞–∑–≤–∞–Ω–∏–µ\" \"–û–ø–∏—Å–∞–Ω–∏–µ\" –∫–∞–ø—Å—É–ª—ã –¥–Ω–∏</code>",
            parse_mode="HTML"
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –ë–î
    db = get_db()
    
    try:
        task_id = db.add_task(
            title=title,
            description=description, 
            task_type="manual",
            reward_capsules=reward_capsules,
            partner_name="",
            partner_url="",
            requirements="",
            expires_at=None,
            max_completions=None
        )
        
        await message.answer(
            f"‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
            f"üÜî ID: {task_id}\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {reward_capsules} –∫–∞–ø—Å—É–ª\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_days} –¥–Ω–µ–π\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_tasks –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logging.error(f"Error adding task: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.")

@router.message(Command("list_tasks"), F.chat.type == ChatType.PRIVATE)
async def list_tasks_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    db = get_db()
    tasks = db.get_all_tasks()
    
    if not tasks:
        await message.answer("üìã <b>–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_task –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.", parse_mode="HTML")
        return
    
    text = "üìã <b>–í—Å–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n\n"
    
    for task in tasks:
        status_emoji = "‚úÖ" if task.get('status') == 'active' else "‚ùå"
        text += f"{status_emoji} <b>ID {task.get('id')}</b>: {task.get('title')}\n"
        text += f"üéÅ {task.get('reward_capsules', 0)} –∫–∞–ø—Å—É–ª ‚Ä¢ "
        text += f"üìÖ {task.get('period_days', 0)} –¥–Ω. ‚Ä¢ "
        text += f"üë• {task.get('current_completions', 0)} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π\n\n"
    
    text += "üí° <b>–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n"
    text += "‚Ä¢ <code>/toggle_task ID</code> - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å\n" 
    text += "‚Ä¢ <code>/delete_task ID</code> - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ\n"
    text += "‚Ä¢ <code>/edit_task_* ID –ø–∞—Ä–∞–º–µ—Ç—Ä</code> - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
    
    await message.answer(text, parse_mode="HTML")

# ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò =====

@router.message(Command("user_info"), F.chat.type == ChatType.PRIVATE)
async def user_info_command(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    args = message.text.split() if message.text else []
    if len(args) < 2:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n<code>/user_info 123456789</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        user_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    
    db = get_db()
    user = db.get_user(user_id)
    
    if not user:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    with db.get_connection() as conn:
        cursor = conn.cursor()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        cursor.execute("SELECT COUNT(*) FROM users WHERE referrer_id = ?", (user_id,))
        total_refs = cursor.fetchone()[0]
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞–ø—Å—É–ª—ã  
        cursor.execute("""
            SELECT reward_name, reward_amount, opened_at 
            FROM capsule_openings 
            WHERE user_id = ? 
            ORDER BY opened_at DESC LIMIT 3
        """, (user_id,))
        recent_capsules = cursor.fetchall()
    
    text = f"""üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>

üÜî <b>ID:</b> {user.get('user_id')}
üë§ <b>Username:</b> @{user.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üè∑ <b>–ò–º—è:</b> {user.get('first_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {user.get('registration_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10]}

‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b>
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: {'–î–∞' if user.get('subscription_checked') else '–ù–µ—Ç'}
‚Ä¢ –ó–∞–±–∞–Ω–µ–Ω: {'–î–∞' if user.get('banned') else '–ù–µ—Ç'}

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>  
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_balance(user.get('total_earnings', 0))} SC
‚Ä¢ –ö –≤—ã–ø–ª–∞—Ç–µ: {format_balance(user.get('pending_balance', 0))} SC
‚Ä¢ –í—ã–ø–ª–∞—á–µ–Ω–æ: {format_balance(user.get('paid_balance', 0))} SC

üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã:</b>
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {total_refs}
‚Ä¢ –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ: {user.get('validated_referrals', 0)}

üéÅ <b>–ö–∞–ø—Å—É–ª—ã:</b>
‚Ä¢ –°–µ–≥–æ–¥–Ω—è –æ—Ç–∫—Ä—ã—Ç–æ: {user.get('daily_capsules_opened', 0)}/3
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ: {user.get('total_capsules_opened', 0)}"""

    if recent_capsules:
        text += "\n\nüéÅ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞–ø—Å—É–ª—ã:</b>\n"
        for capsule in recent_capsules:
            text += f"‚Ä¢ {capsule[0]}: {capsule[1]} ({capsule[2][:10]})\n"

    await message.answer(text, parse_mode="HTML")

# ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–´–ü–õ–ê–¢–ê–ú–ò =====

@router.message(Command("withdrawal_requests"), F.chat.type == ChatType.PRIVATE) 
async def withdrawal_requests_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    db = get_db()
    requests = db.get_withdrawal_requests()
    
    if not requests:
        await message.answer("üìã <b>–ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ—Ç</b>", parse_mode="HTML")
        return
    
    text = "üí∏ <b>–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:</b>\n\n"
    
    for req in requests:
        text += f"üÜî <b>#{req.get('id')}</b>\n"
        text += f"üë§ @{req.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({req.get('user_id')})\n"
        text += f"üí∞ –°—É–º–º–∞: {format_balance(req.get('amount', 0))} SC\n"
        text += f"üìÖ –î–∞—Ç–∞: {req.get('created_at', '')[:16]}\n"
        text += f"üëõ –ö–æ—à–µ–ª–µ–∫: {req.get('wallet_address', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"
    
    text += "üí° –î–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>/approve_withdrawal ID</code>"
    
    await message.answer(text, parse_mode="HTML")

# ===== CALLBACK HANDLERS =====

@router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ callback"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    db = get_db()
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute("SELECT COUNT(*) FROM users")
            total_users = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM users WHERE subscription_checked = 1")
            verified_users = cursor.fetchone()[0]
            
            cursor.execute("SELECT SUM(total_earnings) FROM users")
            total_earnings_result = cursor.fetchone()[0]
            total_earnings = total_earnings_result if total_earnings_result else 0
            
        text = f"""üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã: {verified_users}

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_balance(total_earnings)} SC"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        if callback.message and isinstance(callback.message, Message):
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Admin stats error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

@router.callback_query(F.data == "admin_back")
async def admin_back_callback(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üí∏ –í—ã–ø–ª–∞—Ç—ã", callback_data="admin_payouts")
        ],
        [
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            InlineKeyboardButton(text="üéØ –ó–∞–¥–∞–Ω–∏—è", callback_data="admin_tasks")
        ]
    ])
    
    text = "üõ† <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    
    if callback.message and isinstance(callback.message, Message):
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "admin_tasks")
async def admin_tasks_callback(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏ - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
    db = get_db()
    try:
        active_tasks = db.get_active_tasks()
        total_tasks = len(active_tasks) if active_tasks else 0
        total_completions = sum(task['current_completions'] for task in active_tasks) if active_tasks else 0
    except:
        total_tasks = 0
        total_completions = 0
    
    text = f"""üéØ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {total_tasks}
‚úÖ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {total_completions}

üí° <b>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>

üìù <b>–ö–æ–º–∞–Ω–¥—ã (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±):</b>
<code>/add_task "–ù–∞–∑–≤–∞–Ω–∏–µ" "–û–ø–∏—Å–∞–Ω–∏–µ" –Ω–∞–≥—Ä–∞–¥–∞_–∫–∞–ø—Å—É–ª –¥–Ω–∏</code>
<code>/list_tasks</code> - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
<code>/toggle_task ID</code> - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="create_task_start")],
        [
            InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="admin_list_tasks"),
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="admin_delete_tasks")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    if callback.message and isinstance(callback.message, Message):
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "admin_payouts")
async def admin_payouts_callback(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç–∞–º–∏"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    text = """üí∏ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç–∞–º–∏</b>

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/withdrawal_requests</code> - –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥
‚Ä¢ <code>/approve_withdrawal ID</code> - –æ–¥–æ–±—Ä–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É
‚Ä¢ <code>/payouts</code> - –∏—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç
‚Ä¢ <code>/balances</code> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    if callback.message and isinstance(callback.message, Message):
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "admin_users")
async def admin_users_callback(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    text = """üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/user_info ID</code> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
‚Ä¢ <code>/ban ID –ø—Ä–∏—á–∏–Ω–∞</code> - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ <code>/unban ID</code> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    if callback.message and isinstance(callback.message, Message):
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

# ===== –°–ò–°–¢–ï–ú–ê –ú–ê–°–°–û–í–û–ô –†–ê–°–°–´–õ–ö–ò =====

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_callback(callback: types.CallbackQuery):
    """–ü–∞–Ω–µ–ª—å –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    logging.info(f"üì¢ BROADCAST CALLBACK TRIGGERED by user {callback.from_user.id if callback.from_user else 'None'}")
    
    if not callback.from_user or not is_admin(callback.from_user.id):
        logging.warning(f"‚ùå Admin access denied for user {callback.from_user.id if callback.from_user else 'None'}")
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    text = """üì¢ <b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>

üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:

‚Ä¢ <b>–ö–∞–ø—Å—É–ª—ã</b> - –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–∞–ø—Å—É–ª
‚Ä¢ <b>–ó–∞–¥–∞–Ω–∏—è</b> - –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π  
‚Ä¢ <b>–†–µ—Ñ–µ—Ä–∞–ª—ã</b> - –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéÅ –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –∫–∞–ø—Å—É–ª–∞—Ö", callback_data="broadcast_capsules"),
            InlineKeyboardButton(text="üéØ –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–¥–∞–Ω–∏—è—Ö", callback_data="broadcast_tasks")
        ],
        [
            InlineKeyboardButton(text="üë• –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö", callback_data="broadcast_referrals"),
            InlineKeyboardButton(text="üí∞ –û–±—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="broadcast_general")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
        ]
    ])
    
    if callback.message and isinstance(callback.message, Message):
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "broadcast_capsules")
async def broadcast_capsules_reminder(callback: types.CallbackQuery):
    """–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–∞–ø—Å—É–ª–∞—Ö"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    db = get_db()
    users = db.get_all_users()
    
    if not users:
        await callback.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
        return
    
    reminder_text = """üéÅ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–∞–ø—Å—É–ª–∞—Ö!</b>

üíé –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –≤–∞—à–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–∞–ø—Å—É–ª—ã!

üéØ <b>–í–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ 3 –±–∞–∑–æ–≤—ã–µ –∫–∞–ø—Å—É–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ +1 –∫–∞–ø—Å—É–ª–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ –∫–∞–ø—Å—É–ª—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π

üí∞ –ö–∞–∂–¥–∞—è –∫–∞–ø—Å—É–ª–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å SC —Ç–æ–∫–µ–Ω—ã –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑—ã!

‚è∞ <b>–ö–∞–ø—Å—É–ª—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!</b>
–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å!

üëá –ù–∞–∂–º–∏—Ç–µ "üéÅ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ø—Å—É–ª—É" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    success_count = 0
    failed_count = 0
    blocked_bots = 0
    deleted_accounts = 0
    other_errors = 0
    
    for user in users:
        try:
            if callback.bot:
                await callback.bot.send_message(
                    chat_id=user['user_id'],
                    text=reminder_text,
                    parse_mode="HTML"
                )
            success_count += 1
        except Exception as e:
            failed_count += 1
            error_text = str(e).lower()
            if "blocked" in error_text or "bot was blocked" in error_text:
                blocked_bots += 1
                logging.warning(f"üö´ User {user['user_id']} blocked bot")
            elif "user is deactivated" in error_text or "user not found" in error_text:
                deleted_accounts += 1
                logging.warning(f"üëª User {user['user_id']} account deleted/deactivated")
            else:
                other_errors += 1
                logging.error(f"‚ùå Failed to send to {user['user_id']}: {e}")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    report_text = f"""üìä <b>–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–∞–ø—Å—É–ª–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üìã <b>–ü—Ä–∏—á–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞–≤–∫–∏:</b>
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked_bots}
üëª –£–¥–∞–ª–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: {deleted_accounts}  
‚ö†Ô∏è –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏: {other_errors}"""
    
    if callback.message and isinstance(callback.message, Message):
        await callback.message.edit_text(report_text, parse_mode="HTML")
    await callback.answer("üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")

@router.callback_query(F.data == "broadcast_tasks")
async def broadcast_tasks_reminder(callback: types.CallbackQuery):
    """–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞–Ω–∏—è—Ö"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    db = get_db()
    users = db.get_all_users()
    active_tasks = db.get_active_tasks()
    
    if not users:
        await callback.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
        return
    
    if not active_tasks:
        reminder_text = """üéØ <b>–°–∫–æ—Ä–æ –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è!</b>

üìã –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π, –Ω–æ –æ–Ω–∏ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!

üí° <b>–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:</b>
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ –≥—Ä—É–ø–ø–∞—Ö

üéÅ <b>–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏—è:</b>
‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ –∫–∞–ø—Å—É–ª—ã –∫ –¥–Ω–µ–≤–Ω–æ–º—É –ª–∏–º–∏—Ç—É
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ SC —Ç–æ–∫–µ–Ω—ã

‚ö° –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "üéØ –ó–∞–¥–∞–Ω–∏—è"!"""
    else:
        task_count = len(active_tasks)
        reminder_text = f"""üéØ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞–Ω–∏—è—Ö!</b>

üìã –°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ {task_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!

üí° <b>–ó–∞—á–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è:</b>
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –∫–∞–ø—Å—É–ª—ã
‚Ä¢ –£–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ SC

üéÅ <b>–ö–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–∞–µ—Ç:</b>
‚Ä¢ –û—Ç 1 –¥–æ 5 –±–æ–Ω—É—Å–Ω—ã—Ö –∫–∞–ø—Å—É–ª
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ

‚ö° <b>–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!</b>
–ù–∞–∂–º–∏—Ç–µ "üéØ –ó–∞–¥–∞–Ω–∏—è" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    success_count = 0
    failed_count = 0
    blocked_bots = 0
    deleted_accounts = 0
    other_errors = 0
    
    for user in users:
        try:
            if callback.bot:
                await callback.bot.send_message(
                    chat_id=user['user_id'],
                    text=reminder_text,
                    parse_mode="HTML"
                )
            success_count += 1
        except Exception as e:
            failed_count += 1
            error_text = str(e).lower()
            if "blocked" in error_text or "bot was blocked" in error_text:
                blocked_bots += 1
                logging.warning(f"üö´ User {user['user_id']} blocked bot")
            elif "user is deactivated" in error_text or "user not found" in error_text:
                deleted_accounts += 1
                logging.warning(f"üëª User {user['user_id']} account deleted/deactivated")
            else:
                other_errors += 1
                logging.error(f"‚ùå Failed to send to {user['user_id']}: {e}")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    report_text = f"""üìä <b>–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞–Ω–∏—è—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {len(active_tasks) if active_tasks else 0}

üìã <b>–ü—Ä–∏—á–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞–≤–∫–∏:</b>
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked_bots}
üëª –£–¥–∞–ª–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: {deleted_accounts}  
‚ö†Ô∏è –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏: {other_errors}"""
    
    if callback.message and isinstance(callback.message, Message):
        await callback.message.edit_text(report_text, parse_mode="HTML")
    await callback.answer("üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")

@router.callback_query(F.data == "broadcast_referrals")
async def broadcast_referrals_reminder(callback: types.CallbackQuery):
    """–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    db = get_db()
    users = db.get_all_users()
    
    if not users:
        await callback.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
        return
    
    reminder_text = """üë• <b>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ!</b>

üîó <b>–í–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b>
‚Ä¢ +1 –∫–∞–ø—Å—É–ª–∞ –≤ –¥–µ–Ω—å –∑–∞ –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
‚Ä¢ 10% –æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª–µ–π

üí∞ <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
2. –î—Ä—É–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
3. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã!

üèÜ <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–æ 21 —Ä–µ—Ñ–µ—Ä–∞–ª–∞!</b>
–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –ª–∏–¥–µ—Ä–∞–º!

üîó –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã"!"""
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    success_count = 0
    failed_count = 0
    blocked_bots = 0
    deleted_accounts = 0
    other_errors = 0
    
    for user in users:
        try:
            if callback.bot:
                await callback.bot.send_message(
                    chat_id=user['user_id'],
                    text=reminder_text,
                    parse_mode="HTML"
                )
            success_count += 1
        except Exception as e:
            failed_count += 1
            error_text = str(e).lower()
            if "blocked" in error_text or "bot was blocked" in error_text:
                blocked_bots += 1
                logging.warning(f"üö´ User {user['user_id']} blocked bot")
            elif "user is deactivated" in error_text or "user not found" in error_text:
                deleted_accounts += 1
                logging.warning(f"üëª User {user['user_id']} account deleted/deactivated")
            else:
                other_errors += 1
                logging.error(f"‚ùå Failed to send to {user['user_id']}: {e}")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    report_text = f"""üìä <b>–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üìã <b>–ü—Ä–∏—á–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞–≤–∫–∏:</b>
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked_bots}
üëª –£–¥–∞–ª–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: {deleted_accounts}  
‚ö†Ô∏è –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏: {other_errors}"""
    
    if callback.message and isinstance(callback.message, Message):
        await callback.message.edit_text(report_text, parse_mode="HTML")
    await callback.answer("üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")

@router.callback_query(F.data == "broadcast_general")
async def broadcast_general_reminder(callback: types.CallbackQuery):
    """–†–∞—Å—Å—ã–ª–∫–∞ –æ–±—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    db = get_db()
    users = db.get_all_users()
    
    if not users:
        await callback.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
        return
    
    reminder_text = """üöÄ <b>–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å!</b>

üíé <b>–í–∞—à–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ üéÅ –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–∞–ø—Å—É–ª—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ SC —Ç–æ–∫–µ–Ω—ã
‚Ä¢ üéØ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –±–æ–Ω—É—Å–Ω—ã—Ö –∫–∞–ø—Å—É–ª  
‚Ä¢ üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –ª–∏–º–∏—Ç—ã

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 59+
‚Ä¢ –û—Ç–∫—Ä—ã—Ç–æ –∫–∞–ø—Å—É–ª: 121+
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ SC: 301+

üèÜ <b>–°—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!</b>
–õ–∏–¥–µ—Ä—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –¥–æ 110+ SC —Ç–æ–∫–µ–Ω–æ–≤!

‚ö° –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!"""
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    success_count = 0
    failed_count = 0
    blocked_bots = 0
    deleted_accounts = 0
    other_errors = 0
    
    for user in users:
        try:
            if callback.bot:
                await callback.bot.send_message(
                    chat_id=user['user_id'],
                    text=reminder_text,
                    parse_mode="HTML"
                )
            success_count += 1
        except Exception as e:
            failed_count += 1
            error_text = str(e).lower()
            if "blocked" in error_text or "bot was blocked" in error_text:
                blocked_bots += 1
                logging.warning(f"üö´ User {user['user_id']} blocked bot")
            elif "user is deactivated" in error_text or "user not found" in error_text:
                deleted_accounts += 1
                logging.warning(f"üëª User {user['user_id']} account deleted/deactivated")
            else:
                other_errors += 1
                logging.error(f"‚ùå Failed to send to {user['user_id']}: {e}")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    report_text = f"""üìä <b>–û–±—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üìã <b>–ü—Ä–∏—á–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞–≤–∫–∏:</b>
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked_bots}
üëª –£–¥–∞–ª–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: {deleted_accounts}  
‚ö†Ô∏è –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏: {other_errors}"""
    
    if callback.message and isinstance(callback.message, Message):
        await callback.message.edit_text(report_text, parse_mode="HTML")
    await callback.answer("üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")