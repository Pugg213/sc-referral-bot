"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∫–æ—à–µ–ª—å–∫–∞ –∏ –≤—ã–≤–æ–¥–æ–≤
"""
import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.context import get_config, get_db
from app.keyboards import get_main_keyboard
from app.utils.helpers import format_balance

router = Router()

class WalletStates(StatesGroup):
    waiting_for_wallet = State()
    waiting_for_amount = State()

@router.message(Command("wallet"))
async def wallet_command(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–∞"""
    if not message.from_user or not message.text:
        return
        
    db = get_db()
    user = db.get_user(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
    
    if not user['subscription_checked']:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ /start")
        return
    
    args = message.text.split()[1:]
    
    if args:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ
        wallet_address = args[0]
        await save_wallet(message, wallet_address)
    else:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
        if user['wallet_address']:
            await message.answer(
                f"üíº <b>–í–∞—à —Ç–µ–∫—É—â–∏–π –∫–æ—à–µ–ª–µ–∫:</b>\n"
                f"<code>{user['wallet_address']}</code>\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å TON –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã:"
            )
        else:
            await message.answer(
                "üíº <b>–ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ TON –∫–æ—à–µ–ª—å–∫–∞:\n"
                "–ü—Ä–∏–º–µ—Ä: <code>UQD4FPq-TD7Yay6F4j-s8zr-YvdWBYkkL2xNrqjW6UQKWqqK</code>"
            )
        
        await state.set_state(WalletStates.waiting_for_wallet)

async def save_wallet(message: types.Message, wallet_address: str):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞"""
    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è TON –∞–¥—Ä–µ—Å–∞
    if not wallet_address or len(wallet_address) < 48:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ TON –∫–æ—à–µ–ª—å–∫–∞")
        return
    
    if not message.from_user:
        return
        
    db = get_db()
    db.update_wallet(message.from_user.id, wallet_address)
    
    await message.answer(
        f"‚úÖ <b>–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!</b>\n\n"
        f"üíº –ê–¥—Ä–µ—Å: <code>{wallet_address}</code>\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∫–æ–º–∞–Ω–¥–æ–π /withdraw"
    )

@router.message(WalletStates.waiting_for_wallet)
async def process_wallet(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞"""
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞")
        return
    await save_wallet(message, message.text.strip())
    await state.clear()

@router.message(Command("withdraw"))
async def withdraw_command(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥"""
    db = get_db()
    user = db.get_user(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
    
    if not user['subscription_checked']:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏")
        return
    
    if not user['wallet_address']:
        await message.answer(
            "‚ùå <b>–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω</b>\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ TON –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /wallet"
        )
        return
    
    if user['pending_balance'] <= 0:
        await message.answer(
            f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {format_balance(user['pending_balance'])} SC\n"
            f"–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞–ø—Å—É–ª—ã –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞!"
        )
        return
    
    args = message.text.split()[1:]
    
    if args:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª —Å—É–º–º—É –≤ –∫–æ–º–∞–Ω–¥–µ
        try:
            amount = float(args[0])
            await process_withdraw_request(message, amount, user)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞")
    else:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É
        await message.answer(
            f"üí∞ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥</b>\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: {format_balance(user['pending_balance'])} SC\n"
            f"–ö–æ—à–µ–ª–µ–∫: <code>{user['wallet_address']}</code>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:"
        )
        await state.set_state(WalletStates.waiting_for_amount)

@router.message(WalletStates.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    try:
        amount = float(message.text.strip())
        db = get_db()
        user = db.get_user(message.from_user.id)
        await process_withdraw_request(message, amount, user)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
        return
    
    await state.clear()

async def process_withdraw_request(message: types.Message, amount: float, user: dict):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥"""
    if amount <= 0:
        await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        return
    
    if amount > user['pending_balance']:
        await message.answer(
            f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
            f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ: {format_balance(amount)} SC\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ: {format_balance(user['pending_balance'])} SC"
        )
        return
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ —Å–Ω–∏–∂–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    min_withdraw = 5.0
    if amount < min_withdraw:
        await message.answer(
            f"‚ùå <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞</b>\n\n"
            f"–ú–∏–Ω–∏–º—É–º: {format_balance(min_withdraw)} SC\n"
            f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ: {format_balance(amount)} SC\n\n"
            f"üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–∞–ø—Å—É–ª—ã –∏ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π!"
        )
        return
    
    # –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
    db = get_db()
    request_id = db.create_withdrawal_request(message.from_user.id, amount)
    
    if request_id:
        await message.answer(
            f"‚úÖ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {format_balance(amount)} SC\n"
            f"üíº –ö–æ—à–µ–ª–µ–∫: <code>{user['wallet_address']}</code>\n"
            f"üÜî ID –∑–∞–ø—Ä–æ—Å–∞: {request_id}\n\n"
            f"–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"–ü–æ—Å–ª–µ –≤—ã–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω."
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        cfg = get_config()
        if not getattr(cfg, 'DISABLE_ADMIN_NOTIFICATIONS', False):
            admin_text = (
                f"üîî <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['first_name']} (@{user['username'] or '–±–µ–∑ username'})\n"
                f"üí∞ –°—É–º–º–∞: {format_balance(amount)} SC\n"
                f"üÜî ID –∑–∞–ø—Ä–æ—Å–∞: {request_id}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ /withdrawal_requests"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º (—á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞)
            try:
                bot = message.bot
                for admin_id in cfg.ADMIN_IDS:
                    try:
                        await bot.send_message(admin_id, admin_text)
                    except Exception:
                        pass
            except Exception:
                pass
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–¢–ö–õ–Æ–ß–ï–ù - –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï —Å navigation_production.py
# @router.message(F.text == "üíº –ö–æ—à–µ–ª–µ–∫")
async def wallet_menu(message: types.Message):
    """–ú–µ–Ω—é –∫–æ—à–µ–ª—å–∫–∞"""
    db = get_db()
    user = db.get_user(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
    
    wallet_text = f"üíº <b>–í–∞—à –∫–æ—à–µ–ª–µ–∫</b>\n\n"
    
    if user['wallet_address']:
        wallet_text += f"üì± TON –∞–¥—Ä–µ—Å:\n<code>{user['wallet_address']}</code>\n\n"
    else:
        wallet_text += f"‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω\n\n"
    
    wallet_text += (
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b>\n"
        f"‚è≥ –ö –≤—ã–≤–æ–¥—É: {format_balance(user['pending_balance'])} SC\n"
        f"‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ: {format_balance(user['paid_balance'])} SC\n"
        f"üíé –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_balance(user['total_earnings'])} SC\n\n"
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥
    active_requests = db.get_user_withdrawal_requests(message.from_user.id)
    if active_requests:
        wallet_text += f"üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</b>\n"
        for req in active_requests:
            wallet_text += f"‚Ä¢ {format_balance(req['amount'])} SC (#{req['id']})\n"
        wallet_text += "\n"
    
    wallet_text += (
        f"<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        f"/wallet - –ø—Ä–∏–≤—è–∑–∞—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫\n"
        f"/withdraw - –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"
    )
    
    await message.answer(wallet_text)