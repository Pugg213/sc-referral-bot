"""
–ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏ - –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import logging
import json
from datetime import datetime
from aiogram import Router, types, F
from aiogram.types import CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.context import get_config, get_db
from app.keyboards import get_tasks_keyboard
from app.helpers.task_verification import verify_subscription, is_valid_telegram_url
from app.services.tasks import TaskService

router = Router()

# Helper function for safe message editing
async def safe_edit_message(callback, text, reply_markup=None, parse_mode="HTML"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å fallback"""
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: callback –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å CallbackQuery, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–æ–π
    if not callback or isinstance(callback, str) or not hasattr(callback, 'message'):
        return
    
    if hasattr(callback.message, 'edit_text'):
        try:
            await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        except Exception:
            try:
                await callback.answer(text[:200] + "..." if len(text) > 200 else text, show_alert=True)
            except:
                logging.error("Failed to answer callback in safe_edit_message")
    else:
        try:
            await callback.answer(text[:200] + "..." if len(text) > 200 else text, show_alert=True)
        except:
            logging.error("Failed to answer callback in safe_edit_message fallback")

class TaskCreation(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    waiting_url = State()
    waiting_activity_params = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    waiting_reward = State()

class TaskEditing(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    waiting_title = State()
    waiting_description = State()
    waiting_reward = State()
    waiting_activity_params = State()

# ================== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ==================
@router.message(F.text == "üéØ –ó–∞–¥–∞–Ω–∏—è")
async def tasks_menu(message: types.Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    db = get_db()
    
    user = db.get_user(user_id)
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    completed_tasks = db.get_user_completed_tasks(user_id)
    active_tasks = db.get_active_tasks()
    
    available_tasks = []
    for task in active_tasks:
        if not db.is_task_completed(user_id, task['id']):
            if task['max_completions'] is None or task['current_completions'] < task['max_completions']:
                available_tasks.append(task)
    
    total_earned_capsules = sum(ct['reward_capsules'] for ct in completed_tasks)
    
    text = (
        f"üéØ <b>–°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞–Ω–∏–π</b>\n\n"
        f"üíº –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –∫–∞–ø—Å—É–ª—ã!\n\n"
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(completed_tasks)} –∑–∞–¥–∞–Ω–∏–π\n"
        f"üéÅ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_earned_capsules} –∫–∞–ø—Å—É–ª\n"
        f"üìã –î–æ—Å—Ç—É–ø–Ω–æ: {len(available_tasks)} –∑–∞–¥–∞–Ω–∏–π\n\n"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø—Ä—è–º–æ –≤ –º–µ–Ω—é
    if available_tasks:
        text += f"üî• <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n"
        for task in available_tasks[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–¥–∞–Ω–∏—è
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞–Ω–∏—è
            if task['task_type'] == 'channel_subscription':
                type_emoji = "üì¢"
            elif task['task_type'] == 'channel_activity':
                type_emoji = "üí¨"
            else:
                type_emoji = "üë•"
                
            text += f"{type_emoji} {task['title']}\n"
            text += f"   üéÅ {task['reward_capsules']} –∫–∞–ø—Å—É–ª ‚Ä¢ üè¢ {task['partner_name']}\n"
        
        if len(available_tasks) > 3:
            text += f"\n... –∏ –µ—â—ë {len(available_tasks) - 3} –∑–∞–¥–∞–Ω–∏–π"
    else:
        text += f"üì≠ <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π</b>\n\n–ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
    
    await message.answer(text, reply_markup=get_tasks_keyboard())

@router.callback_query(F.data == "available_tasks")
async def show_available_tasks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"""
    if not callback.from_user:
        return
    
    user_id = callback.from_user.id
    db = get_db()
    
    active_tasks = db.get_active_tasks()
    if not active_tasks:
        await safe_edit_message(callback, "üìã –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    available_tasks = []
    for task in active_tasks:
        is_completed = db.is_task_completed(user_id, task['id'])
        has_max_completions = task['max_completions'] is not None
        at_max_completions = has_max_completions and task['current_completions'] >= task['max_completions']
        
        
        if not is_completed and not at_max_completions:
            available_tasks.append(task)
    
    if not available_tasks:
        text = "‚úÖ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è!\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤."
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tasks_back")]]
        )
        if callback.message and hasattr(callback.message, 'edit_text'):
            try:
                await safe_edit_message(callback, text, reply_markup=keyboard)
            except Exception:
                await callback.answer("‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!", show_alert=True)
        return
    
    text = f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è ({len(available_tasks)}):</b>\n\n"
    keyboard_buttons = []
    
    for task in available_tasks:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞–Ω–∏—è
        if task['task_type'] == 'channel_subscription':
            type_emoji = "üì¢"
        elif task['task_type'] == 'channel_activity':
            type_emoji = "üí¨"
        else:
            type_emoji = "üë•"
            
        text += (
            f"{type_emoji} <b>{task['title']}</b>\n"
            f"üè¢ –ü–∞—Ä—Ç–Ω–µ—Ä: {task['partner_name']}\n"
            f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {task['reward_capsules']} –∫–∞–ø—Å—É–ª\n"
            f"üë§ –í—ã–ø–æ–ª–Ω–∏–ª–∏: {task['current_completions']}\n\n"
        )
        
        keyboard_buttons.append([
            types.InlineKeyboardButton(
                text=f"{type_emoji} {task['title'][:25]}...",
                callback_data=f"do_task_{task['id']}"
            )
        ])
    
    keyboard_buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tasks_back")])
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    if callback.message and hasattr(callback.message, 'edit_text'):
        try:
            await safe_edit_message(callback, text, reply_markup=keyboard)
        except Exception:
            await callback.answer("üìã –ó–∞–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã!", show_alert=True)

@router.callback_query(F.data.startswith("do_task_"))
async def execute_task(callback: CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    if not callback.from_user:
        return
    
    user_id = callback.from_user.id
    if not callback.data or len(callback.data.split("_")) < 3:
        return
    try:
        task_id_str = callback.data.split("_")[2]
        task_id = int(task_id_str) if task_id_str else 0
    except (ValueError, IndexError):
        return
    
    db = get_db()
    task = db.get_task(task_id)
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    if task['status'] != 'active':
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        return
    
    if db.is_task_completed(user_id, task_id):
        await callback.answer("‚úÖ –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ", show_alert=True)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞–Ω–∏—è
    if task['task_type'] == 'channel_subscription':
        type_emoji = "üì¢"
        action_text = "–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª"
        is_activity_task = False
    elif task['task_type'] == 'channel_activity':
        type_emoji = "üí¨"
        action_text = "–≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ"
        is_activity_task = True
    else:
        type_emoji = "üë•"
        action_text = "–≤—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É"
        is_activity_task = False
    
    # –†–∞–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
    if task['task_type'] == 'channel_activity':
        # –î–ª—è –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –æ—Å–æ–±—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        text = (
            f"{type_emoji} <b>{task['title']}</b>\n\n"
            f"üè¢ <b>–ü–∞—Ä—Ç–Ω–µ—Ä:</b> {task['partner_name']}\n"
            f"{task['description']}\n\n"
            f"üéÅ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> {task['reward_capsules']} –±–æ–Ω—É—Å–Ω—ã—Ö –∫–∞–ø—Å—É–ª\n\n"
            f"üìã <b>–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
            f"1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª'\n"
            f"2Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã)\n"
            f"3Ô∏è‚É£ –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–¥ –ø–æ—Å—Ç–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ\n"
            f"4Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ'\n\n"
            f"‚ú® –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–∏ –∫–∞–ø—Å—É–ª—ã!"
        )
    else:
        # –û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (–ø–æ–¥–ø–∏—Å–∫–∞/–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ)
        text = (
            f"{type_emoji} <b>{task['title']}</b>\n\n"
            f"üè¢ <b>–ü–∞—Ä—Ç–Ω–µ—Ä:</b> {task['partner_name']}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task['description']}\n"
            f"üéÅ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> {task['reward_capsules']} –±–æ–Ω—É—Å–Ω—ã—Ö –∫–∞–ø—Å—É–ª\n\n"
            f"üìã <b>–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>\n"
            f"1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '{action_text}' –Ω–∏–∂–µ\n"
            f"2. {action_text.capitalize()} –ø–æ —Å—Å—ã–ª–∫–µ\n"
            f"3. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ'\n"
            f"4. –ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –∫–∞–ø—Å—É–ª—ã!\n\n"
            f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ù–µ –æ—Ç–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å —Å—Ä–∞–∑—É, –∏–Ω–∞—á–µ –Ω–∞–≥—Ä–∞–¥–∞ –±—É–¥–µ—Ç –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∞."
        )
    
    # –†–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
    if task['task_type'] == 'channel_activity':
        button_text = "üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª"
    else:
        button_text = f"{type_emoji} {action_text.capitalize()}"
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text=button_text, 
            url=task['partner_url']
        )],
        [types.InlineKeyboardButton(
            text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", 
            callback_data=f"check_task_{task_id}"
        )],
        [types.InlineKeyboardButton(text="üîô –ö –∑–∞–¥–∞–Ω–∏—è–º", callback_data="available_tasks")]
    ])
    
    if callback.message and hasattr(callback.message, 'edit_text'):
        try:
            await safe_edit_message(callback, text, reply_markup=keyboard)
        except Exception:
            await callback.answer("üéØ –ó–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!", show_alert=True)

@router.callback_query(F.data.startswith("check_task_"))
async def check_task_completion(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    if not callback.from_user or not callback.message or not callback.message.bot:
        return
    
    user_id = callback.from_user.id
    if not callback.data or len(callback.data.split("_")) < 3:
        return
    try:
        task_id_str = callback.data.split("_")[2]
        task_id = int(task_id_str) if task_id_str else 0
    except (ValueError, IndexError):
        return
    
    db = get_db()
    task = db.get_task(task_id)
    
    if not task or task['status'] != 'active':
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        return
    
    if db.is_task_completed(user_id, task_id):
        await callback.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏
    task_service = TaskService(db)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Task –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    from app.services.tasks import Task, TaskType
    task_obj = Task(
        id=task['id'],
        title=task['title'],
        description=task['description'],
        task_type=TaskType(task['task_type']),
        requirements=eval(task['requirements']) if task['requirements'] else {},
        reward_sc=task.get('reward_sc', 0.0),
        reward_capsules=task['reward_capsules'],
        partner_name=task.get('partner_name', ''),
        partner_url=task.get('partner_url', ''),
        expires_at=None,
        max_completions=task.get('max_completions'),
        created_at=None
    )
    
    verification_result = await task_service._verify_task_completion(user_id, task_obj, callback.message.bot)
    
    if verification_result["success"]:
        # –ó–∞—Å—á–∏—Ç–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∫–∞–ø—Å—É–ª—ã)
        db.complete_user_task(user_id, task_id, task['reward_capsules'])
        db.add_bonus_capsules(user_id, task['reward_capsules'])
        
        success_text = (
            f"üéâ <b>–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!</b>\n\n"
            f"‚úÖ {task['title']}\n"
            f"üéÅ –ü–æ–ª—É—á–µ–Ω–æ: {task['reward_capsules']} –±–æ–Ω—É—Å–Ω—ã—Ö –∫–∞–ø—Å—É–ª\n"
            f"üì¶ –ö–∞–ø—Å—É–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –≤–∞—à–µ–º—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º—É –ª–∏–º–∏—Ç—É\n\n"
            f"üí° –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤!"
        )
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üéØ –î—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="available_tasks")],
            [types.InlineKeyboardButton(text="üì¶ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ø—Å—É–ª—ã", callback_data="open_capsule")],
            [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        if callback.message and hasattr(callback.message, 'edit_text'):
            try:
                await safe_edit_message(callback, success_text, reply_markup=keyboard)
            except Exception:
                await callback.answer("üéâ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!", show_alert=True)
        
        # –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        cfg = get_config()
        if not getattr(cfg, 'DISABLE_ADMIN_NOTIFICATIONS', False):
            user_info = f"@{callback.from_user.username}" if callback.from_user.username else callback.from_user.first_name
            admin_notification = f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\nüë§ {user_info}\nüéØ {task['title']}\nüéÅ {task['reward_capsules']} –∫–∞–ø—Å—É–ª"
            
            for admin_id in cfg.ADMIN_IDS:
                try:
                    await callback.message.bot.send_message(admin_id, admin_notification)
                except:
                    pass
                
    else:
        # –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        error_message = verification_result.get("error", "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        error_text = (
            f"‚ùå <b>–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</b>\n\n"
            f"üéØ {task['title']}\n"
            f"üîç –ü—Ä–æ–±–ª–µ–º–∞: {error_message}\n\n"
            f"üìù <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
            f"1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n"
            f"2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã\n" 
            f"3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑\n\n"
            f"üí° –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É"
        )
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"check_task_{task_id}")],
            [types.InlineKeyboardButton(text="üîô –ö –∑–∞–¥–∞–Ω–∏—è–º", callback_data="available_tasks")]
        ])
        
        if callback.message and hasattr(callback.message, 'edit_text'):
            try:
                await safe_edit_message(callback, error_text, reply_markup=keyboard)
            except Exception:
                await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", show_alert=True)

# ================== –ê–î–ú–ò–ù–´ - –ö–û–ú–ê–ù–î–´ ==================
@router.message(Command("tasks"))
async def admin_tasks_command(message: types.Message):
    """–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    if not message.from_user:
        return
    
    cfg = get_config()
    if message.from_user.id not in cfg.ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    db = get_db()
    tasks = db.get_active_tasks()
    
    if not tasks:
        await message.answer("üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç")
        return
    
    text = f"üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è ({len(tasks)}):</b>\n\n"
    
    for task in tasks:
        text += (
            f"üÜî <b>ID {task['id']}</b> - {task['title']}\n"
            f"   üè¢ {task['partner_name']}\n"
            f"   üë§ –í—ã–ø–æ–ª–Ω–∏–ª–∏: {task['current_completions']}\n"
            f"   üéÅ –ù–∞–≥—Ä–∞–¥–∞: {task['reward_capsules']} –∫–∞–ø—Å—É–ª\n\n"
        )
    
    text += "‚ö° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n/off ID - –æ—Ç–∫–ª—é—á–∏—Ç—å\n/new - —Å–æ–∑–¥–∞—Ç—å"
    
    await message.answer(text)

@router.message(Command("off"))
async def disable_task_command(message: types.Message):
    """–ë—ã—Å—Ç—Ä–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"""
    if not message.from_user or not message.text:
        return
    
    cfg = get_config()
    if message.from_user.id not in cfg.ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    if not message.text:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å ID")
        return
    parts = message.text.strip().split()
    if len(parts) < 2:
        await message.answer("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /off ID\n–ü—Ä–∏–º–µ—Ä: /off 1")
        return
    
    try:
        task_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    db = get_db()
    task = db.get_task(task_id)
    
    if not task:
        await message.answer(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    if task['status'] != 'active':
        await message.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
        return
    
    if db.deactivate_task(task_id):
        await message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ\nüÜî ID {task_id}: {task['title']}")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏")

@router.message(Command("new"))
async def create_task_command(message: types.Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    if not message.from_user:
        return
    
    cfg = get_config()
    if message.from_user.id not in cfg.ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await message.answer(
        "üéØ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</b>\n\n"
        "üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ó–∞–¥–∞–Ω–∏—è' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n"
        "üí° –ò–ª–∏ –∫–æ–º–∞–Ω–¥—É:\n/tasks - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ"
    )

# ================== –ê–î–ú–ò–ù–´ - –ú–ï–ù–Æ ==================
# –£–î–ê–õ–ï–ù: –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ admin_tasks - –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ admin_clean.py
# –¢–µ–ø–µ—Ä—å –≤—Å–µ –∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ

@router.callback_query(F.data == "create_task_start")
async def start_task_creation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    if not callback.from_user:
        return
    
    cfg = get_config()
    if callback.from_user.id not in cfg.ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    text = (
        "üéØ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è</b>\n\n"
        "üìù <b>–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ü–µ—Å—Å:</b>\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è\n"
        "2. –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É\n"
        "4. –ì–æ—Ç–æ–≤–æ!\n\n"
        "üí° –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª", callback_data="type_channel")],
        [types.InlineKeyboardButton(text="üë• –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É", callback_data="type_group")],
        [types.InlineKeyboardButton(text="üí¨ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ", callback_data="type_activity")],
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_tasks")]
    ])
    
    if callback.message and hasattr(callback.message, 'edit_text'):
        try:
            await safe_edit_message(callback, text, reply_markup=keyboard)
        except Exception:
            await callback.answer("üéØ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è", show_alert=True)

@router.callback_query(F.data.startswith("type_"))
async def select_task_type(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è"""
    if not callback.data or len(callback.data.split("_")) < 2:
        return
    task_type = callback.data.split("_")[1]
    
    if task_type == "channel":
        await state.update_data(task_type="channel_subscription", type_name="–∫–∞–Ω–∞–ª")
        text = "üì¢ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:"
    elif task_type == "activity":
        await state.update_data(task_type="channel_activity", type_name="–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
        text = "üí¨ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ</b>\n\n–í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @simplecoin_news):"
    else:
        await state.update_data(task_type="group_join", type_name="–≥—Ä—É–ø–ø—É")
        text = "üë• <b>–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É:"
    
    await state.set_state(TaskCreation.waiting_url)
    if callback.message and hasattr(callback.message, 'edit_text'):
        try:
            await safe_edit_message(callback, text)
        except Exception:
            await callback.answer(text, show_alert=True)
    else:
        await callback.answer(text, show_alert=True)

@router.message(TaskCreation.waiting_url)
async def process_task_url(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å URL –∑–∞–¥–∞–Ω–∏—è"""
    logging.info(f"üîß Processing URL: {message.text}, user: {message.from_user.id if message.from_user else 'unknown'}")
    data = await state.get_data()
    task_type = data.get('task_type', '')
    logging.info(f"üîß Current task_type: {task_type}, data: {data}")
    
    if task_type == "channel_activity":
        # –î–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º @username
        if not message.text or not (message.text.startswith('@') or message.text.startswith('https://t.me/')):
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ (@simplecoin_news) –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª")
            return
        
        channel = message.text
        if channel.startswith('https://t.me/'):
            channel = '@' + channel.split('/')[-1]
        elif not channel.startswith('@'):
            channel = '@' + channel
        
        title = f"üí¨ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ {channel}"
        partner_name = channel.replace('@', '')
        url = f"https://t.me/{partner_name}"
        
        await state.update_data(
            partner_url=url, 
            title=title, 
            partner_name=partner_name,
            channel=channel
        )
    else:
        # –î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –≥—Ä—É–ø–ø —Ç—Ä–µ–±—É–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É
        if not message.text or not message.text.startswith(('https://t.me/', 'http://t.me/', 't.me/')):
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Telegram –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É")
            return
        
        url = message.text
        type_name = data.get('type_name', '—Ä–µ—Å—É—Ä—Å')
        
        # –°–æ–∑–¥–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if 'channel' in task_type:
            title = f"üîî –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ {url.split('/')[-1] if '/' in url else '–∫–∞–Ω–∞–ª'}"
            partner_name = url.split('/')[-1] if '/' in url else "–ü–∞—Ä—Ç–Ω–µ—Ä"
        else:
            title = f"üí¨ –í—Å—Ç—É–ø–∏ –≤ {url.split('/')[-1] if '/' in url else '–≥—Ä—É–ø–ø—É'}"
            partner_name = url.split('/')[-1] if '/' in url else "–ü–∞—Ä—Ç–Ω–µ—Ä"
    
    # –î–ª—è activity –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if task_type == "channel_activity":
        logging.info(f"üîß Processing channel_activity for {data.get('channel', 'unknown_channel')}")
        
        text = (
            f"üí¨ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ {data.get('channel', '–∫–∞–Ω–∞–ª–µ')}</b>\n\n"
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞–Ω–∏—è:\n\n"
            f"üí° –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n"
            f"‚Ä¢ 3 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\n"
            f"‚Ä¢ –ó–∞ 7 –¥–Ω–µ–π\n"
            f"‚Ä¢ –ù–∞ 2 –ø–æ—Å—Ç–∞—Ö\n"
            f"‚Ä¢ 5 –∫–∞–ø—Å—É–ª –Ω–∞–≥—Ä–∞–¥–∞"
        )
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="activity_default")],
            [types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="activity_custom")]
        ])
        
        await state.set_state(TaskCreation.waiting_activity_params)
        try:
            await message.answer(text, reply_markup=keyboard)
            logging.info(f"‚úÖ Activity config menu sent successfully")
        except Exception as e:
            logging.error(f"‚ùå Failed to send activity config: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π —Å—Ä–∞–∑—É –≤—ã–±–æ—Ä –Ω–∞–≥—Ä–∞–¥—ã
        type_name = data.get('type_name', '—Ä–µ—Å—É—Ä—Å')
        
        text = (
            f"üéÅ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ {type_name}:</b>\n\n"
            f"üì¢ –°—Å—ã–ª–∫–∞: {data.get('partner_url', '')}\n"
            f"üéØ –ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('title', '')}\n\n"
            f"üí° –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:"
        )
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üéÅ 3 –∫–∞–ø—Å—É–ª—ã", callback_data="reward_3")],
            [types.InlineKeyboardButton(text="üéÅ 5 –∫–∞–ø—Å—É–ª", callback_data="reward_5")],
            [types.InlineKeyboardButton(text="üéÅ 7 –∫–∞–ø—Å—É–ª", callback_data="reward_7")],
            [types.InlineKeyboardButton(text="‚úèÔ∏è –î—Ä—É–≥–∞—è –Ω–∞–≥—Ä–∞–¥–∞", callback_data="reward_custom")]
        ])
        
        await state.set_state(TaskCreation.waiting_reward)
        await message.answer(text, reply_markup=keyboard)

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ACTIVITY ==================

@router.callback_query(F.data.startswith("activity_"))
async def handle_activity_params(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    if not callback.data or len(callback.data.split("_")) < 2:
        return
    param_type = callback.data.split("_")[1]
    
    if param_type == "default":
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await state.update_data(
            min_comments=3,
            period_days=7,
            min_posts=2,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 –ø–æ—Å—Ç–∞
            reward_capsules=5
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        await finalize_activity_task(callback, state)
        
    elif param_type == "custom":
        text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–Ω–∏ –ø–æ—Å—Ç—ã –Ω–∞–≥—Ä–∞–¥–∞</code>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>5 14 3 7</code>\n"
            "‚Ä¢ 5 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n"
            "‚Ä¢ –ó–∞ 14 –¥–Ω–µ–π\n"
            "‚Ä¢ –ü–æ–¥ 3 –ø–æ—Å—Ç–∞–º–∏\n"
            "‚Ä¢ 7 –∫–∞–ø—Å—É–ª –Ω–∞–≥—Ä–∞–¥—ã"
        )
        
        await safe_edit_message(callback, text)
        # –û—Å—Ç–∞–µ–º—Å—è –≤ waiting_activity_params

@router.message(TaskCreation.waiting_activity_params)
async def process_activity_params(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    try:
        if not message.text:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–Ω–∏ –ø–æ—Å—Ç—ã –Ω–∞–≥—Ä–∞–¥–∞")
            return
        parts = message.text.strip().split()
        if len(parts) != 4:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        min_comments = int(parts[0])
        period_days = int(parts[1]) 
        min_posts = int(parts[2])
        reward_capsules = int(parts[3])
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if min_comments < 1 or min_comments > 20:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20")
            return
        
        if period_days < 1 or period_days > 30:
            await message.answer("‚ùå –ü–µ—Ä–∏–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 30 –¥–Ω–µ–π")
            return
            
        if min_posts < 1 or min_posts > 10:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")
            return
        
        if reward_capsules < 1 or reward_capsules > 15:
            await message.answer("‚ùå –ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 15 –∫–∞–ø—Å—É–ª")
            return
        
        await state.update_data(
            min_comments=min_comments,
            period_days=period_days,
            min_posts=min_posts,
            reward_capsules=reward_capsules
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback –¥–ª—è finalize_activity_task
        class FakeCallback:
            def __init__(self, user_id):
                self.from_user = type('obj', (object,), {'id': user_id})
                self.message = message
            
            async def answer(self, text="", show_alert=False):
                # –§–∏–∫—Ç–∏–≤–Ω—ã–π async –º–µ—Ç–æ–¥
                pass
        
        fake_callback = FakeCallback(message.from_user.id if message.from_user else 0)
        await finalize_activity_task(fake_callback, state)
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "<code>–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–Ω–∏ –ø–æ—Å—Ç—ã –Ω–∞–≥—Ä–∞–¥–∞</code>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>3 7 2 5</code>\n"
            "‚Ä¢ 3 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\n"
            "‚Ä¢ –ó–∞ 7 –¥–Ω–µ–π\n"
            "‚Ä¢ –ü–æ–¥ 2 –ø–æ—Å—Ç–∞–º–∏\n"
            "‚Ä¢ 5 –∫–∞–ø—Å—É–ª –Ω–∞–≥—Ä–∞–¥—ã"
        )

async def finalize_activity_task(callback, state: FSMContext):
    """–§–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    data = await state.get_data()
    
    min_comments = data.get('min_comments', 3)
    period_days = data.get('period_days', 7)
    min_posts = data.get('min_posts', 2)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 –ø–æ—Å—Ç–∞
    reward_capsules = data.get('reward_capsules', 5)
    channel = data.get('channel', '')
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å —è—Å–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
    if min_posts == 1:
        description = f"üí¨ –û—Å—Ç–∞–≤—å—Ç–µ {min_comments} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –∫–∞–Ω–∞–ª–µ {channel} –∑–∞ {period_days} –¥–Ω–µ–π\n\n‚ö†Ô∏è –í–∞–∂–Ω–æ: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–¥ –æ–¥–Ω–∏–º –ø–æ—Å—Ç–æ–º"
    else:
        description = f"üí¨ –û—Å—Ç–∞–≤—å—Ç–µ {min_comments} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–¥ {min_posts} –†–ê–ó–ù–´–ú–ò –ø–æ—Å—Ç–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ {channel} –∑–∞ {period_days} –¥–Ω–µ–π\n\n‚ö†Ô∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥ —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏!\nüìù –ü—Ä–∏–º–µ—Ä: {min_comments//min_posts + (1 if min_comments % min_posts else 0)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–¥ 1 –ø–æ—Å—Ç–æ–º, {min_comments//min_posts} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–¥ 2 –ø–æ—Å—Ç–æ–º, –∏ —Ç.–¥."
    
    # –û–±–Ω–æ–≤–ª—è–µ–º title —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤
    if min_posts == 1:
        title = f"üí¨ {min_comments} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ {channel}"
    else:
        title = f"üí¨ {min_comments} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–¥ {min_posts} –ø–æ—Å—Ç–∞–º–∏ –≤ {channel}"
    
    # Requirements –¥–ª—è channel_activity
    requirements = {
        "channel": channel,
        "min_comments": min_comments,
        "period_days": period_days,
        "min_posts": min_posts,
        "start_date": datetime.now().isoformat()
    }
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –ë–î
    db = get_db()
    cfg = get_config()
    
    try:
        task_id = db.add_task(
            title=title,
            description=description,
            task_type="channel_activity",
            reward_capsules=reward_capsules,
            partner_name=data.get('partner_name', channel.replace('@', '')),
            partner_url=data.get('partner_url', f"https://t.me/{channel.replace('@', '')}"),
            requirements=json.dumps(requirements),
            expires_at=None,  # –ë–µ–∑ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
            max_completions=None  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        )
        
        text = (
            f"‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
            f"üéØ <b>{title}</b>\n\n"
            f"{description}\n\n"
            f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {reward_capsules} –∫–∞–ø—Å—É–ª\n"
            f"üÜî ID: {task_id}"
        )
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üì¢ –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö", callback_data=f"notify_users_{task_id}")],
            [types.InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
        ])
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            if callback.message:
                await safe_edit_message(callback, text, reply_markup=keyboard)
        except Exception as e:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if callback.message:
                await callback.message.answer(text, reply_markup=keyboard)
            await callback.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
        await state.clear()
        
        logging.info(f"‚úÖ Admin {callback.from_user.id} created CHANNEL_ACTIVITY task {task_id}: {channel}")
        
    except Exception as e:
        logging.error(f"‚ùå Failed to create activity task: {e}")
        error_text = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        error_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_tasks")]
        ])
        try:
            if callback.message:
                await callback.message.edit_text(error_text, reply_markup=error_keyboard)
        except Exception as e:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if callback.message:
                await callback.message.answer(error_text, reply_markup=error_keyboard)
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è")

@router.callback_query(F.data.startswith("reward_"))
async def select_reward(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É"""
    if not callback.data or len(callback.data.split("_")) < 2:
        return
    reward_data = callback.data.split("_")[1]
    
    if reward_data == "custom":
        try:
            if callback.message:
                await safe_edit_message(callback, "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø—Å—É–ª (–æ—Ç 1 –¥–æ 15):</b>")
        except:
            await callback.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø—Å—É–ª (–æ—Ç 1 –¥–æ 15)", show_alert=True)
        return
    
    try:
        reward = int(reward_data)
    except (ValueError, TypeError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–≥—Ä–∞–¥—ã", show_alert=True)
        return
    
    await finalize_task_creation(callback, state, reward)

@router.message(TaskCreation.waiting_reward)
async def process_custom_reward(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –Ω–∞–≥—Ä–∞–¥—É"""
    try:
        reward = int(message.text) if message.text else 0
        if reward < 1 or reward > 15:
            await message.answer("‚ùå –ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 15 –∫–∞–ø—Å—É–ª")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 15")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ finalize_task_creation
    class FakeCallback:
        def __init__(self, message):
            self.message = message
            self.from_user = message.from_user
        
        async def answer(self, text="", show_alert=False):
            # –§–∏–∫—Ç–∏–≤–Ω—ã–π async –º–µ—Ç–æ–¥
            pass
    
    fake_callback = FakeCallback(message)
    await finalize_task_creation(fake_callback, state, reward)

async def finalize_task_creation(callback, state: FSMContext, reward: int):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    data = await state.get_data()
    
    task_data = {
        'task_type': data['task_type'],
        'title': data['title'],
        'description': f"–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ {reward} –±–æ–Ω—É—Å–Ω—ã—Ö –∫–∞–ø—Å—É–ª",
        'partner_name': data['partner_name'],
        'partner_url': data['partner_url'],
        'reward_capsules': reward,
        'max_completions': None,
        'status': 'active'
    }
    
    db = get_db()
    task_id = db.add_task(
        title=task_data['title'],
        description=task_data['description'],
        task_type=task_data['task_type'],
        reward_capsules=task_data['reward_capsules'],
        partner_name=task_data.get('partner_name', ''),
        partner_url=task_data.get('partner_url', ''),
        requirements=task_data.get('requirements', ''),
        expires_at=task_data.get('expires_at'),
        max_completions=task_data.get('max_completions')
    )
    
    if task_id:
        success_text = (
            f"‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
            f"üÜî ID: {task_id}\n"
            f"üéØ {data['title']}\n"
            f"üè¢ –ü–∞—Ä—Ç–Ω–µ—Ä: {data['partner_name']}\n"
            f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {reward} –∫–∞–ø—Å—É–ª\n"
            f"üîó –°—Å—ã–ª–∫–∞: {data['partner_url']}\n\n"
            f"üéâ –ó–∞–¥–∞–Ω–∏–µ —Å—Ä–∞–∑—É –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!"
        )
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üì¢ –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö", callback_data=f"notify_users_{task_id}")],
            [types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="create_task_start")],
            [types.InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_tasks")]
        ])
        
        try:
            await safe_edit_message(callback, success_text, reply_markup=keyboard)
        except Exception as e:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(success_text, reply_markup=keyboard)
            await callback.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
    else:
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è"
        if hasattr(callback.message, 'edit_text'):
            await safe_edit_message(callback, error_text)
        else:
            await callback.message.answer(error_text)
    
    await state.clear()

# ================== –ú–ê–°–°–û–í–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ==================

@router.callback_query(F.data.startswith("notify_users_"))
async def send_task_notification(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    cfg = get_config()
    if callback.from_user.id not in cfg.ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    if not callback.data or len(callback.data.split("_")) < 3:
        return
    try:
        task_id_str = callback.data.split("_")[2]
        task_id = int(task_id_str) if task_id_str else 0
    except (ValueError, IndexError):
        return
    db = get_db()
    task = db.get_task(task_id)
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = db.get_all_users()
    if not users:
        await callback.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", show_alert=True)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞–Ω–∏—è
    if task['task_type'] == 'channel_subscription':
        type_emoji = "üì¢"
        action_text = "–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª"
    elif task['task_type'] == 'channel_activity':
        type_emoji = "üí¨"
        action_text = "–≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ"
    else:
        type_emoji = "üë•"
        action_text = "–≤—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification_text = (
        f"üéâ <b>–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!</b>\n\n"
        f"{type_emoji} <b>{task['title']}</b>\n"
        f"üè¢ –ü–∞—Ä—Ç–Ω–µ—Ä: {task['partner_name']}\n"
        f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {task['reward_capsules']} –∫–∞–ø—Å—É–ª\n\n"
        f"üí° {task['description']}\n\n"
        f"‚ö° –ß—Ç–æ–±—ã {action_text}, –Ω–∞–∂–º–∏—Ç–µ üéØ –ó–∞–¥–∞–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    success_count = 0
    failed_count = 0
    
    for user in users:
        try:
            if callback.bot:
                await callback.bot.send_message(
                    chat_id=user['user_id'],
                    text=notification_text,
                    parse_mode="HTML"
                )
            success_count += 1
        except Exception as e:
            failed_count += 1
            # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
    
    # –û—Ç—á—ë—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    report_text = (
        f"üìä <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        f"üéØ –ó–∞–¥–∞–Ω–∏–µ: {task['title']}"
    )
    
    if callback.message:
        await safe_edit_message(callback, report_text, parse_mode="HTML")
    await callback.answer("üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")

# ================== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–î–ê–ù–ò–ô ==================

@router.callback_query(F.data.startswith("edit_task_"))
async def start_edit_task(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    cfg = get_config()
    if callback.from_user.id not in cfg.ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    if not callback.data or len(callback.data.split("_")) < 3:
        return
    try:
        task_id_str = callback.data.split("_")[2]
        task_id = int(task_id_str) if task_id_str else 0
    except (ValueError, IndexError):
        return
    db = get_db()
    task = db.get_task(task_id)
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(editing_task_id=task_id)
    
    text = (
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è ID {task_id}</b>\n\n"
        f"üéØ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task['title']}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task['description']}\n"
        f"üéÅ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> {task['reward_capsules']} –∫–∞–ø—Å—É–ª\n"
        f"üè¢ <b>–ü–∞—Ä—Ç–Ω–µ—Ä:</b> {task['partner_name']}\n"
        f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {task['partner_url']}\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–∫—Ç–∏–≤–Ω–æ' if task['status'] == 'active' else '–ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}\n\n"
        f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_title_{task_id}")],
        [types.InlineKeyboardButton(text="üìÑ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_description_{task_id}")],
        [types.InlineKeyboardButton(text="üéÅ –ù–∞–≥—Ä–∞–¥—É", callback_data=f"edit_reward_{task_id}")],
        [types.InlineKeyboardButton(text="üè¢ –ü–∞—Ä—Ç–Ω–µ—Ä–∞", callback_data=f"edit_partner_{task_id}")],
        [types.InlineKeyboardButton(text="üîó –°—Å—ã–ª–∫—É", callback_data=f"edit_url_{task_id}")],
        [types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data=f"toggle_status_{task_id}")],
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_list_tasks")]
    ])
    
    if callback.message:
        await safe_edit_message(callback, text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("edit_title_"))
async def edit_task_title(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    if not callback.data or len(callback.data.split("_")) < 3:
        return
    try:
        task_id_str = callback.data.split("_")[2]
        task_id = int(task_id_str) if task_id_str else 0
    except (ValueError, IndexError):
        return
    await state.update_data(editing_task_id=task_id, editing_field="title")
    await state.set_state(TaskEditing.waiting_title)
    
    text = "üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:"
    if callback.message:
        await safe_edit_message(callback, text)

@router.callback_query(F.data.startswith("edit_description_"))
async def edit_task_description(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    if not callback.data or len(callback.data.split("_")) < 3:
        return
    try:
        task_id_str = callback.data.split("_")[2]
        task_id = int(task_id_str) if task_id_str else 0
    except (ValueError, IndexError):
        return
    await state.update_data(editing_task_id=task_id, editing_field="description")
    await state.set_state(TaskEditing.waiting_description)
    
    text = "üìÑ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:"
    if callback.message:
        await safe_edit_message(callback, text)

@router.callback_query(F.data.startswith("edit_reward_"))
async def edit_task_reward(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞–¥–∞–Ω–∏—è"""
    if not callback.data or len(callback.data.split("_")) < 3:
        return
    try:
        task_id_str = callback.data.split("_")[2]
        task_id = int(task_id_str) if task_id_str else 0
    except (ValueError, IndexError):
        return
    await state.update_data(editing_task_id=task_id, editing_field="reward_capsules")
    await state.set_state(TaskEditing.waiting_reward)
    
    text = "üéÅ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø—Å—É–ª (–æ—Ç 1 –¥–æ 15):"
    if callback.message:
        await safe_edit_message(callback, text)

@router.callback_query(F.data.startswith("toggle_status_"))
async def toggle_task_status(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è"""
    cfg = get_config()
    if callback.from_user.id not in cfg.ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    if not callback.data or len(callback.data.split("_")) < 3:
        return
    try:
        task_id_str = callback.data.split("_")[2]
        task_id = int(task_id_str) if task_id_str else 0
    except (ValueError, IndexError):
        return
    db = get_db()
    task = db.get_task(task_id)
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    new_status = "inactive" if task['status'] == "active" else "active"
    success = db.update_task_status(task_id, new_status)
    
    if success:
        status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ" if new_status == "active" else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
        await callback.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ {status_text}!")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await start_edit_task(callback, state)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

@router.message(TaskEditing.waiting_title)
async def process_title_edit(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"""
    data = await state.get_data()
    task_id = data.get('editing_task_id')
    if not task_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: ID –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    db = get_db()
    success = db.update_task_field(task_id, 'title', message.text)
    
    if success:
        await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è")
    
    await state.clear()

@router.message(TaskEditing.waiting_description)
async def process_description_edit(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"""
    data = await state.get_data()
    task_id = data.get('editing_task_id')
    if not task_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: ID –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    db = get_db()
    success = db.update_task_field(task_id, 'description', message.text)
    
    if success:
        await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è")
    
    await state.clear()

@router.message(TaskEditing.waiting_reward)
async def process_reward_edit(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É"""
    try:
        reward = int(message.text) if message.text else 0
        if reward < 1 or reward > 15:
            await message.answer("‚ùå –ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 15 –∫–∞–ø—Å—É–ª")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 15")
        return
    
    data = await state.get_data()
    task_id = data.get('editing_task_id')
    if not task_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: ID –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    db = get_db()
    success = db.update_task_field(task_id, 'reward_capsules', reward)
    
    if success:
        await message.answer(f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {reward} –∫–∞–ø—Å—É–ª!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã")
    
    await state.clear()

# ================== –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–ò ==================
@router.callback_query(F.data == "tasks_back")
async def tasks_back(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π"""
    if not callback.from_user or not callback.message:
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞ message —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º from_user
    class FakeMessage:
        def __init__(self, callback_query):
            self.from_user = callback_query.from_user
            self.message_obj = callback_query.message
            
        async def answer(self, text, reply_markup=None, parse_mode=None):
            if self.message_obj:
                await self.message_obj.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    
    fake_message = FakeMessage(callback)
    await tasks_menu(fake_message)

@router.callback_query(F.data == "admin_delete_tasks")
async def admin_delete_tasks(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π"""
    if not callback.from_user:
        return
    
    cfg = get_config()
    if callback.from_user.id not in cfg.ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    db = get_db()
    tasks = db.get_all_tasks()
    
    if not tasks:
        text = "üìã <b>–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_tasks")]
        ])
        if callback.message:
            await safe_edit_message(callback, text, reply_markup=keyboard)
        return
    
    text = "üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n"
    keyboard_buttons = []
    
    for task in tasks[:10]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10
        status_emoji = "‚úÖ" if task['status'] == 'active' else "‚ùå"
        type_emoji = "üì¢" if task['task_type'] == 'channel_subscription' else "üë•"
        
        text += (
            f"{status_emoji} <b>ID {task['id']}</b> {type_emoji} {task['title']}\n"
            f"   üë§ –í—ã–ø–æ–ª–Ω–∏–ª–∏: {task['current_completions']}\n\n"
        )
        
        keyboard_buttons.append([
            types.InlineKeyboardButton(
                text=f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ID {task['id']}", 
                callback_data=f"edit_task_{task['id']}"
            ),
            types.InlineKeyboardButton(
                text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ID {task['id']}", 
                callback_data=f"delete_task_{task['id']}"
            )
        ])
    
    keyboard_buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_tasks")])
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    if callback.message:
        await safe_edit_message(callback, text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("delete_task_"))
async def confirm_delete_task(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    if not callback.from_user:
        return
    
    cfg = get_config()
    if callback.from_user.id not in cfg.ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    if not callback.data or len(callback.data.split("_")) < 3:
        return
    try:
        task_id_str = callback.data.split("_")[2]
        task_id = int(task_id_str) if task_id_str else 0
    except (ValueError, IndexError):
        return
    db = get_db()
    task = db.get_task(task_id)
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    text = (
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ</b>\n\n"
        f"üÜî ID: {task_id}\n"
        f"üéØ –ù–∞–∑–≤–∞–Ω–∏–µ: {task['title']}\n"
        f"üè¢ –ü–∞—Ä—Ç–Ω–µ—Ä: {task['partner_name']}\n"
        f"üë§ –í—ã–ø–æ–ª–Ω–∏–ª–∏: {task['current_completions']} —á–µ–ª–æ–≤–µ–∫\n\n"
        f"‚ùó <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n"
        f"–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è."
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{task_id}"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_delete_tasks")
        ]
    ])
    
    if callback.message:
        await safe_edit_message(callback, text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("confirm_delete_"))
async def execute_delete_task(callback: CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    if not callback.from_user:
        return
    
    cfg = get_config()
    if callback.from_user.id not in cfg.ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    if not callback.data or len(callback.data.split("_")) < 3:
        return
    try:
        task_id_str = callback.data.split("_")[2]
        task_id = int(task_id_str) if task_id_str else 0
    except (ValueError, IndexError):
        return
    db = get_db()
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    success = db.delete_task(task_id)
    
    if success:
        text = (
            f"‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!</b>\n\n"
            f"üÜî ID {task_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n"
            f"üìã –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n\n"
            f"üí° –ó–∞–¥–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        )
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –µ—â–µ", callback_data="admin_delete_tasks")],
            [types.InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_tasks")]
        ])
    else:
        text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_delete_tasks")]
        ])
    
    if callback.message:
        await safe_edit_message(callback, text, reply_markup=keyboard)

@router.callback_query(F.data == "admin_list_tasks")
async def admin_list_tasks(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not callback.from_user:
        return
    
    cfg = get_config()
    if callback.from_user.id not in cfg.ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    db = get_db()
    tasks = db.get_all_tasks()  # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
    
    if not tasks:
        text = "üìã <b>–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</b>\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_tasks")]
        ])
    else:
        text = f"üìã <b>–í—Å–µ –∑–∞–¥–∞–Ω–∏—è ({len(tasks)}):</b>\n\n"
        keyboard_buttons = []
        
        active_count = 0
        for task in tasks:
            status_emoji = "‚úÖ" if task['status'] == 'active' else "‚ùå"
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞–Ω–∏—è
            if task['task_type'] == 'channel_subscription':
                type_emoji = "üì¢"
            elif task['task_type'] == 'channel_activity':
                type_emoji = "üí¨"
            else:
                type_emoji = "üë•"
            
            if task['status'] == 'active':
                active_count += 1
            
            text += (
                f"{status_emoji} <b>ID {task['id']}</b> {type_emoji} {task['title']}\n"
                f"   üè¢ {task['partner_name']}\n"
                f"   üë§ –í—ã–ø–æ–ª–Ω–∏–ª–∏: {task['current_completions']}\n"
                f"   üéÅ {task['reward_capsules']} –∫–∞–ø—Å—É–ª\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            keyboard_buttons.append([
                types.InlineKeyboardButton(
                    text=f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ID {task['id']}", 
                    callback_data=f"edit_task_{task['id']}"
                )
            ])
        
        text += f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}, –í—Å–µ–≥–æ: {len(tasks)}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard_buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_tasks")])
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    if callback.message:
        await safe_edit_message(callback, text, reply_markup=keyboard)