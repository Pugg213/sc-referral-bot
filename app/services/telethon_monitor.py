"""
–ú–æ–Ω–∏—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è Telethon —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å SESSION_STRING
"""
import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Any
from .comment_checker import comment_checker

class TelethonMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.last_health_check = None
        self.health_check_interval = 3600  # 1 —á–∞—Å
        self.consecutive_failures = 0
        self.max_failures_before_disable = 5
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Telethon —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        now = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (self.last_health_check and 
            (now - self.last_health_check).total_seconds() < self.health_check_interval):
            return {"status": "skipped", "reason": "too_frequent"}
        
        self.last_health_check = now
        
        try:
            if not comment_checker.client:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                init_result = await comment_checker.init_client()
                if init_result:
                    self.consecutive_failures = 0
                    logging.info("‚úÖ Telethon health check: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    return {"status": "recovered", "client_connected": True}
                else:
                    self.consecutive_failures += 1
                    logging.warning(f"‚ö†Ô∏è Telethon health check: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å (–ø–æ–ø—ã—Ç–∫–∞ {self.consecutive_failures})")
                    
                    # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–∏—Ö –Ω–µ—É–¥–∞—á
                    if self.consecutive_failures >= self.max_failures_before_disable:
                        comment_checker.is_permanently_disabled = True
                        logging.error("üö® Telethon health check: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á, –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
                    
                    return {"status": "failed", "consecutive_failures": self.consecutive_failures}
            else:
                # –ö–ª–∏–µ–Ω—Ç –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if comment_checker.client.is_connected():
                    try:
                        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                        is_authorized = await comment_checker.client.is_user_authorized()
                        if is_authorized:
                            self.consecutive_failures = 0
                            return {"status": "healthy", "client_connected": True, "authorized": True}
                        else:
                            self.consecutive_failures += 1
                            logging.warning("‚ö†Ô∏è Telethon health check: –ø–æ—Ç–µ—Ä—è–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                            return {"status": "unauthorized", "client_connected": True, "authorized": False}
                    except Exception as e:
                        self.consecutive_failures += 1
                        logging.warning(f"‚ö†Ô∏è Telethon health check: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                        return {"status": "auth_error", "error": str(e)}
                else:
                    self.consecutive_failures += 1
                    logging.warning("‚ö†Ô∏è Telethon health check: –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                    return {"status": "disconnected", "client_connected": False}
                        
        except Exception as e:
            self.consecutive_failures += 1
            logging.error(f"‚ùå Telethon health check: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return {"status": "error", "error": str(e)}
    
    def get_status_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        return {
            "consecutive_failures": self.consecutive_failures,
            "is_permanently_disabled": comment_checker.is_permanently_disabled,
            "has_client": comment_checker.client is not None,
            "last_health_check": self.last_health_check.isoformat() if self.last_health_check else None,
            "next_check_in_seconds": (
                self.health_check_interval - 
                (datetime.now() - self.last_health_check).total_seconds()
                if self.last_health_check else 0
            )
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
telethon_monitor = TelethonMonitor()