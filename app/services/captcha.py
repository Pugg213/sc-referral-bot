"""
–°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ø—á
"""
import random
import time
from datetime import datetime
from typing import Tuple, Optional

from app.context import get_db
from app.keyboards import get_captcha_keyboard

class CaptchaService:
    def __init__(self):
        self.operations = ['+', '-', '*']
    
    async def generate_captcha(self, user_id: int) -> Tuple[int, str, any]:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–∞–ø—á—É"""
        db = get_db()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É
        num1 = random.randint(1, 20)
        num2 = random.randint(1, 20)
        operation = random.choice(self.operations)
        
        if operation == '+':
            correct_answer = num1 + num2
        elif operation == '-':
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
            if num1 < num2:
                num1, num2 = num2, num1
            correct_answer = num1 - num2
        else:  # multiplication
            # –î–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–∏–µ —á–∏—Å–ª–∞
            num1 = random.randint(1, 10)
            num2 = random.randint(1, 10)
            correct_answer = num1 * num2
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –∫–∞–ø—á–∏
        session_id = db.save_captcha_session(user_id, str(correct_answer))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        options = self.generate_answer_options(correct_answer)
        
        # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_captcha_keyboard(session_id, options)
        
        captcha_text = f"üßÆ <b>–†–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä:</b>\n\n<code>{num1} {operation} {num2} = ?</code>"
        
        return session_id, captcha_text, keyboard
    
    def generate_answer_options(self, correct_answer: int) -> list:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞–ø—á–∏"""
        options = [correct_answer]
        
        # –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        while len(options) < 6:
            # –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä—è–¥–æ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
            wrong_answer = correct_answer + random.randint(-5, 5)
            
            # –ò–∑–±–µ–≥–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            if wrong_answer > 0 and wrong_answer not in options:
                options.append(wrong_answer)
        
        # –ü–µ—Ä–µ–º–µ—à–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã
        random.shuffle(options)
        return options
    
    async def check_captcha(self, session_id: int, user_answer: int) -> Tuple[bool, float]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–ø—á—É"""
        db = get_db()
        
        session = db.get_captcha_session(session_id)
        if not session:
            return False, 0.0
        
        if session['solved']:
            return False, 0.0  # –ö–∞–ø—á–∞ —É–∂–µ —Ä–µ—à–µ–Ω–∞
        
        # –í—ã—á–∏—Å–ª–∏—Ç—å –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è
        start_time = datetime.fromisoformat(session['start_time'])
        solve_time = (datetime.now() - start_time).total_seconds()
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        correct_answer = int(session['captcha_value'])
        is_correct = user_answer == correct_answer
        
        if is_correct:
            # –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–ø—á—É –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—É—é
            db.complete_captcha(session_id, solve_time)
        
        return is_correct, solve_time
    
    def calculate_captcha_score(self, solve_time: float, risk_thresholds) -> float:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —Å–∫–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏"""
        min_time = risk_thresholds.captcha_time_min
        max_time = risk_thresholds.captcha_time_max
        
        if solve_time < min_time:
            # –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ –±–æ—Ç)
            return 0.1
        elif solve_time > max_time:
            # –°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ - —Ç–æ–∂–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
            return 0.3
        else:
            # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è - –≤—ã—Å–æ–∫–∏–π —Å–∫–æ—Ä
            # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–ª–æ 10-30 —Å–µ–∫—É–Ω–¥
            optimal_time = 20.0
            time_diff = abs(solve_time - optimal_time)
            score = max(0.5, 1.0 - (time_diff / optimal_time))
            return min(1.0, score)
