"""
–°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ Telegram –∫–∞–Ω–∞–ª–∞—Ö —á–µ—Ä–µ–∑ Telethon
"""
import logging
import os
import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional, cast
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import ChannelPrivateError, FloodWaitError, UserNotParticipantError, AuthKeyDuplicatedError
from telethon.types import Channel

class CommentChecker:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–Ω–∞–ª–∞—Ö"""
    
    def __init__(self):
        self.client = None
        self.last_init_attempt = None
        self.init_retry_delay = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.is_permanently_disabled = False
        
        api_id_str = os.getenv('TG_API_ID')
        self.api_id = int(api_id_str) if api_id_str else None
        self.api_hash = os.getenv('TG_API_HASH')
        self.session_string = os.getenv('SESSION_STRING')  # –°—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤
    
    async def init_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞ —Å StringSession —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —á–∞—Å—Ç—ã—Ö –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≤—Å–µ–≥–¥–∞
        if self.is_permanently_disabled:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        now = datetime.now()
        if self.last_init_attempt and (now - self.last_init_attempt).total_seconds() < self.init_retry_delay:
            return False
            
        self.last_init_attempt = now
        
        if not self.api_id or not self.api_hash:
            logging.warning("TG_API_ID –∏–ª–∏ TG_API_HASH –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            self.is_permanently_disabled = True
            return False
        
        if not self.session_string:
            logging.warning("SESSION_STRING –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            logging.info("üí° –î–æ–±–∞–≤—å—Ç–µ SESSION_STRING –≤ —Å–µ–∫—Ä–µ—Ç—ã Replit –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            self.is_permanently_disabled = True
            return False
        
        try:
            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if self.client and self.client.is_connected():
                try:
                    is_auth = await self.client.is_user_authorized()
                    if is_auth:
                        logging.debug("üîß Telethon –∫–ª–∏–µ–Ω—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                        return True
                except:
                    # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
                    await self.close()
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –°–¢–ê–ë–ò–õ–¨–ù–´–ú–ò –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü–∏–∏
            self.client = TelegramClient(
                StringSession(self.session_string), 
                self.api_id, 
                self.api_hash,
                # –ö–†–ò–¢–ò–ß–ù–û: –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—é—Ç –∫–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü–∏—é
                device_model="Replit Server",
                system_version="Linux",
                app_version="1.0",
                lang_code="ru",
                system_lang_code="ru",
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                connection_retries=3,
                retry_delay=5,
                # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å IP
                use_ipv6=False
            )
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                await asyncio.wait_for(self.client.connect(), timeout=30)
            except asyncio.TimeoutError:
                logging.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram")
                await self.close()
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é  
            if not await self.client.is_user_authorized():
                logging.warning("üîß –°—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                logging.info("üí° –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é SESSION_STRING —Å –ø–æ–º–æ—â—å—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞")
                if self.client:
                    await self.client.disconnect()
                self.client = None
                return False
            
            # –ö–†–ò–¢–ò–ß–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            self.is_permanently_disabled = False
            logging.info("‚úÖ Telethon –∫–ª–∏–µ–Ω—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω (–∑–∞—â–∏—â–µ–Ω –æ—Ç –∫–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü–∏–∏)")
            logging.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ - —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
            return True
        except Exception as e:
            error_msg = str(e).lower()
            if "authorization key" in error_msg and "ip addresses" in error_msg:
                logging.error("üîë SESSION_STRING —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω - —Å–µ—Å—Å–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å —Å —Ä–∞–∑–Ω—ã—Ö IP –∞–¥—Ä–µ—Å–æ–≤")
                logging.error("üí° –†–ï–®–ï–ù–ò–ï: –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π SESSION_STRING —á–µ—Ä–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–π Telegram")
                logging.error("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SESSION_STRING")
                self.is_permanently_disabled = True
            elif "authkeyduplicated" in error_msg:
                logging.error("üîë SESSION_STRING –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")
                logging.error("üí° –†–ï–®–ï–ù–ò–ï: –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ SESSION_STRING –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ")
                # –ù–µ –æ—Ç–∫–ª—é—á–∞–µ–º –Ω–∞–≤—Å–µ–≥–¥–∞ - –º–æ–∂–µ—Ç —Ä–µ—à–∏—Ç—å—Å—è —Å–∞–º–æ
            else:
                logging.error(f"‚ùå Failed to initialize Telethon client: {e}")
                # –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - –Ω–µ –æ—Ç–∫–ª—é—á–∞–µ–º –Ω–∞–≤—Å–µ–≥–¥–∞
            
            self.client = None
            return False
    
    async def check_user_comments_in_channel(self, user_id: int, channel_username: str, 
                                           min_comments: int, period_days: int, 
                                           start_date: datetime, min_posts: int = 1) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            channel_username: Username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @simplecoin_news)
            min_comments: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            period_days: –ü–µ—Ä–∏–æ–¥ –≤ –¥–Ω—è—Ö
            start_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–Ω–∏—è
            min_posts: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: success, found_comments, found_posts, meets_requirement, error
        """
        if not self.client:
            # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –Ω–∞–≤—Å–µ–≥–¥–∞
            if not self.is_permanently_disabled:
                init_success = await self.init_client()
                if not init_success or not self.client:
                    return {
                        "success": False,
                        "error": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        "found_comments": 0,
                        "meets_requirement": False
                    }
            else:
                return {
                    "success": False,
                    "error": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –û–±–Ω–æ–≤–∏—Ç–µ SESSION_STRING –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                    "found_comments": 0,
                    "meets_requirement": False
                }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        try:
            if not self.client.is_connected():
                await self.client.connect()
            
            if not await self.client.is_user_authorized():
                return {
                    "success": False,
                    "error": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
                    "found_comments": 0,
                    "meets_requirement": False
                }
        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Telethon: {str(e)[:100]}",
                "found_comments": 0,
                "meets_requirement": False
            }
        
        logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ user {user_id} –≤ {channel_username} —Å {start_date} (–Ω—É–∂–Ω–æ {min_comments} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∞ {min_posts} –ø–æ—Å—Ç–∞—Ö)")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
            channel = await self.client.get_entity(channel_username)
            if not channel:
                return {
                    "success": False,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ",
                    "found_comments": 0,
                    "meets_requirement": False
                }
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
            end_date = start_date + timedelta(days=period_days)
            now = datetime.now()
            search_end = min(end_date, now)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï TIMEZONE: –î–µ–ª–∞–µ–º –¥–∞—Ç—ã timezone-naive –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if hasattr(start_date, 'replace') and start_date.tzinfo:
                start_date = start_date.replace(tzinfo=None)
            if hasattr(search_end, 'replace') and search_end.tzinfo:
                search_end = search_end.replace(tzinfo=None)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            comments_count = 0
            posts_with_comments = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            
            logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ user {user_id} –≤ {channel_username} —Å {start_date} –ø–æ {search_end}")
            logging.info(f"üè∑Ô∏è –¢–∏–ø –∫–∞–Ω–∞–ª–∞: {type(channel).__name__}, ID: {channel.id}, Title: {getattr(channel, 'title', 'Unknown')}")
            
            posts_checked = 0  # –°—á–µ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            
            # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –≤ –∫–∞–Ω–∞–ª–µ
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –ø–æ—Å—Ç—ã –≤ —Ä–∞–∑—É–º–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ, –Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –¥–∞—Ç–∞–º
            async for message in self.client.iter_messages(
                entity=cast(Channel, channel), 
                limit=1000  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            ):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï TIMEZONE: –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è –∫ timezone-naive
                message_date = message.date.replace(tzinfo=None) if message.date.tzinfo else message.date
                if message_date > search_end:
                    continue
                
                # –í–ê–ñ–ù–û: –ù–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ start_date –¥–ª—è –ø–æ—Å—Ç–æ–≤,
                # —Ç.–∫. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ —á–µ–º –ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω
                
                posts_checked += 1
                logging.debug(f"üìç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—Å—Ç {message.id} –æ—Ç {message.date}, replies={getattr(message, 'replies', 'None')}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É
                post_comments_count = 0
                comments_found_in_post = 0  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –ø–æ—Å—Ç–µ
                
                try:
                    async for comment in self.client.iter_messages(
                        entity=cast(Channel, channel),
                        reply_to=message.id,
                        limit=100
                    ):
                        comments_found_in_post += 1
                        logging.debug(f"üîç –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment.id} –æ—Ç user {comment.sender_id} –∫ –ø–æ—Å—Ç—É {message.id}")
                        
                        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –∞ –Ω–µ –ø–æ—Å—Ç–∞!
                        # –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞—Ç—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ timezone-naive –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        comment_date = comment.date.replace(tzinfo=None) if comment.date.tzinfo else comment.date
                        if comment.sender_id == user_id and start_date <= comment_date <= search_end:
                            comments_count += 1
                            post_comments_count += 1
                            logging.info(f"‚úÖ –ù–ê–ô–î–ï–ù –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç user {user_id} –∫ –ø–æ—Å—Ç—É {message.id} –æ—Ç {comment.date} –≤ {channel_username}!")
                    
                    logging.debug(f"üìä –ü–æ—Å—Ç {message.id}: –≤—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ {comments_found_in_post}, –æ—Ç –Ω–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {post_comments_count}")
                    
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç
                    if post_comments_count > 0:
                        posts_with_comments += 1
                        logging.info(f"üìù User {user_id} –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –ø–æ—Å—Ç {message.id} ({post_comments_count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)")
                    
                    # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –æ–±–æ–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π - –º–æ–∂–Ω–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∏—Å–∫ 
                    if comments_count >= min_comments and posts_with_comments >= min_posts:
                        break
                        
                except Exception as e:
                    logging.info(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É {message.id}: {e}")
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —É—Å–ª–æ–≤–∏—è: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ò –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
            meets_comments_requirement = comments_count >= min_comments
            meets_posts_requirement = posts_with_comments >= min_posts
            meets_requirement = meets_comments_requirement and meets_posts_requirement
            
            logging.info(f"üìä –ò–¢–û–ì–ò –¥–ª—è user {user_id} –≤ {channel_username}:")
            logging.info(f"   üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {posts_checked}")  
            logging.info(f"   üí¨ –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comments_count} (–Ω—É–∂–Ω–æ {min_comments})")
            logging.info(f"   üìù –ü–æ—Å—Ç–æ–≤ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏: {posts_with_comments} (–Ω—É–∂–Ω–æ {min_posts})")
            logging.info(f"   ‚úÖ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: {meets_requirement}")
            
            return {
                "success": True,
                "found_comments": comments_count,
                "found_posts": posts_with_comments,
                "meets_requirement": meets_requirement,
                "error": None
            }
            
        except ChannelPrivateError:
            return {
                "success": False,
                "error": "–ö–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                "found_comments": 0,
                "found_posts": 0,
                "meets_requirement": False
            }
        except UserNotParticipantError:
            return {
                "success": False,
                "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞",
                "found_comments": 0,
                "found_posts": 0,
                "meets_requirement": False
            }
        except FloodWaitError as e:
            return {
                "success": False,
                "error": f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫—É–Ω–¥",
                "found_comments": 0,
                "found_posts": 0,
                "meets_requirement": False
            }
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
            return {
                "success": False,
                "error": f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
                "found_comments": 0,
                "found_posts": 0,
                "meets_requirement": False
            }
    
    async def close(self):
        """–ü–†–ê–í–ò–õ–¨–ù–û –∑–∞–∫—Ä—ã—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏"""
        if self.client:
            try:
                if hasattr(self.client, 'disconnect') and callable(self.client.disconnect):
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    await self.client.disconnect()
                    logging.info("‚úÖ Telethon –∫–ª–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω (—Å–µ—Å—Å–∏—è –∑–∞—â–∏—â–µ–Ω–∞)")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Telethon: {e}")
            finally:
                self.client = None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
comment_checker = CommentChecker()

async def init_comment_checker():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"""
    return await comment_checker.init_client()