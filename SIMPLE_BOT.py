#!/usr/bin/env python3
"""
üöÄ –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø SC REFERRAL BOT
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ –ª—é–±–æ–º —Å–µ—Ä–≤–µ—Ä–µ
"""

import asyncio
import logging
import os
import sqlite3
from datetime import datetime
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiohttp import web

# –ó–∞–≥—Ä—É–∑–∏—Ç—å .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://yourdomain.com/webhook")
HOST = os.getenv("HOST", "0.0.0.0")
PORT = int(os.getenv("PORT", 5000))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ä–æ—É—Ç–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    """–°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            referrer_id INTEGER,
            registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            balance REAL DEFAULT 0,
            total_referrals INTEGER DEFAULT 0
        )
    """)
    
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT,
            description TEXT,
            reward REAL,
            channel_username TEXT,
            min_comments INTEGER DEFAULT 2,
            min_posts INTEGER DEFAULT 2
        )
    """)
    
    # –î–æ–±–∞–≤–∏—Ç—å –±–∞–∑–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    cursor.execute("""
        INSERT OR IGNORE INTO tasks (id, title, description, reward, channel_username, min_comments, min_posts)
        VALUES (1, "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ The TON", "–û—Å—Ç–∞–≤—å—Ç–µ 2 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ 2 —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏", 50.0, "@The_TON_io", 2, 2)
    """)
    
    conn.commit()
    conn.close()

def get_user(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

def create_user(user_id: int, username: str, first_name: str, referrer_id: int = None):
    """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("""
        INSERT OR REPLACE INTO users (user_id, username, first_name, referrer_id)
        VALUES (?, ?, ?, ?)
    """, (user_id, username, first_name, referrer_id))
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(Command("start"))
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""
    
    # –ò–∑–≤–ª–µ—á—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    referrer_id = None
    if message.text and len(message.text.split()) > 1:
        try:
            referrer_id = int(message.text.split()[1])
        except ValueError:
            pass
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not get_user(user_id):
        create_user(user_id, username, first_name, referrer_id)
        if referrer_id:
            await message.answer(f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!")
        else:
            await message.answer(f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SC Referral Bot!")
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton(text="üìã –ó–∞–¥–∞–Ω–∏—è", callback_data="tasks")],
        [InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")],
        [InlineKeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="ref_link")]
    ])
    
    await message.answer(
        "ü§ñ <b>SC Referral Bot</b>\\n\\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "balance")
async def balance_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å"""
    user = get_user(callback.from_user.id)
    if user:
        balance = user[5] if len(user) > 5 else 0  # balance column
        await callback.message.edit_text(
            f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>\\n\\n"
            f"üíé SC —Ç–æ–∫–µ–Ω–æ–≤: {balance:.2f}\\n\\n"
            f"üí° –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π!",
            parse_mode="HTML"
        )

@router.callback_query(F.data == "tasks")
async def tasks_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è"""
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM tasks")
    tasks = cursor.fetchall()
    conn.close()
    
    if tasks:
        task = tasks[0]  # –ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"check_task_{task[0]}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
        
        await callback.message.edit_text(
            f"üìã <b>{task[1]}</b>\\n\\n"
            f"{task[2]}\\n\\n"
            f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {task[3]} SC",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text("üìã –ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")

@router.callback_query(F.data.startswith("check_task_"))
async def check_task_handler(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤—Å–µ–≥–¥–∞ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º
    user_id = callback.from_user.id
    
    # –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET balance = balance + 50 WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()
    
    await callback.message.edit_text(
        "üéâ <b>–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!</b>\\n\\n"
        "üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 50 SC —Ç–æ–∫–µ–Ω–æ–≤!\\n\\n"
        "‚ú® –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π!",
        parse_mode="HTML"
    )

@router.callback_query(F.data == "referrals")
async def referrals_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ã"""
    user_id = callback.from_user.id
    
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM users WHERE referrer_id = ?", (user_id,))
    ref_count = cursor.fetchone()[0]
    conn.close()
    
    await callback.message.edit_text(
        f"üë• <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b>\\n\\n"
        f"üë§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {ref_count}\\n"
        f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {ref_count * 10} SC\\n\\n"
        f"üí° –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 10 SC!",
        parse_mode="HTML"
    )

@router.callback_query(F.data == "ref_link")
async def ref_link_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"""
    user_id = callback.from_user.id
    bot_username = (await bot.get_me()).username
    ref_link = f"https://t.me/{bot_username}?start={user_id}"
    
    await callback.message.edit_text(
        f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>\\n\\n"
        f"<code>{ref_link}</code>\\n\\n"
        f"üì§ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 10 SC –∑–∞ –∫–∞–∂–¥–æ–≥–æ!",
        parse_mode="HTML"
    )

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu_handler(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton(text="üìã –ó–∞–¥–∞–Ω–∏—è", callback_data="tasks")],
        [InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")],
        [InlineKeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="ref_link")]
    ])
    
    await callback.message.edit_text(
        "ü§ñ <b>SC Referral Bot</b>\\n\\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# Webhook handlers
async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
    update = await request.json()
    await dp.feed_update(bot, update)
    return web.Response(status=200)

async def health_handler(request):
    """Health check endpoint"""
    return web.json_response({"status": "healthy", "bot": "SC Referral Bot"})

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ SC Referral Bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
    dp.include_router(router)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = web.Application()
    app.router.add_post("/webhook", webhook_handler)
    app.router.add_get("/health", health_handler)
    app.router.add_get("/", health_handler)
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {HOST}:{PORT}")
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, HOST, PORT)
    await site.start()
    
    # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
    try:
        while True:
            await asyncio.sleep(3600)  # –°–ø–∞—Ç—å —á–∞—Å
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    finally:
        await runner.cleanup()

if __name__ == "__main__":
    asyncio.run(main())