#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
"""
import asyncio
import logging
from datetime import datetime, timedelta
from app.config import Settings
from app.db import Database
from app.context import set_context
from app.services.captcha import CaptchaService
from app.services.capsules import CapsuleService

logging.basicConfig(level=logging.INFO)

async def test_referral_system():
    """–¢–µ—Å—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        from temp_config import get_working_settings
        cfg = get_working_settings()
    except ImportError:
        cfg = Settings.from_env()
    
    db = Database(cfg.DB_PATH)
    db.init()
    set_context(cfg=cfg, db=db)
    
    with db.get_connection() as conn:
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT user_id, username, referrer_id, total_referrals FROM users")
        users = cursor.fetchall()
        
        print(f"  üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        for user in users:
            referrer_text = f"—Ä–µ—Ñ–µ—Ä–µ—Ä: {user[2]}" if user[2] else "–±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞"
            print(f"    ‚Ä¢ ID {user[0]} (@{user[1] or '–±–µ–∑ username'}) - {referrer_text}, —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user[3]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        cursor.execute("SELECT COUNT(*) FROM referral_validations")
        validations = cursor.fetchone()[0]
        print(f"  ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {validations}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
        cursor.execute("SELECT COUNT(*) FROM users WHERE subscription_checked = TRUE")
        subscribed = cursor.fetchone()[0]
        print(f"  üì∫ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {subscribed}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT SUM(total_earnings), SUM(pending_balance) FROM users")
        earnings_data = cursor.fetchone()
        total_earnings = earnings_data[0] or 0
        pending_balance = earnings_data[1] or 0
        print(f"  üí∞ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {total_earnings} SC")
        print(f"  üí≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending_balance} SC")

async def test_admin_panel():
    """–¢–µ—Å—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    print("\nüëë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏...")
    
    try:
        from temp_config import get_working_settings
        cfg = get_working_settings()
    except ImportError:
        cfg = Settings.from_env()
    
    db = Database(cfg.DB_PATH)
    set_context(cfg=cfg, db=db)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    print(f"  üë• –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤: {len(cfg.ADMIN_IDS)}")
    for admin_id in cfg.ADMIN_IDS:
        print(f"    ‚Ä¢ Admin ID: {admin_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∫–∏
    with db.get_connection() as conn:
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞–Ω–∏—è
        cursor.execute("SELECT id, title, reward_capsules, channel_id FROM tasks")
        tasks = cursor.fetchall()
        print(f"  üìã –ó–∞–¥–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: {len(tasks)}")
        for task in tasks:
            print(f"    ‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ {task[0]}: '{task[1]}' (–Ω–∞–≥—Ä–∞–¥–∞: {task[2]} –∫–∞–ø—Å—É–ª, –∫–∞–Ω–∞–ª: {task[3]})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
        cursor.execute("SELECT task_id, COUNT(*) FROM user_task_completions GROUP BY task_id")
        completions = cursor.fetchall()
        print(f"  ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ –∑–∞–¥–∞–Ω–∏—è–º:")
        for completion in completions:
            print(f"    ‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ {completion[0]}: {completion[1]} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π")

async def test_capsule_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø—Å—É–ª"""
    print("\nüéÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø—Å—É–ª...")
    
    try:
        from temp_config import get_working_settings
        cfg = get_working_settings()
    except ImportError:
        cfg = Settings.from_env()
    
    # –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–ø—Å—É–ª
    capsule_service = CapsuleService()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞–≥—Ä–∞–¥
    errors = capsule_service.validate_rewards_config(cfg.CAPSULE_REWARDS)
    if errors:
        print("  ‚ùå –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥:")
        for error in errors:
            print(f"    ‚Ä¢ {error}")
    else:
        print("  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–≥—Ä–∞–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = capsule_service.get_reward_statistics(cfg.CAPSULE_REWARDS)
    print(f"  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–≥—Ä–∞–¥:")
    print(f"    ‚Ä¢ –í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–¥: {stats['total_rewards']}")
    print(f"    ‚Ä¢ –û–∂–∏–¥–∞–µ–º–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: {stats['expected_value']:.2f} SC")
    print(f"    ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {stats['min_reward']} SC")
    print(f"    ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {stats['max_reward']} SC")
    print(f"    ‚Ä¢ –°–∞–º–∞—è –≤–µ—Ä–æ—è—Ç–Ω–∞—è: {stats['most_likely'].name} ({stats['most_likely'].probability*100:.1f}%)")
    
    # –¢–µ—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–ø—Å—É–ª—ã
    print("  üé≤ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–ø—Å—É–ª—ã:")
    for i in range(5):
        reward = capsule_service.open_capsule(cfg.CAPSULE_REWARDS)
        if reward:
            print(f"    ‚Ä¢ –ü–æ–ø—ã—Ç–∫–∞ {i+1}: {reward.name} - {reward.amount} SC")

async def test_captcha_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø—á–∏"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø—á–∏...")
    
    try:
        from temp_config import get_working_settings
        cfg = get_working_settings()
    except ImportError:
        cfg = Settings.from_env()
    
    db = Database(cfg.DB_PATH)
    set_context(cfg=cfg, db=db)
    
    captcha_service = CaptchaService()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞–ø—á—É
    test_user_id = 12345
    captcha_id, question, correct_answer = await captcha_service.generate_captcha(test_user_id)
    
    print(f"  üßÆ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞–ø—á–∞:")
    print(f"    ‚Ä¢ ID: {captcha_id}")
    print(f"    ‚Ä¢ –í–æ–ø—Ä–æ—Å: {question}")
    print(f"    ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—à–µ–Ω–∏–µ
    is_valid = await captcha_service.validate_solution(captcha_id, str(correct_answer), 5.0)
    print(f"    ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {'‚úÖ –£—Å–ø–µ—Ö' if is_valid else '‚ùå –û—à–∏–±–∫–∞'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    is_invalid = await captcha_service.validate_solution(captcha_id, "999", 5.0)
    print(f"    ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {'‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø—Ä–æ—à–µ–ª' if is_invalid else '‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω'}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞\n")
    
    await test_referral_system()
    await test_admin_panel()
    await test_capsule_system()
    await test_captcha_system()
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüìã –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç:")
    print("‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–∞–ø—Å—É–ª –∞–∫—Ç–∏–≤–Ω–∞")
    print("‚úÖ CAPTCHA —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ")

if __name__ == "__main__":
    asyncio.run(main())