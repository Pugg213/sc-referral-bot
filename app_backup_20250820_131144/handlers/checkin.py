"""
–°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —á–µ–∫-–∏–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SC —Ç–æ–∫–µ–Ω–æ–≤
"""

from datetime import datetime, date
from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging

from app.context import get_db, get_config

router = Router()

@router.callback_query(F.data == "daily_checkin")
async def daily_checkin_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —á–µ–∫-–∏–Ω–∞"""
    if not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã", show_alert=True)
        return
    
    user_id = callback.from_user.id
    db = get_db()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = date.today().isoformat()
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–ª–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–µ–∫-–∏–Ω —Å–µ–≥–æ–¥–Ω—è
            cursor.execute("""
                SELECT id FROM user_checkins 
                WHERE user_id = ? AND checkin_date = ?
            """, (user_id, today))
            
            existing_checkin = cursor.fetchone()
            
            if existing_checkin:
                await callback.answer("‚ùå –í—ã —É–∂–µ –¥–µ–ª–∞–ª–∏ —á–µ–∫-–∏–Ω —Å–µ–≥–æ–¥–Ω—è!", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –ø–æ–¥–ø–∏—Å–∞–Ω
            cursor.execute("""
                SELECT subscription_checked, total_earnings 
                FROM users WHERE user_id = ?
            """, (user_id,))
            user_data = cursor.fetchone()
            
            if not user_data:
                await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ", show_alert=True)
                return
            
            if not user_data[0]:
                await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª", show_alert=True)
                return
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —á–µ–∫-–∏–Ω
            checkin_reward = 0.5
            cursor.execute("""
                INSERT INTO user_checkins (user_id, checkin_date, sc_amount)
                VALUES (?, ?, ?)
            """, (user_id, today, checkin_reward))
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            cursor.execute("""
                UPDATE users 
                SET total_earnings = total_earnings + ?,
                    pending_balance = pending_balance + ?
                WHERE user_id = ?
            """, (checkin_reward, checkin_reward, user_id))
            
            conn.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ–∫-–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                SELECT COUNT(*) FROM user_checkins WHERE user_id = ?
            """, (user_id,))
            total_checkins = cursor.fetchone()[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            cursor.execute("""
                SELECT pending_balance FROM users WHERE user_id = ?
            """, (user_id,))
            new_balance = cursor.fetchone()[0]
            
            success_text = (
                f"‚úÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                f"üéÅ –ü–æ–ª—É—á–µ–Ω–æ: {checkin_reward} SC\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance:.2f} SC\n"
                f"üìÖ –í—Å–µ–≥–æ —á–µ–∫-–∏–Ω–æ–≤: {total_checkins}\n\n"
                f"üí° –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥–æ–π!"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            if callback.message and hasattr(callback.message, 'edit_text'):
                await callback.message.edit_text(success_text, reply_markup=keyboard, parse_mode="HTML")
            await callback.answer("üéâ –ß–µ–∫-–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!")
            
    except Exception as e:
        logging.error(f"Daily checkin error for user {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ–∫-–∏–Ω–∞", show_alert=True)

@router.callback_query(F.data == "checkin_stats")
async def checkin_stats_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ–∫-–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã", show_alert=True)
        return
    
    user_id = callback.from_user.id
    db = get_db()
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                SELECT COUNT(*), SUM(sc_amount), MAX(checkin_date)
                FROM user_checkins WHERE user_id = ?
            """, (user_id,))
            stats = cursor.fetchone()
            
            total_checkins = stats[0] if stats[0] else 0
            total_earned = stats[1] if stats[1] else 0
            last_checkin = stats[2] if stats[2] else "–ù–∏–∫–æ–≥–¥–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫-–∏–Ω —Å–µ–≥–æ–¥–Ω—è
            today = date.today().isoformat()
            cursor.execute("""
                SELECT id FROM user_checkins 
                WHERE user_id = ? AND checkin_date = ?
            """, (user_id, today))
            
            today_checkin = cursor.fetchone() is not None
            
            stats_text = (
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ–∫-–∏–Ω–æ–≤</b>\n\n"
                f"üìÖ –í—Å–µ–≥–æ —á–µ–∫-–∏–Ω–æ–≤: {total_checkins}\n"
                f"üéÅ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_earned:.2f} SC\n"
                f"üìÜ –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–µ–∫-–∏–Ω: {last_checkin}\n"
                f"‚úÖ –°–µ–≥–æ–¥–Ω—è: {'–í—ã–ø–æ–ª–Ω–µ–Ω' if today_checkin else '–î–æ—Å—Ç—É–ø–µ–Ω'}\n\n"
                f"üí° –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω –¥–∞–µ—Ç 0.5 SC!"
            )
            
            keyboard_buttons = []
            
            if not today_checkin:
                keyboard_buttons.append([InlineKeyboardButton(text="üéØ –°–¥–µ–ª–∞—Ç—å —á–µ–∫-–∏–Ω", callback_data="daily_checkin")])
            
            keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            if callback.message and hasattr(callback.message, 'edit_text'):
                await callback.message.edit_text(stats_text, reply_markup=keyboard, parse_mode="HTML")
            await callback.answer()
            
    except Exception as e:
        logging.error(f"Checkin stats error for user {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)