"""
–§–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –ë–ï–ó LSP –æ—à–∏–±–æ–∫ –¥–ª—è –ü–†–û–î–ê–ö–®–ù–ê
"""
import logging
from aiogram import Router, types, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ChatType

from app.context import get_config, get_db
from app.keyboards import get_main_keyboard
from datetime import date
from app.utils.helpers import format_balance

router = Router()

# TEXT MESSAGE HANDLERS - –¥–ª—è Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@router.message(F.text == "üìã –ü—Ä–∞–≤–∏–ª–∞", F.chat.type == ChatType.PRIVATE)
async def rules_text_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ '–ü—Ä–∞–≤–∏–ª–∞' """
    try:
        rules_text = """üìã <b>–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞</b>

üî∏ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:</b>
‚Ä¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –≤–æ–π–¥–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É
‚Ä¢ –ù–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ñ–µ–π–∫–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ù–µ —Å–ø–∞–º—å—Ç–µ –∏ –Ω–µ –Ω–∞—Ä—É—à–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ Telegram

üéÅ <b>–°–∏—Å—Ç–µ–º–∞ –∫–∞–ø—Å—É–ª:</b>
‚Ä¢ 3 –∫–∞–ø—Å—É–ª—ã –≤ –¥–µ–Ω—å –±–∞–∑–æ–≤–æ
‚Ä¢ +1 –∫–∞–ø—Å—É–ª–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ –∫–∞–ø—Å—É–ª—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π

üí∞ <b>–ù–∞–≥—Ä–∞–¥—ã:</b>
‚Ä¢ 0.5-10 SC —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –∫–∞–ø—Å—É–ª—É
‚Ä¢ –ë–æ–Ω—É—Å—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤

‚ö†Ô∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>
‚Ä¢ –ù–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –∫–∞—Ä–∞–Ω—Ç–∏–Ω 1 —á–∞—Å
‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è
‚Ä¢ –ù–∞—Ä—É—à–∏—Ç–µ–ª–∏ –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã

üîó <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</b>
‚Ä¢ –ö–∞–Ω–∞–ª: https://t.me/just_a_simple_coin
‚Ä¢ –ß–∞—Ç: https://t.me/simplecoin_chatSC"""
        
        await message.answer(rules_text, reply_markup=get_main_keyboard())
    except Exception as e:
        logging.error(f"Rules text error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª")

@router.message(F.text == "üéØ –ó–∞–¥–∞–Ω–∏—è", F.chat.type == ChatType.PRIVATE)
async def tasks_text_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ '–ó–∞–¥–∞–Ω–∏—è' """
    try:
        tasks_text = """üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</b>

üéØ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b>
–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
–ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ—è–≤–ª—è—é—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!

üí° <b>–¢–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π:</b>
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö
‚Ä¢ –†–µ–ø–æ—Å—Ç—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π –≤ –ø—Ä–æ–µ–∫—Ç—ã

üéÅ <b>–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏—è:</b>
‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ –∫–∞–ø—Å—É–ª—ã
‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å —É–¥–∞—á–∏
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ SC —Ç–æ–∫–µ–Ω—ã"""
        
        await message.answer(tasks_text, reply_markup=get_main_keyboard())
    except Exception as e:
        logging.error(f"Tasks text error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π")

# CALLBACK HANDLERS - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –ë–ï–ó LSP –æ—à–∏–±–æ–∫
@router.callback_query(F.data == "main_menu")
async def callback_main_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        text = "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"
        await callback.answer()
        if callback.message:
            await callback.message.answer(text, reply_markup=get_main_keyboard())
    except Exception as e:
        logging.error(f"Main menu error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data == "back_to_menu")
async def callback_back_to_menu(callback: CallbackQuery):
    """–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"""
    try:
        text = "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await callback.answer()
        if callback.message:
            await callback.message.answer(text, reply_markup=get_main_keyboard())
    except Exception as e:
        logging.error(f"Back to menu error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.message(F.text == "üìÖ –ß–µ–∫-–∏–Ω")
async def checkin_button(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —á–µ–∫-–∏–Ω–∞"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    db = get_db()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT subscription_checked, pending_balance 
            FROM users WHERE user_id = ?
        """, (user_id,))
        user_data = cursor.fetchone()
        
        if not user_data:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
            return
        
        if not user_data[0]:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫-–∏–Ω —Å–µ–≥–æ–¥–Ω—è
        today = date.today().isoformat()
        cursor.execute("""
            SELECT id FROM user_checkins 
            WHERE user_id = ? AND checkin_date = ?
        """, (user_id, today))
        
        existing_checkin = cursor.fetchone()
        if existing_checkin:
            await message.answer("‚ùå –í—ã —É–∂–µ –¥–µ–ª–∞–ª–∏ —á–µ–∫-–∏–Ω —Å–µ–≥–æ–¥–Ω—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞.")
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ–∫-–∏–Ω
        checkin_reward = 0.5
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫-–∏–Ω
            cursor.execute("""
                INSERT INTO user_checkins (user_id, checkin_date, sc_amount)
                VALUES (?, ?, ?)
            """, (user_id, today, checkin_reward))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            cursor.execute("""
                UPDATE users 
                SET pending_balance = pending_balance + ?,
                    total_earnings = total_earnings + ?
                WHERE user_id = ?
            """, (checkin_reward, checkin_reward, user_id))
            
            conn.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫-–∏–Ω–æ–≤
            cursor.execute("""
                SELECT COUNT(*) FROM user_checkins WHERE user_id = ?
            """, (user_id,))
            total_checkins = cursor.fetchone()[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            new_balance = user_data[1] + checkin_reward
            
            success_text = (
                f"‚úÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                f"üéÅ –ü–æ–ª—É—á–µ–Ω–æ: {format_balance(checkin_reward)} SC\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {format_balance(new_balance)} SC\n"
                f"üìÖ –í—Å–µ–≥–æ —á–µ–∫-–∏–Ω–æ–≤: {total_checkins}\n\n"
                f"üí° –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥–æ–π!"
            )
            
            await message.answer(success_text)
            
        except Exception as e:
            logging.error(f"Checkin execution error for user {user_id}: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ–∫-–∏–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "daily_checkin")
async def daily_checkin_callback(callback: types.CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —á–µ–∫-–∏–Ω–∞ —á–µ—Ä–µ–∑ callback"""
    if not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã", show_alert=True)
        return
    
    user_id = callback.from_user.id
    db = get_db()
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫-–∏–Ω —Å–µ–≥–æ–¥–Ω—è
            today = date.today().isoformat()
            cursor.execute("""
                SELECT id FROM user_checkins 
                WHERE user_id = ? AND checkin_date = ?
            """, (user_id, today))
            
            existing_checkin = cursor.fetchone()
            if existing_checkin:
                await callback.answer("‚ùå –ß–µ–∫-–∏–Ω —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å–µ–≥–æ–¥–Ω—è!", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                SELECT subscription_checked, pending_balance, total_earnings
                FROM users WHERE user_id = ?
            """, (user_id,))
            user_data = cursor.fetchone()
            
            if not user_data or not user_data[0]:
                await callback.answer("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª", show_alert=True)
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ–∫-–∏–Ω
            checkin_reward = 0.5
            
            # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫-–∏–Ω
            cursor.execute("""
                INSERT INTO user_checkins (user_id, checkin_date, sc_amount)
                VALUES (?, ?, ?)
            """, (user_id, today, checkin_reward))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            cursor.execute("""
                UPDATE users 
                SET pending_balance = pending_balance + ?,
                    total_earnings = total_earnings + ?
                WHERE user_id = ?
            """, (checkin_reward, checkin_reward, user_id))
            
            conn.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫-–∏–Ω–æ–≤
            cursor.execute("""
                SELECT COUNT(*) FROM user_checkins WHERE user_id = ?
            """, (user_id,))
            total_checkins = cursor.fetchone()[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            new_balance = user_data[1] + checkin_reward
            
            success_text = (
                f"‚úÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                f"üéÅ –ü–æ–ª—É—á–µ–Ω–æ: {format_balance(checkin_reward)} SC\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {format_balance(new_balance)} SC\n"
                f"üìÖ –í—Å–µ–≥–æ —á–µ–∫-–∏–Ω–æ–≤: {total_checkins}\n\n"
                f"üí° –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥–æ–π!"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if callback.message:
                try:
                    await callback.message.edit_text(success_text, reply_markup=keyboard, parse_mode="HTML")
                except Exception:
                    await callback.message.answer(success_text, reply_markup=keyboard, parse_mode="HTML")
            
            await callback.answer("üéâ –ß–µ–∫-–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω! +0.5 SC")
            
    except Exception as e:
        logging.error(f"Daily checkin error for user {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ–∫-–∏–Ω–∞", show_alert=True)

@router.callback_query(F.data == "checkin_stats")
async def checkin_stats_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ–∫-–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not callback.from_user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã", show_alert=True)
        return
    
    user_id = callback.from_user.id
    db = get_db()
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                SELECT COUNT(*), SUM(sc_amount), MAX(checkin_date)
                FROM user_checkins WHERE user_id = ?
            """, (user_id,))
            stats = cursor.fetchone()
            
            total_checkins = stats[0] if stats[0] else 0
            total_earned = stats[1] if stats[1] else 0
            last_checkin = stats[2] if stats[2] else "–ù–∏–∫–æ–≥–¥–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫-–∏–Ω —Å–µ–≥–æ–¥–Ω—è
            today = date.today().isoformat()
            cursor.execute("""
                SELECT id FROM user_checkins 
                WHERE user_id = ? AND checkin_date = ?
            """, (user_id, today))
            
            today_checkin = cursor.fetchone() is not None
            
            stats_text = (
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ–∫-–∏–Ω–æ–≤</b>\n\n"
                f"üìÖ –í—Å–µ–≥–æ —á–µ–∫-–∏–Ω–æ–≤: {total_checkins}\n"
                f"üéÅ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_balance(total_earned)} SC\n"
                f"üìÜ –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–µ–∫-–∏–Ω: {last_checkin}\n"
                f"‚úÖ –°–µ–≥–æ–¥–Ω—è: {'–í—ã–ø–æ–ª–Ω–µ–Ω' if today_checkin else '–î–æ—Å—Ç—É–ø–µ–Ω'}\n\n"
                f"üí° –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω –¥–∞–µ—Ç 0.5 SC!"
            )
            
            keyboard_buttons = []
            
            if not today_checkin:
                keyboard_buttons.append([InlineKeyboardButton(text="üéØ –°–¥–µ–ª–∞—Ç—å —á–µ–∫-–∏–Ω", callback_data="daily_checkin")])
            
            keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if callback.message:
                try:
                    await callback.message.edit_text(stats_text, reply_markup=keyboard, parse_mode="HTML")
                except Exception:
                    await callback.message.answer(stats_text, reply_markup=keyboard, parse_mode="HTML")
            
            await callback.answer()
            
    except Exception as e:
        logging.error(f"Checkin stats error for user {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)