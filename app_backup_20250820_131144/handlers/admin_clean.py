"""
–ß–∏—Å—Ç–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –±–µ–∑ –æ—à–∏–±–æ–∫
"""

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ChatType
import logging
from typing import Optional

from app.context import get_db, get_config

router = Router()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞"""
    cfg = get_config()
    return user_id in cfg.ADMIN_IDS

def format_balance(amount: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    return f"{amount:.2f}"

@router.message(Command("admin"), F.chat.type == ChatType.PRIVATE)
async def admin_panel(message: types.Message):
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not message.from_user or not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üí∏ –í—ã–ø–ª–∞—Ç—ã", callback_data="admin_payouts")
        ],
        [
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            InlineKeyboardButton(text="üéØ –ó–∞–¥–∞–Ω–∏—è", callback_data="admin_tasks")
        ]
    ])
    
    await message.answer(
        "üõ† <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.message(Command("stats"), F.chat.type == ChatType.PRIVATE)
async def show_stats(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    db = get_db()
    
    with db.get_connection() as conn:
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM users WHERE subscription_checked = 1")
        verified_users = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM capsule_openings")
        total_capsules = cursor.fetchone()[0]
        
        cursor.execute("SELECT SUM(validated_referrals) FROM users")
        total_validated_refs_result = cursor.fetchone()[0] 
        total_validated_refs = total_validated_refs_result if total_validated_refs_result else 0
        
        cursor.execute("SELECT COUNT(*) FROM users WHERE referrer_id IS NOT NULL")
        total_referrals = cursor.fetchone()[0]
        
        cursor.execute("SELECT SUM(total_earnings) FROM users")
        total_earnings_result = cursor.fetchone()[0]
        total_earnings = total_earnings_result if total_earnings_result else 0
    
    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
        f"‚Ä¢ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã: {verified_users}\n\n"
        f"üéÅ <b>–ö–∞–ø—Å—É–ª—ã:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ: {total_capsules}\n\n"
        f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {total_referrals}\n"
        f"‚Ä¢ –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ: {total_validated_refs}\n\n"
        f"üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_balance(total_earnings)} SC"
    )
    
    await message.answer(stats_text, parse_mode="HTML")

# –ö–û–ú–ê–ù–î–´ –ó–ê–î–ê–ù–ò–ô
@router.message(Command("add_task"), F.chat.type == ChatType.PRIVATE)
async def add_task_command(message: types.Message):
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    if not message.text:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
        return
        
    args = message.text.split()[1:]
    if len(args) < 4:
        await message.answer(
            "üéØ <b>–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ</b>\n\n"
            "–§–æ—Ä–º–∞—Ç: <code>/add_task –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞ –ø–µ—Ä–∏–æ–¥_–¥–Ω–µ–π</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>/add_task \"–ü–æ–¥–ø–∏—Å–∫–∞\" \"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª\" 2 7</code>\n"
            "<code>/add_task \"–õ–∞–π–∫\" \"–õ–∞–π–∫–Ω–∏—Ç–µ –ø–æ—Å—Ç\" 1 1</code>\n\n"
            "üìÖ –ü–µ—Ä–∏–æ–¥ - –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å—Ç–∞–≤–∏—Ç—Å—è –∑–∞–¥–∞–Ω–∏–µ",
            parse_mode="HTML"
        )
        return
    
    title = args[0].strip('"')
    description = args[1].strip('"')
    try:
        reward_capsules = int(args[2])
        period_days = int(args[3])
    except ValueError:
        await message.answer("‚ùå –ù–∞–≥—Ä–∞–¥–∞ –∏ –ø–µ—Ä–∏–æ–¥ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return
    
    db = get_db()
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO tasks (title, description, task_type, reward_capsules, period_days, status)
                VALUES (?, ?, 'partner', ?, ?, 'active')
            """, (title, description, reward_capsules, period_days))
            conn.commit()
            task_id = cursor.lastrowid
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
        post_text = f"""üéØ <b>–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!</b>

üìù <b>{title}</b>
{description}

üéÅ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> {reward_capsules} –∫–∞–ø—Å—É–ª
üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {period_days} –¥–Ω–µ–π

–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–∏ –∫–∞–ø—Å—É–ª—ã! üéÅ"""
        
        await message.answer(
            f"‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
            f"üÜî ID: {task_id}\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {reward_capsules} –∫–∞–ø—Å—É–ª\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_days} –¥–Ω–µ–π\n\n"
            f"üì¢ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç:</b>\n\n{post_text}",
            parse_mode="HTML"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")

# –ö–û–ú–ê–ù–î–´ –ë–´–°–¢–†–û–ì–û –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ó–ê–î–ê–ù–ò–ô
@router.message(Command("edit_task_title"), F.chat.type == ChatType.PRIVATE)
async def edit_task_title_command(message: types.Message):
    """–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    if not message.text:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
        return
        
    args = message.text.split(maxsplit=2)[1:]
    if len(args) < 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: <code>/edit_task_title ID \"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\"</code>", parse_mode="HTML")
        return
    
    try:
        task_id = int(args[0])
        new_title = args[1].strip('"')
    except ValueError:
        await message.answer("‚ùå ID –∑–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    db = get_db()
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE tasks SET title = ? WHERE id = ?", (new_title, task_id))
        conn.commit()
        
        if cursor.rowcount > 0:
            await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è #{task_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_title}")
        else:
            await message.answer(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

@router.message(Command("edit_task_desc"), F.chat.type == ChatType.PRIVATE)
async def edit_task_desc_command(message: types.Message):
    """–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    if not message.text:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
        return
        
    args = message.text.split(maxsplit=2)[1:]
    if len(args) < 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: <code>/edit_task_desc ID \"–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\"</code>", parse_mode="HTML")
        return
    
    try:
        task_id = int(args[0])
        new_desc = args[1].strip('"')
    except ValueError:
        await message.answer("‚ùå ID –∑–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    db = get_db()
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE tasks SET description = ? WHERE id = ?", (new_desc, task_id))
        conn.commit()
        
        if cursor.rowcount > 0:
            await message.answer(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è #{task_id} –∏–∑–º–µ–Ω–µ–Ω–æ")
        else:
            await message.answer(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

@router.message(Command("edit_task_reward"), F.chat.type == ChatType.PRIVATE)
async def edit_task_reward_command(message: types.Message):
    """–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∑–∞–¥–∞–Ω–∏–µ"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    if not message.text:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
        return
        
    args = message.text.split()[1:]
    if len(args) < 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: <code>/edit_task_reward ID –Ω–æ–≤–∞—è_–Ω–∞–≥—Ä–∞–¥–∞</code>", parse_mode="HTML")
        return
    
    try:
        task_id = int(args[0])
        new_reward = int(args[1])
    except ValueError:
        await message.answer("‚ùå ID –∏ –Ω–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return
    
    if new_reward < 1 or new_reward > 10:
        await message.answer("‚ùå –ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10 –∫–∞–ø—Å—É–ª")
        return
    
    db = get_db()
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE tasks SET reward_capsules = ? WHERE id = ?", (new_reward, task_id))
        conn.commit()
        
        if cursor.rowcount > 0:
            await message.answer(f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ #{task_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_reward} –∫–∞–ø—Å—É–ª")
        else:
            await message.answer(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

@router.message(Command("toggle_task"), F.chat.type == ChatType.PRIVATE)
async def toggle_task_command(message: types.Message):
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    if not message.text:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
        return
        
    args = message.text.split()[1:]
    if not args:
        await message.answer("–§–æ—Ä–º–∞—Ç: <code>/toggle_task ID</code>", parse_mode="HTML")
        return
    
    try:
        task_id = int(args[0])
    except ValueError:
        await message.answer("‚ùå ID –∑–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    db = get_db()
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT status FROM tasks WHERE id = ?", (task_id,))
        current_status = cursor.fetchone()
        
        if not current_status:
            await message.answer(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        new_status = "inactive" if current_status[0] == "active" else "active"
        cursor.execute("UPDATE tasks SET status = ? WHERE id = ?", (new_status, task_id))
        conn.commit()
        
        status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ" if new_status == "active" else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
        await message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ #{task_id} {status_text}")

@router.message(Command("delete_task"), F.chat.type == ChatType.PRIVATE)
async def delete_task_command(message: types.Message):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    if not message.text:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
        return
        
    args = message.text.split()[1:]
    if not args:
        await message.answer("–§–æ—Ä–º–∞—Ç: <code>/delete_task ID</code>", parse_mode="HTML")
        return
    
    try:
        task_id = int(args[0])
    except ValueError:
        await message.answer("‚ùå ID –∑–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    db = get_db()
    with db.get_connection() as conn:
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        cursor.execute("SELECT title FROM tasks WHERE id = ?", (task_id,))
        task = cursor.fetchone()
        
        if not task:
            await message.answer(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute("DELETE FROM tasks WHERE id = ?", (task_id,))
        cursor.execute("DELETE FROM user_task_completions WHERE task_id = ?", (task_id,))
        conn.commit()
        
        await message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ #{task_id} \"{task[0]}\" —É–¥–∞–ª–µ–Ω–æ")

@router.message(Command("list_tasks"), F.chat.type == ChatType.PRIVATE)
async def list_tasks_command(message: types.Message):
    """–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    db = get_db()
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, title, description, reward_capsules, period_days, status, current_completions
            FROM tasks 
            ORDER BY id DESC 
            LIMIT 20
        """)
        tasks = cursor.fetchall()
    
    if not tasks:
        await message.answer("üìã –ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    
    text = "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π</b>\n\n"
    
    for task in tasks:
        status_emoji = "‚úÖ" if task[5] == "active" else "‚ùå"
        text += f"{status_emoji} <b>ID {task[0]}</b>: {task[1]}\n"
        text += f"üìù {task[2][:50]}{'...' if len(task[2]) > 50 else ''}\n"
        text += f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {task[3]} –∫–∞–ø—Å—É–ª\n"
        text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {task[4]} –¥–Ω–µ–π\n"
        text += f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {task[6] or 0}\n\n"
    
    await message.answer(text, parse_mode="HTML")

# –ö–û–ú–ê–ù–î–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
@router.message(Command("ban"), F.chat.type == ChatType.PRIVATE)
async def ban_command(message: types.Message):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    if not message.text:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
        return
        
    args = message.text.split()[1:]
    if not args:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>/ban 123456789</code>", parse_mode="HTML")
        return
    
    try:
        user_id = int(args[0])
    except ValueError:
        await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    db = get_db()
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET banned = 1 WHERE user_id = ?", (user_id,))
        conn.commit()
        
        if cursor.rowcount > 0:
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        else:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

@router.message(Command("unban"), F.chat.type == ChatType.PRIVATE)
async def unban_command(message: types.Message):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    if not message.text:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
        return
        
    args = message.text.split()[1:]
    if not args:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>/unban 123456789</code>", parse_mode="HTML")
        return
    
    try:
        user_id = int(args[0])
    except ValueError:
        await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    db = get_db()
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET banned = 0 WHERE user_id = ?", (user_id,))
        conn.commit()
        
        if cursor.rowcount > 0:
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        else:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

@router.message(Command("user"), F.chat.type == ChatType.PRIVATE)
async def user_info_command(message: types.Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    if not message.text:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
        return
        
    args = message.text.split()[1:]
    if not args:
        await message.answer(
            "üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
            "–§–æ—Ä–º–∞—Ç: <code>/user ID</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/user 123456789</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        user_id = int(args[0])
    except ValueError:
        await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    db = get_db()
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT user_id, username, first_name, total_earnings, pending_balance, 
                   paid_balance, total_referrals, banned, registration_date, wallet_address
            FROM users WHERE user_id = ?
        """, (user_id,))
        user_data = cursor.fetchone()
        
        if not user_data:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        cursor.execute("SELECT COUNT(*) FROM capsule_openings WHERE user_id = ?", (user_id,))
        capsules_opened = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM user_task_completions WHERE user_id = ?", (user_id,))
        tasks_completed = cursor.fetchone()[0]
    
    username = user_data[1] if user_data[1] else "–±–µ–∑ username"
    name = user_data[2] if user_data[2] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    banned_status = "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user_data[7] else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
    wallet = user_data[9][:10] + "..." + user_data[9][-6:] if user_data[9] else "‚ùå –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
    
    text = f"""üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>

üÜî <b>ID:</b> {user_data[0]}
üë§ <b>–ò–º—è:</b> {name}
üì± <b>Username:</b> @{username}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {banned_status}

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–ª: {format_balance(user_data[3])} SC
‚Ä¢ –ö –≤—ã–≤–æ–¥—É: {format_balance(user_data[4])} SC
‚Ä¢ –í—ã–ø–ª–∞—á–µ–Ω–æ: {format_balance(user_data[5])} SC

üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã:</b> {user_data[6]}
üéÅ <b>–ö–∞–ø—Å—É–ª –æ—Ç–∫—Ä—ã—Ç–æ:</b> {capsules_opened}
üéØ <b>–ó–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> {tasks_completed}

üíº <b>–ö–æ—à–µ–ª–µ–∫:</b> {wallet}
üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {user_data[8][:10] if user_data[8] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"""
    
    await message.answer(text, parse_mode="HTML")

# –ö–û–ú–ê–ù–î–´ –í–´–ü–õ–ê–¢
@router.message(Command("withdrawal_requests"), F.chat.type == ChatType.PRIVATE)
async def withdrawal_requests_command(message: types.Message):
    """–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    db = get_db()
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT wr.id, wr.user_id, wr.amount, wr.status, wr.created_at,
                   u.username, u.first_name, u.wallet_address
            FROM withdrawal_requests wr
            LEFT JOIN users u ON wr.user_id = u.user_id
            WHERE wr.status = 'pending'
            ORDER BY wr.created_at DESC
            LIMIT 15
        """)
        requests = cursor.fetchall()
    
    if not requests:
        await message.answer("‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥.")
        return
    
    text = "üí∏ <b>–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥ (–æ–∂–∏–¥–∞—é—â–∏–µ)</b>\n\n"
    
    for req in requests:
        username = req[5] if req[5] else "–±–µ–∑ username"
        name = req[6] if req[6] else f"ID {req[1]}"
        wallet = req[7][:10] + "..." + req[7][-6:] if req[7] else "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω"
        
        text += f"üÜî <b>–ó–∞–ø—Ä–æ—Å #{req[0]}</b>\n"
        text += f"üë§ {name} (@{username})\n"
        text += f"üí∞ –°—É–º–º–∞: {format_balance(req[2])} SC\n"
        text += f"üíº –ö–æ—à–µ–ª–µ–∫: <code>{wallet}</code>\n"
        text += f"üìÖ –î–∞—Ç–∞: {req[4][:16]}\n"
        text += f"üìã –û–¥–æ–±—Ä–∏—Ç—å: <code>/approve_withdrawal {req[0]}</code>\n\n"
    
    await message.answer(text, parse_mode="HTML")

@router.message(Command("approve_withdrawal"), F.chat.type == ChatType.PRIVATE)
async def approve_withdrawal_command(message: types.Message):
    """–û–¥–æ–±—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    if not message.text:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
        return
        
    args = message.text.split()[1:]
    if not args:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–ø—Ä–æ—Å–∞: <code>/approve_withdrawal 123</code>", parse_mode="HTML")
        return
    
    try:
        request_id = int(args[0])
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    db = get_db()
    with db.get_connection() as conn:
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT wr.user_id, wr.amount, u.username, u.first_name, u.pending_balance
            FROM withdrawal_requests wr
            LEFT JOIN users u ON wr.user_id = u.user_id
            WHERE wr.id = ? AND wr.status = 'pending'
        """, (request_id,))
        request_data = cursor.fetchone()
        
        if not request_data:
            await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return
        
        user_id, amount, username, first_name, pending_balance = request_data
        
        if pending_balance < amount:
            await message.answer(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ({format_balance(pending_balance)} SC)")
            return
        
        cursor.execute("""
            UPDATE withdrawal_requests 
            SET status = 'approved', processed_at = CURRENT_TIMESTAMP, admin_id = ?
            WHERE id = ?
        """, (message.from_user.id, request_id))
        
        cursor.execute("""
            INSERT INTO payouts (user_id, amount, admin_id, notes)
            VALUES (?, ?, ?, ?)
        """, (user_id, amount, message.from_user.id, f"–û–¥–æ–±—Ä–µ–Ω–æ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ #{request_id}"))
        
        cursor.execute("""
            UPDATE users 
            SET pending_balance = pending_balance - ?, paid_balance = paid_balance + ?
            WHERE user_id = ?
        """, (amount, amount, user_id))
        
        conn.commit()
        
        name = first_name or f"ID {user_id}"
        await message.answer(
            f"‚úÖ <b>–í—ã–ø–ª–∞—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name} (@{username or '–±–µ–∑ username'})\n"
            f"üí∞ –°—É–º–º–∞: {format_balance(amount)} SC\n"
            f"üÜî –ó–∞–ø—Ä–æ—Å: #{request_id}",
            parse_mode="HTML"
        )

@router.message(Command("payouts"), F.chat.type == ChatType.PRIVATE)
async def payouts_command(message: types.Message):
    """–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    db = get_db()
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT p.id, p.user_id, p.amount, p.payout_date, p.notes,
                   u.username, u.first_name
            FROM payouts p
            LEFT JOIN users u ON p.user_id = u.user_id
            ORDER BY p.payout_date DESC
            LIMIT 15
        """)
        payouts = cursor.fetchall()
        
        cursor.execute("SELECT COUNT(*), SUM(amount) FROM payouts")
        total_stats = cursor.fetchone()
        total_count = total_stats[0] or 0
        total_amount = total_stats[1] or 0
    
    text = f"üí≥ <b>–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç</b>\n\n"
    text += f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã–ø–ª–∞—Ç: {total_count}\n"
    text += f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {format_balance(total_amount)} SC\n\n"
    
    if not payouts:
        text += "üìã –í—ã–ø–ª–∞—Ç –µ—â–µ –Ω–µ –±—ã–ª–æ."
    else:
        text += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã:</b>\n\n"
        for payout in payouts:
            username = payout[5] if payout[5] else "–±–µ–∑ username"
            name = payout[6] if payout[6] else f"ID {payout[1]}"
            
            text += f"üí≥ <b>#{payout[0]}</b> - {format_balance(payout[2])} SC\n"
            text += f"üë§ {name} (@{username})\n"
            text += f"üìÖ {payout[3][:16]}\n"
            if payout[4]:
                text += f"üìù {payout[4]}\n"
            text += "\n"
    
    await message.answer(text, parse_mode="HTML")

@router.message(Command("pending"), F.chat.type == ChatType.PRIVATE)
async def pending_command(message: types.Message):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    db = get_db()
    
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users WHERE pending_balance > 0")
        count = cursor.fetchone()[0]
        
        cursor.execute("SELECT SUM(pending_balance) FROM users WHERE pending_balance > 0")
        total = cursor.fetchone()[0] or 0
    
    text = f"‚è≥ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º –∫ –≤—ã–≤–æ–¥—É</b>\n\n"
    text += f"üë• –í—Å–µ–≥–æ: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    text += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {format_balance(total)} SC\n\n"
    
    if count > 0:
        with db.get_connection() as conn2:
            cursor2 = conn2.cursor()
            cursor2.execute("""
                SELECT user_id, username, first_name, pending_balance, wallet_address
                FROM users 
                WHERE pending_balance > 0
                ORDER BY pending_balance DESC
                LIMIT 10
            """)
            top_users = cursor2.fetchall()
        
        text += "<b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        for user in top_users:
            username = user[1] if user[1] else "–±–µ–∑ username"
            name = user[2] if user[2] else f"ID {user[0]}"
            wallet = "‚úÖ –ï—Å—Ç—å" if user[4] else "‚ùå –ù–µ—Ç"
            
            text += f"üë§ {name} (@{username})\n"
            text += f"üíé –ë–∞–ª–∞–Ω—Å: {format_balance(user[3])} SC\n"
            text += f"üíº –ö–æ—à–µ–ª–µ–∫: {wallet}\n\n"
    
    await message.answer(text, parse_mode="HTML")

@router.message(Command("balances"), F.chat.type == ChatType.PRIVATE)
async def balances_command(message: types.Message):
    """–¢–æ–ø –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    db = get_db()
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT user_id, username, first_name, total_earnings, pending_balance, paid_balance
            FROM users 
            WHERE total_earnings > 0
            ORDER BY total_earnings DESC 
            LIMIT 20
        """)
        users = cursor.fetchall()
    
    if not users:
        await message.answer("üìä –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º.")
        return
    
    text = "üí∞ <b>–¢–æ–ø –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
    
    for i, user in enumerate(users, 1):
        username = user[1] if user[1] else "–±–µ–∑ username"
        name = user[2] if user[2] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        text += f"{i}. {name} (@{username})\n"
        text += f"   üíé –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–ª: {format_balance(user[3])} SC\n"
        text += f"   ‚è≥ –ö –≤—ã–ø–ª–∞—Ç–µ: {format_balance(user[4])} SC\n"
        text += f"   ‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ: {format_balance(user[5])} SC\n\n"
    
    await message.answer(text, parse_mode="HTML")

@router.message(Command("mark_paid"), F.chat.type == ChatType.PRIVATE)
async def mark_paid_command(message: types.Message):
    """–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
    if not message.from_user or not is_admin(message.from_user.id):
        return
    
    if not message.text:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
        return
        
    args = message.text.split()[1:]
    if len(args) < 2:
        await message.answer(
            "üí≥ <b>–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É</b>\n\n"
            "–§–æ—Ä–º–∞—Ç: <code>/mark_paid user_id —Å—É–º–º–∞ [–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ]</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/mark_paid 123456789 50 –í—ã–ø–ª–∞—á–µ–Ω–æ –Ω–∞ TON</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        user_id = int(args[0])
        amount = float(args[1])
    except ValueError:
        await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return
    
    notes = " ".join(args[2:]) if len(args) > 2 else "–í—ã–ø–ª–∞—á–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
    
    db = get_db()
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT username, first_name, pending_balance
                FROM users WHERE user_id = ?
            """, (user_id,))
            user_data = cursor.fetchone()
            
            if not user_data:
                await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            username, first_name, pending_balance = user_data
            
            if pending_balance < amount:
                await message.answer(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n"
                    f"–î–æ—Å—Ç—É–ø–Ω–æ: {format_balance(pending_balance)} SC\n"
                    f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ: {format_balance(amount)} SC"
                )
                return
            
            cursor.execute("""
                INSERT INTO payouts (user_id, amount, admin_id, notes)
                VALUES (?, ?, ?, ?)
            """, (user_id, amount, message.from_user.id, notes))
            
            cursor.execute("""
                UPDATE users 
                SET pending_balance = pending_balance - ?, 
                    paid_balance = paid_balance + ?
                WHERE user_id = ?
            """, (amount, amount, user_id))
            
            conn.commit()
            
            name = first_name or f"ID {user_id}"
            await message.answer(
                f"‚úÖ <b>–í—ã–ø–ª–∞—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name} (@{username or '–±–µ–∑ username'})\n"
                f"üí∞ –°—É–º–º–∞: {format_balance(amount)} SC\n"
                f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {notes}",
                parse_mode="HTML"
            )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–ø–ª–∞—Ç—ã: {e}")

# CALLBACK HANDLERS
@router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    db = get_db()
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute("SELECT COUNT(*) FROM users")
            total_users = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM users WHERE subscription_checked = 1")
            verified_users = cursor.fetchone()[0]
            
            cursor.execute("SELECT SUM(total_earnings) FROM users")
            total_earnings_result = cursor.fetchone()[0]
            total_earnings = total_earnings_result if total_earnings_result else 0
            
        text = f"""üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã: {verified_users}

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_balance(total_earnings)} SC"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        if callback.message and hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Admin stats error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

@router.callback_query(F.data == "admin_back")
async def admin_back_callback(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üí∏ –í—ã–ø–ª–∞—Ç—ã", callback_data="admin_payouts")
        ],
        [
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            InlineKeyboardButton(text="üéØ –ó–∞–¥–∞–Ω–∏—è", callback_data="admin_tasks")
        ]
    ])
    
    text = "üõ† <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    
    if callback.message and hasattr(callback.message, 'edit_text'):
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "admin_payouts")
async def admin_payouts_callback(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç–∞–º–∏"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    db = get_db()
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute("SELECT COUNT(*) FROM withdrawal_requests WHERE status = 'pending'")
            pending_withdrawals = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM payouts")
            completed_payouts = cursor.fetchone()[0]
            
        text = f"""üí∏ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç–∞–º–∏</b>

üìã <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã: {pending_withdrawals}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã: {completed_payouts}

üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /withdrawal_requests - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
‚Ä¢ /payouts - –∏—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç
‚Ä¢ /pending - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º
‚Ä¢ /approve_withdrawal ID - –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
‚Ä¢ /mark_paid user_id —Å—É–º–º–∞ - –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        if callback.message and hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Admin payouts error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–ø–ª–∞—Ç–∞—Ö", show_alert=True)

@router.callback_query(F.data == "admin_users")
async def admin_users_callback(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    text = """üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /ban [user_id] - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ /unban [user_id] - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
‚Ä¢ /user [user_id] - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
‚Ä¢ /balances - —Ç–æ–ø –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ /pending - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º –∫ –≤—ã–≤–æ–¥—É

‚úÖ <b>–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç!</b>"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    if callback.message and hasattr(callback.message, 'edit_text'):
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "admin_tasks")
async def admin_tasks_callback(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    db = get_db()
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM tasks")
            total_tasks = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM user_task_completions")
            total_completions = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM tasks WHERE status = 'active'")
            active_tasks = cursor.fetchone()[0]
            
        text = f"""üéØ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {total_tasks}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_tasks}
‚Ä¢ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {total_completions}

üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="task_create"),
                InlineKeyboardButton(text="üéØ –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞–Ω–∏–π", callback_data="tasks_manager")
            ],
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="task_stats"),
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="task_settings")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        if callback.message and hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Admin tasks error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π", show_alert=True)

@router.callback_query(F.data == "tasks_manager")
async def tasks_manager_handler(callback: types.CallbackQuery):
    """–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    db = get_db()
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM tasks")
            total_tasks = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM tasks WHERE status = 'active'")
            active_tasks = cursor.fetchone()[0]
            
            cursor.execute("SELECT id, title, reward_capsules, period_days, status FROM tasks ORDER BY id DESC LIMIT 5")
            recent_tasks = cursor.fetchall()
        
        text = f"""üéØ <b>–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞–Ω–∏–π</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {total_tasks}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_tasks}

üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:</b>"""
        
        if recent_tasks:
            for task in recent_tasks:
                status_emoji = "‚úÖ" if task[4] == "active" else "‚ùå"
                text += f"\n{status_emoji} <b>ID {task[0]}</b>: {task[1]} ({task[2]} –∫–∞–ø—Å—É–ª, {task[3]} –¥–Ω.)"
        else:
            text += "\n‚Ä¢ –ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="task_create_wizard"),
                InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="task_list_all")
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="task_settings"),
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="task_stats")
            ],
            [InlineKeyboardButton(text="üîô –ö –∑–∞–¥–∞–Ω–∏—è–º", callback_data="admin_tasks")]
        ])
        
        if callback.message:
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Tasks manager error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞", show_alert=True)


@router.callback_query(F.data == "task_settings")
async def task_settings_handler(callback: types.CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞–Ω–∏–π - –ø—Ä—è–º–æ –≤ admin_clean"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    text = """‚öôÔ∏è <b>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞–Ω–∏–π</b>

üéØ <b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–∞:</b>
‚úÖ –ö–Ω–æ–ø–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚úÖ –ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Å —à–∞–±–ª–æ–Ω–∞–º–∏
‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
‚úÖ –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –±–∞–∑—ã

üîß <b>–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –∑–∞–¥–∞–Ω–∏–π (–ø–æ–¥–ø–∏—Å–∫–∏, –≥—Ä—É–ø–ø—ã, –ª–∞–π–∫–∏)
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
‚Ä¢ –í–∏–∑—É–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∫–æ–º–∞–Ω–¥

üí° <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "üéØ –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞–Ω–∏–π" –¥–ª—è —Ä–∞–±–æ—Ç—ã
‚Ä¢ –ö–Ω–æ–ø–∫–∞ "‚ûï –°–æ–∑–¥–∞—Ç—å" ‚Üí –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤
‚Ä¢ "üìã –í—Å–µ –∑–∞–¥–∞–Ω–∏—è" ‚Üí —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏
‚Ä¢ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" ‚Üí –¥–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

üöÄ <b>–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!</b>"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéØ –ö –º–µ–Ω–µ–¥–∂–µ—Ä—É", callback_data="tasks_manager"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="task_stats")
        ],
        [InlineKeyboardButton(text="üîô –ö –∑–∞–¥–∞–Ω–∏—è–º", callback_data="admin_tasks")]
    ])
    
    try:
        if callback.message:
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logging.error(f"Task settings error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)

@router.callback_query(F.data == "task_stats")
async def task_stats_handler(callback: types.CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π - –ø—Ä—è–º–æ –≤ admin_clean"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    db = get_db()
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute("SELECT COUNT(*) FROM tasks")
            total_tasks = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM tasks WHERE status = 'active'")
            active_tasks = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM user_task_completions")
            total_completions = cursor.fetchone()[0]
            
            cursor.execute("SELECT SUM(reward_capsules) FROM user_task_completions")
            total_rewards_result = cursor.fetchone()[0]
            total_rewards = total_rewards_result if total_rewards_result else 0
            
            cursor.execute("""
                SELECT title, current_completions 
                FROM tasks 
                WHERE status = 'active' 
                ORDER BY current_completions DESC 
                LIMIT 5
            """)
            popular_tasks = cursor.fetchall()
        
        text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π</b>

üìà <b>–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {total_tasks}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_tasks}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {total_tasks - active_tasks}

üë• <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
‚Ä¢ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {total_completions}
‚Ä¢ –í—ã–¥–∞–Ω–æ –Ω–∞–≥—Ä–∞–¥: {total_rewards} –∫–∞–ø—Å—É–ª

üèÜ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b>"""
        
        if popular_tasks:
            for task in popular_tasks[:3]:
                text += f"\n‚Ä¢ {task[0]}: {task[1]} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π"
        else:
            text += "\n‚Ä¢ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="task_stats")],
            [InlineKeyboardButton(text="üîô –ö –∑–∞–¥–∞–Ω–∏—è–º", callback_data="admin_tasks")]
        ])
        
        if callback.message:
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Task stats error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

@router.callback_query(F.data == "task_create_wizard")
async def task_create_wizard_handler(callback: types.CallbackQuery):
    """–ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    text = """‚ûï <b>–ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è</b>

üéØ <b>–®–∞–±–ª–æ–Ω—ã –∑–∞–¥–∞–Ω–∏–π:</b>
–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—ë"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì± –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª", callback_data="task_template_channel"),
            InlineKeyboardButton(text="üë• –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É", callback_data="task_template_group")
        ],
        [
            InlineKeyboardButton(text="üëç –õ–∞–π–∫ –ø–æ—Å—Ç–∞", callback_data="task_template_like"),
            InlineKeyboardButton(text="üì§ –†–µ–ø–æ—Å—Ç", callback_data="task_template_repost")
        ],
        [
            InlineKeyboardButton(text="‚úèÔ∏è –°–≤–æ—ë –∑–∞–¥–∞–Ω–∏–µ", callback_data="task_custom_create"),
            InlineKeyboardButton(text="üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="task_manual_guide")
        ],
        [InlineKeyboardButton(text="üîô –ö –º–µ–Ω–µ–¥–∂–µ—Ä—É", callback_data="tasks_manager")]
    ])
    
    try:
        if callback.message:
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logging.error(f"Task create wizard error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Ç–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "task_list_all")
async def task_list_all_handler(callback: types.CallbackQuery):
    """–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    db = get_db()
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT id, title, reward_capsules, period_days, status, current_completions
                FROM tasks 
                ORDER BY id DESC 
                LIMIT 10
            """)
            tasks = cursor.fetchall()
    
        if not tasks:
            text = "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π</b>\n\n–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–µ", callback_data="task_create_wizard")],
                [InlineKeyboardButton(text="üîô –ö –º–µ–Ω–µ–¥–∂–µ—Ä—É", callback_data="tasks_manager")]
            ])
        else:
            text = "üìã <b>–í—Å–µ –∑–∞–¥–∞–Ω–∏—è</b>\n"
            
            keyboard_rows = []
            for task in tasks:
                status_emoji = "‚úÖ" if task[4] == "active" else "‚ùå"
                text += f"\n{status_emoji} <b>ID {task[0]}</b>: {task[1]}"
                text += f"\n   üéÅ {task[2]} –∫–∞–ø—Å—É–ª ‚Ä¢ üìÖ {task[3]} –¥–Ω. ‚Ä¢ üë• {task[5] or 0} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                keyboard_rows.append([
                    InlineKeyboardButton(text=f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å #{task[0]}", callback_data=f"task_edit_{task[0]}"),
                    InlineKeyboardButton(text=f"üóë –£–¥–∞–ª–∏—Ç—å #{task[0]}", callback_data=f"task_delete_confirm_{task[0]}")
                ])
            
            keyboard_rows.extend([
                [InlineKeyboardButton(text="‚ûï –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="task_create_wizard")],
                [InlineKeyboardButton(text="üîô –ö –º–µ–Ω–µ–¥–∂–µ—Ä—É", callback_data="tasks_manager")]
            ])
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
        
        if callback.message:
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Task list error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("task_template_"))
async def task_template_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞–¥–∞–Ω–∏–π"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    template_type = callback.data.split("_")[-1]
    
    templates = {
        "channel": {
            "title": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª",
            "desc": "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª @simplecoin_chat",
            "reward": 3,
            "period": 7
        },
        "group": {
            "title": "–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É", 
            "desc": "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ @simplecoin_chatSC",
            "reward": 2,
            "period": 7
        },
        "like": {
            "title": "–õ–∞–π–∫ –ø–æ—Å—Ç–∞",
            "desc": "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫ –Ω–∞—à–µ–º—É –ø–æ—Å—Ç—É",
            "reward": 1,
            "period": 3
        },
        "repost": {
            "title": "–†–µ–ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª",
            "desc": "–°–¥–µ–ª–∞–π—Ç–µ —Ä–µ–ø–æ—Å—Ç –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É",
            "reward": 5,
            "period": 5
        }
    }
    
    template = templates.get(template_type)
    if not template:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω", show_alert=True)
        return
    
    text = f"""üìù <b>–®–∞–±–ª–æ–Ω: {template['title']}</b>

<code>/add_task "{template['title']}" "{template['desc']}" {template['reward']} {template['period']}</code>

üéÅ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> {template['reward']} –∫–∞–ø—Å—É–ª
üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {template['period']} –¥–Ω–µ–π

üí° <b>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤—ã—à–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è</b>"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ö —à–∞–±–ª–æ–Ω–∞–º", callback_data="task_create_wizard")]
    ])
    
    try:
        if callback.message:
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logging.error(f"Task template error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∞", show_alert=True)

@router.callback_query(F.data == "task_manual_guide")
async def task_manual_guide_handler(callback: types.CallbackQuery):
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä—É—á–Ω–æ–º—É —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–¥–∞–Ω–∏–π"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    text = """üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–¥–∞–Ω–∏–π</b>

‚úçÔ∏è <b>–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:</b>
<code>/add_task "–ù–∞–∑–≤–∞–Ω–∏–µ" "–û–ø–∏—Å–∞–Ω–∏–µ" –Ω–∞–≥—Ä–∞–¥–∞ –ø–µ—Ä–∏–æ–¥</code>

üìù <b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>

üîπ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:</b>
<code>/add_task "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª" "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @simplecoin_chat" 3 7</code>

üîπ <b>–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É:</b>
<code>/add_task "–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É" "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ @simplecoin_chatSC" 2 5</code>

üîπ <b>–†–µ–ø–æ—Å—Ç –ø–æ—Å—Ç–∞:</b>
<code>/add_task "–†–µ–ø–æ—Å—Ç" "–°–¥–µ–ª–∞–π—Ç–µ —Ä–µ–ø–æ—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞" 5 3</code>

‚öôÔ∏è <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> –æ—Ç 1 –¥–æ 10 –∫–∞–ø—Å—É–ª
‚Ä¢ <b>–ü–µ—Ä–∏–æ–¥:</b> –æ—Ç 1 –¥–æ 30 –¥–Ω–µ–π
‚Ä¢ <b>–ö–∞–≤—ã—á–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã</b> –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è

üí° <b>–ó–∞–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è</b>"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ö –º–∞—Å—Ç–µ—Ä—É", callback_data="task_create_wizard")]
    ])
    
    try:
        if callback.message:
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logging.error(f"Manual guide error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", show_alert=True)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ task_management_clean.py

# –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ task_management_clean.py

@router.callback_query(F.data == "task_create")
async def task_create_callback(callback: types.CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    text = """‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è</b>

üìã <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:</b>
<code>/add_task "–ù–∞–∑–≤–∞–Ω–∏–µ" "–û–ø–∏—Å–∞–Ω–∏–µ" –Ω–∞–≥—Ä–∞–¥–∞ –ø–µ—Ä–∏–æ–¥_–¥–Ω–µ–π</code>

üìù <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ <code>/add_task "–ü–æ–¥–ø–∏—Å–∫–∞ TechNews" "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @technews_channel" 3 7</code>
‚Ä¢ <code>/add_task "–õ–∞–π–∫ –ø–æ—Å—Ç–∞" "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫ –Ω–∞—à–µ–º—É –ø–æ—Å—Ç—É" 1 1</code>
‚Ä¢ <code>/add_task "–†–µ–ø–æ—Å—Ç" "–°–¥–µ–ª–∞–π—Ç–µ —Ä–µ–ø–æ—Å—Ç –≤ —Å–≤–æ—é –ª–µ–Ω—Ç—É" 2 3</code>

üéÅ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø—Å—É–ª (1-10)
üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ –∑–∞–¥–∞–Ω–∏–µ (1-30)

–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –®–∞–±–ª–æ–Ω—ã –∑–∞–¥–∞–Ω–∏–π", callback_data="task_templates")],
        [InlineKeyboardButton(text="üîô –ö –∑–∞–¥–∞–Ω–∏—è–º", callback_data="admin_tasks")]
    ])
    
    if callback.message and hasattr(callback.message, 'edit_text'):
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "task_list")
async def task_list_callback(callback: types.CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    db = get_db()
    
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, title, reward_capsules, period_days, status, current_completions
            FROM tasks 
            ORDER BY id DESC 
            LIMIT 8
        """)
        tasks = cursor.fetchall()
    
    if not tasks:
        text = "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π</b>\n\n–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="task_create")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_tasks")]
        ])
    else:
        text = "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</b>\n\n"
        keyboard_buttons = []
        
        for task in tasks:
            status_emoji = "‚úÖ" if task[4] == "active" else "‚ùå"
            text += f"{status_emoji} <b>ID {task[0]}</b>: {task[1]}\n"
            text += f"üéÅ {task[2]} –∫–∞–ø—Å—É–ª ‚Ä¢ üìÖ {task[3]} –¥–Ω–µ–π ‚Ä¢ üë• {task[5] or 0} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            keyboard_buttons.append([
                InlineKeyboardButton(text=f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å #{task[0]}", callback_data=f"task_edit_{task[0]}"),
                InlineKeyboardButton(text=f"üóë –£–¥–∞–ª–∏—Ç—å #{task[0]}", callback_data=f"task_delete_{task[0]}")
            ])
        
        keyboard_buttons.append([InlineKeyboardButton(text="‚ûï –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="task_create")])
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ö –∑–∞–¥–∞–Ω–∏—è–º", callback_data="admin_tasks")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    if callback.message and hasattr(callback.message, 'edit_text'):
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("task_edit_"))
async def task_edit_callback(callback: types.CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    task_id = int(callback.data.split("_")[2])
    db = get_db()
    
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, title, description, reward_capsules, period_days, status
            FROM tasks WHERE id = ?
        """, (task_id,))
        task = cursor.fetchone()
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    text = f"""‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è #{task[0]}</b>

üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task[1]}
üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task[2]}
üéÅ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> {task[3]} –∫–∞–ø—Å—É–ª
üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {task[4]} –¥–Ω–µ–π
‚ö° <b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–∫—Ç–∏–≤–Ω–æ' if task[5] == 'active' else '–ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}

üîß <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ <code>/edit_task_title {task_id} "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"</code>
‚Ä¢ <code>/edit_task_desc {task_id} "–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"</code>
‚Ä¢ <code>/edit_task_reward {task_id} –Ω–æ–≤–∞—è_–Ω–∞–≥—Ä–∞–¥–∞</code>
‚Ä¢ <code>/edit_task_period {task_id} –Ω–æ–≤—ã–π_–ø–µ—Ä–∏–æ–¥</code>
‚Ä¢ <code>/toggle_task {task_id}</code> - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"task_toggle_{task_id}"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"task_delete_{task_id}")
        ],
        [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="task_list")]
    ])
    
    if callback.message and hasattr(callback.message, 'edit_text'):
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("task_toggle_"))
async def task_toggle_callback(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    task_id = int(callback.data.split("_")[2])
    db = get_db()
    
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT status FROM tasks WHERE id = ?", (task_id,))
        current_status = cursor.fetchone()
        
        if not current_status:
            await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        new_status = "inactive" if current_status[0] == "active" else "active"
        cursor.execute("UPDATE tasks SET status = ? WHERE id = ?", (new_status, task_id))
        conn.commit()
    
    status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ" if new_status == "active" else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
    await callback.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ #{task_id} {status_text}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
    callback.data = f"task_edit_{task_id}"
    await task_edit_callback(callback)

@router.callback_query(F.data.startswith("task_delete_") & ~F.data.startswith("task_delete_confirm_"))
async def task_delete_callback(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è - –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        task_id = int(callback.data.split("_")[2])
        
        text = f"üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è #{task_id}</b>\n\n‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"task_delete_confirm_{task_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="task_list_all")
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Task delete dialog error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("task_delete_confirm_"))
async def task_delete_confirm_callback(callback: types.CallbackQuery):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    try:
        task_id = int(callback.data.split("_")[-1])  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
        db = get_db()
        
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM tasks WHERE id = ?", (task_id,))
            cursor.execute("DELETE FROM user_task_completions WHERE task_id = ?", (task_id,))
            conn.commit()
        
        await callback.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ #{task_id} —É–¥–∞–ª–µ–Ω–æ", show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π handler
        await task_list_all_handler(callback)
        
    except Exception as e:
        logging.error(f"Delete confirm error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "task_templates")
async def task_templates_callback(callback: types.CallbackQuery):
    """–®–∞–±–ª–æ–Ω—ã –∑–∞–¥–∞–Ω–∏–π"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    text = """üìã <b>–®–∞–±–ª–æ–Ω—ã –∑–∞–¥–∞–Ω–∏–π</b>

üì∫ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:</b>
<code>/add_task "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ [–ù–∞–∑–≤–∞–Ω–∏–µ]" "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @username –∫–∞–Ω–∞–ª–∞" 3 7</code>

üí¨ <b>–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç:</b>
<code>/add_task "–í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç [–ù–∞–∑–≤–∞–Ω–∏–µ]" "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ @chatusername" 2 5</code>

üëç <b>–õ–∞–π–∫ –ø–æ—Å—Ç–∞:</b>
<code>/add_task "–õ–∞–π–∫ –ø–æ—Å—Ç–∞" "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫ –ø–æ—Å—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ" 1 3</code>

üîÑ <b>–†–µ–ø–æ—Å—Ç:</b>
<code>/add_task "–†–µ–ø–æ—Å—Ç" "–°–¥–µ–ª–∞–π—Ç–µ —Ä–µ–ø–æ—Å—Ç –≤ —Å–≤–æ—é –ª–µ–Ω—Ç—É" 2 3</code>

üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>
<code>/add_task "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ –ø–æ—Å—Ç–æ–º" 2 5</code>

üé• <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ:</b>
<code>/add_task "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ" "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é" 1 1</code>"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ö —Å–æ–∑–¥–∞–Ω–∏—é", callback_data="task_create")]
    ])
    
    if callback.message and hasattr(callback.message, 'edit_text'):
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "task_stats")
async def task_stats_callback(callback: types.CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º"""
    if not callback.from_user or not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    db = get_db()
    
    with db.get_connection() as conn:
        cursor = conn.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π
        cursor.execute("SELECT COUNT(*), COUNT(CASE WHEN status = 'active' THEN 1 END) FROM tasks")
        task_stats = cursor.fetchone()
        total_tasks = task_stats[0]
        active_tasks = task_stats[1]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
        cursor.execute("SELECT COUNT(*), COUNT(DISTINCT user_id) FROM user_task_completions")
        completion_stats = cursor.fetchone()
        total_completions = completion_stats[0]
        unique_users = completion_stats[1]
        
        # –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        cursor.execute("""
            SELECT t.title, COUNT(utc.id) as completions
            FROM tasks t
            LEFT JOIN user_task_completions utc ON t.id = utc.task_id
            GROUP BY t.id, t.title
            ORDER BY completions DESC
            LIMIT 5
        """)
        popular_tasks = cursor.fetchall()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–≥—Ä–∞–¥–∞–º
        cursor.execute("SELECT SUM(reward_capsules * current_completions) FROM tasks")
        total_rewards = cursor.fetchone()[0] or 0
    
    text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π</b>

üìã <b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {total_tasks}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_tasks}
‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_tasks - active_tasks}

üë• <b>–í—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>
‚Ä¢ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {total_completions}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {round(total_completions/unique_users, 1) if unique_users > 0 else 0}

üéÅ <b>–ù–∞–≥—Ä–∞–¥—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ –∫–∞–ø—Å—É–ª: {total_rewards}

üî• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b>"""
    
    for task in popular_tasks:
        text += f"\n‚Ä¢ {task[0]}: {task[1]} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ö –∑–∞–¥–∞–Ω–∏—è–º", callback_data="admin_tasks")]
    ])
    
    if callback.message and hasattr(callback.message, 'edit_text'):
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

# –°—Ç–∞—Ä—ã–π handler —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è task_settings.py