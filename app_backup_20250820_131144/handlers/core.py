"""
–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""
import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from datetime import datetime
from aiogram.enums import ChatType

from app.context import get_config, get_db
from app.keyboards import get_main_keyboard, get_back_keyboard, get_profile_keyboard, get_referrals_keyboard
from app.services.capsules import CapsuleService
from app.utils.helpers import format_user_mention, format_balance

router = Router()

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å", F.chat.type == ChatType.PRIVATE)
@router.message(Command("me"), F.chat.type == ChatType.PRIVATE)
async def profile_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not message.from_user:
        return
    user_id = message.from_user.id
    db = get_db()
    cfg = get_config()
    
    user = db.get_user(user_id)
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    if not user['subscription_checked']:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø–æ–º–æ—â—å—é /check")
        return
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if not message.bot:
        return
    bot_info = await message.bot.get_me()
    if not bot_info or not bot_info.username:
        return
    ref_link = f"https://t.me/{bot_info.username}?start=ref_{user_id}"
    
    # –°—Ç–∞—Ç—É—Å –±–∞–Ω–∞
    ban_status = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user['banned'] else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
    ban_reason = f"\n–ü—Ä–∏—á–∏–Ω–∞: {user['ban_reason']}" if user['banned'] and user['ban_reason'] else ""
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ
    wallet_info = user['wallet_address'] if user['wallet_address'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî ID: <code>{user_id}</code>\n"
        f"üë§ –ò–º—è: {format_user_mention(user['first_name'], user['username'])}\n"
        f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['registration_date'][:10] if user['registration_date'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {ban_status}{ban_reason}\n\n"
        
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å SC:</b>\n"
        f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {format_balance(user['balance'])}\n"
        f"‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ: {format_balance(user['paid_balance'])}\n"
        f"üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_balance(user['total_earnings'])}\n\n"
        
        f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã:</b>\n"
        f"üìù –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user['total_referrals']}\n"
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {user['validated_referrals']}\n\n"
        
        f"üéÅ <b>–ö–∞–ø—Å—É–ª—ã:</b>\n"
        f"üì¶ –û—Ç–∫—Ä—ã—Ç–æ –≤—Å–µ–≥–æ: {user['total_capsules_opened']}\n"
        f"üóì –°–µ–≥–æ–¥–Ω—è: {user['daily_capsules_opened']}/{cfg.DAILY_CAPSULE_LIMIT + (user['validated_referrals'] or 0) + (user.get('bonus_capsules', 0) or 0)}\n\n"
        
        f"üíº <b>–ö–æ—à–µ–ª–µ–∫ TON:</b> <code>{wallet_info}</code>\n\n"
        f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
        f"<code>{ref_link}</code>"
    )
    
    await message.answer(profile_text, reply_markup=get_profile_keyboard())

@router.message(F.text == "üéÅ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ø—Å—É–ª—É", F.chat.type == ChatType.PRIVATE)
@router.message(Command("open"), F.chat.type == ChatType.PRIVATE)
@router.callback_query(F.data == "open_capsule")
async def open_capsule_command(message_or_callback):
    """–û—Ç–∫—Ä—ã—Ç—å –∫–∞–ø—Å—É–ª—É - —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –∏ —Å callback"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤—Ö–æ–¥—è—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    if hasattr(message_or_callback, 'from_user'):
        user = message_or_callback.from_user
        message = message_or_callback
        callback = None
    else:
        user = message_or_callback.from_user
        message = message_or_callback.message
        callback = message_or_callback
        
    if not user:
        return
    user_id = user.id
    db = get_db()
    cfg = get_config()
    
    user = db.get_user(user_id)
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    if not user['subscription_checked']:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø–æ–º–æ—â—å—é /check")
        return
    
    if user['banned']:
        await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–∞–ø—Å—É–ª—ã.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ä–∞–Ω—Ç–∏–Ω
    if db.is_in_quarantine(user_id):
        await message.answer("‚è∞ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–ø—Å—É–ª—ã (–±–∞–∑–æ–≤—ã–µ + –±–æ–Ω—É—Å–Ω—ã–µ)
    from app.services.special_rewards import SpecialRewardService
    special_service = SpecialRewardService()
    available_capsules = special_service.get_available_capsules(user_id)
    
    if available_capsules <= 0:
        referral_bonus = user['validated_referrals'] if user['validated_referrals'] else 0
        bonus_capsules = user.get('bonus_capsules', 0) or 0
        
        limit_text = (
            f"üì¶ –õ–∏–º–∏—Ç –∫–∞–ø—Å—É–ª –∏—Å—á–µ—Ä–ø–∞–Ω!\n\n"
            f"üí° –í–∞—à –ª–∏–º–∏—Ç:\n"
            f"‚Ä¢ {cfg.DAILY_CAPSULE_LIMIT} –±–∞–∑–æ–≤—ã—Ö –∫–∞–ø—Å—É–ª\n"
            f"‚Ä¢ +{referral_bonus} –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
            f"‚Ä¢ +{bonus_capsules} –±–æ–Ω—É—Å–Ω—ã—Ö\n\n"
            f"‚è∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π!"
        )
        
        if callback:
            await callback.answer(limit_text, show_alert=True)
        else:
            await message.answer(limit_text)
        return
    
    # –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ø—Å—É–ª—É
    capsule_service = CapsuleService()
    reward = capsule_service.open_capsule(cfg.CAPSULE_REWARDS)
    
    if reward:
        # –ó–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ
        db.record_capsule_opening(user_id, reward.name, reward.amount)
        
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –±–æ–Ω—É—Å–Ω–∞—è –∫–∞–ø—Å—É–ª–∞, —É–º–µ–Ω—å—à–∏—Ç—å –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        bonus_capsules = user.get('bonus_capsules', 0) or 0
        if bonus_capsules > 0:
            special_service.use_bonus_capsule(user_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
        reward_result = special_service.process_special_reward(user_id, reward.name, reward.amount)
        
        # –ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        updated_user = db.get_user(user_id)
        remaining_capsules = special_service.get_available_capsules(user_id)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        message_text = (
            f"{reward_result['emoji']} <b>–ö–∞–ø—Å—É–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞!</b>\n\n"
            f"{reward_result['message']}\n\n"
        )
        
        if not reward_result['special'] and updated_user:
            message_text += f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {format_balance(updated_user['balance'])} SC\n"
        
        message_text += f"üì¶ –û—Å—Ç–∞–ª–æ—Å—å –∫–∞–ø—Å—É–ª: {remaining_capsules}"
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        luck_multiplier = special_service.get_luck_multiplier(user_id)
        if luck_multiplier > 1.0:
            message_text += f"\nüçÄ –ê–∫—Ç–∏–≤–Ω–∞ —É–¥–∞—á–∞ x{luck_multiplier}!"
        
        if updated_user and updated_user.get('bonus_capsules', 0) > 0:
            message_text += f"\nüéÅ –ë–æ–Ω—É—Å–Ω—ã—Ö –∫–∞–ø—Å—É–ª: {updated_user['bonus_capsules']}"
        
        await message.answer(message_text)
        
        logging.info(f"User {user_id} opened capsule: {reward.name} ({reward.amount})")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞–ø—Å—É–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")
async def referrals_command(message: types.Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö"""
    if not message.from_user:
        return
    user_id = message.from_user.id
    db = get_db()
    
    user = db.get_user(user_id)
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if not message.bot:
        return
    bot_info = await message.bot.get_me()
    if not bot_info or not bot_info.username:
        return
    ref_link = f"https://t.me/{bot_info.username}?start=ref_{user_id}"
    
    referral_text = (
        f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n"
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üìù –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user['total_referrals']}\n"
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {user['validated_referrals']}\n"
        f"‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {user['total_referrals'] - user['validated_referrals']}\n\n"
        
        f"üéÅ <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ\n"
        f"‚Ä¢ –ö–∞–∂–¥—ã–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª = –±–æ–Ω—É—Å—ã\n"
        f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å\n\n"
        
        f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
        f"<code>{ref_link}</code>\n\n"
        f"üì§ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!"
    )
    
    await message.answer(referral_text)

@router.message(F.text == "üèÜ –¢–æ–ø")
@router.message(Command("top"))
async def top_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥"""
    db = get_db()
    
    top_users = db.get_top_users(10)
    
    if not top_users:
        await message.answer("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞.")
        return
    
    leaderboard_text = "üèÜ <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É</b>\n\n"
    
    medals = ["ü•á", "ü•à", "ü•â"]
    
    for i, user in enumerate(top_users, 1):
        medal = medals[i-1] if i <= 3 else f"{i}."
        username = user['username'] if user['username'] else user['first_name']
        earnings = format_balance(user['total_earnings'])
        
        leaderboard_text += f"{medal} {username}: {earnings} SC\n"
    
    await message.answer(leaderboard_text)

@router.message(Command("wallet"), F.chat.type == ChatType.PRIVATE)
async def wallet_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—à–µ–ª—å–∫–∞"""
    if not message.from_user:
        return
    
    # –ò–∑–≤–ª–µ—á—å –∞–¥—Ä–µ—Å –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    command_parts = message.text.split() if message.text else []
    if len(command_parts) > 1:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
        wallet_address = " ".join(command_parts[1:])
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ TON
        if len(wallet_address) < 10:
            await message.answer(
                "‚ùå <b>–ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π!</b>\n\n"
                "TON –∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/wallet UQD2NmD_lH5f_VN2...</code>"
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è TON –∞–¥—Ä–µ—Å–∞
        allowed_chars = set('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_')
        if not all(c in allowed_chars for c in wallet_address):
            await message.answer(
                "‚ùå <b>–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∞–¥—Ä–µ—Å–µ!</b>\n\n"
                "TON –∞–¥—Ä–µ—Å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ:\n"
                "‚Ä¢ –õ–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã (A-Z, a-z)\n"
                "‚Ä¢ –¶–∏—Ñ—Ä—ã (0-9)\n"
                "‚Ä¢ –°–∏–º–≤–æ–ª—ã - –∏ _\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/wallet UQD2NmD_lH5f_VN2...</code>"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        db = get_db()
        user = db.get_user(user_id)
        
        if not user:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
            
        if not user['subscription_checked']:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø–æ–º–æ—â—å—é /check")
            return
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥—Ä–µ—Å
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SQL
            with db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("UPDATE users SET wallet_address = ? WHERE user_id = ?", (wallet_address, user_id))
                if cursor.rowcount == 0:
                    await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                    return
                conn.commit()
                
            await message.answer(
                f"‚úÖ <b>–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
                f"üíº –ê–¥—Ä–µ—Å: <code>{wallet_address}</code>\n\n"
                f"üí° –¢–µ–ø–µ—Ä—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å.\n\n"
                f"üìã <b>–í–∞–∂–Ω–æ:</b> –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–¥—Ä–µ—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!\n"
                f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ —Å—Ä–µ–¥—Å—Ç–≤."
            )
        except Exception as e:
            logging.error(f"Error saving wallet for user {user_id}: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ—à–µ–ª–µ–∫ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        user_id = message.from_user.id
        db = get_db()
        user = db.get_user(user_id)
        
        if not user:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        current_wallet = user['wallet_address'] if user['wallet_address'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        await message.answer(
            f"üíº <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ TON</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å: <code>{current_wallet}</code>\n\n"
            f"üìù <b>–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å:</b>\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –∞–¥—Ä–µ—Å–æ–º:\n"
            f"<code>/wallet –í–ê–®_–ê–î–†–ï–°_TON</code>\n\n"
            f"üí° –ü—Ä–∏–º–µ—Ä:\n"
            f"<code>/wallet UQD2NmD_lH5f_VN2b_6h...</code>"
        )

@router.message(Command("check"))
async def check_subscription_command(message: types.Message):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    cfg = get_config()
    db = get_db()
    
    if not message.bot:
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        if cfg.REQUIRED_CHANNEL_ID:
            channel_member = await message.bot.get_chat_member(cfg.REQUIRED_CHANNEL_ID, user_id)
            if channel_member.status in ['left', 'kicked']:
                channel_link = cfg.CHANNEL_LINK if cfg.CHANNEL_LINK else f"https://t.me/c/{str(cfg.REQUIRED_CHANNEL_ID)[4:]}"
                await message.answer(
                    f"‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª Simple Coin!\n\n"
                    f"üì¢ <b>–ö–∞–Ω–∞–ª Simple Coin:</b>\n"
                    f"üîó {channel_link}\n\n"
                    f"–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check"
                )
                return
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        if cfg.REQUIRED_GROUP_ID:
            group_member = await message.bot.get_chat_member(cfg.REQUIRED_GROUP_ID, user_id)
            if group_member.status in ['left', 'kicked']:
                group_link = cfg.GROUP_LINK if cfg.GROUP_LINK else f"https://t.me/c/{str(cfg.REQUIRED_GROUP_ID)[4:]}"
                await message.answer(
                    f"‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ Simple Coin!\n\n"
                    f"üí¨ <b>–ì—Ä—É–ø–ø–∞ Simple Coin:</b>\n"
                    f"üîó {group_link}\n\n"
                    f"–ü–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check"
                )
                return
        
        # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        db.update_subscription_status(user_id, True)
        
        await message.answer(
            f"‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞."
        )
        
    except Exception as e:
        logging.error(f"Subscription check error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")