"""
–ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏ - –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import logging
from datetime import datetime
from aiogram import Router, types, F
from aiogram.types import CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.context import get_config, get_db
from app.keyboards import get_tasks_keyboard
from app.helpers.task_verification import verify_subscription, is_valid_telegram_url

router = Router()

class TaskCreation(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    waiting_url = State()
    waiting_reward = State()

# ================== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ==================
@router.message(F.text == "üéØ –ó–∞–¥–∞–Ω–∏—è")
async def tasks_menu(message: types.Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    db = get_db()
    
    user = db.get_user(user_id)
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    completed_tasks = db.get_user_completed_tasks(user_id)
    active_tasks = db.get_active_tasks()
    
    available_tasks = []
    for task in active_tasks:
        if not db.is_task_completed(user_id, task['id']):
            if task['max_completions'] is None or task['current_completions'] < task['max_completions']:
                available_tasks.append(task)
    
    total_earned_capsules = sum(ct['reward_capsules'] for ct in completed_tasks)
    
    text = (
        f"üéØ <b>–°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞–Ω–∏–π</b>\n\n"
        f"üíº –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –∫–∞–ø—Å—É–ª—ã!\n\n"
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(completed_tasks)} –∑–∞–¥–∞–Ω–∏–π\n"
        f"üéÅ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_earned_capsules} –∫–∞–ø—Å—É–ª\n"
        f"üìã –î–æ—Å—Ç—É–ø–Ω–æ: {len(available_tasks)} –∑–∞–¥–∞–Ω–∏–π"
    )
    
    await message.answer(text, reply_markup=get_tasks_keyboard())

@router.callback_query(F.data == "available_tasks")
async def show_available_tasks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"""
    if not callback.from_user:
        return
    
    user_id = callback.from_user.id
    db = get_db()
    
    active_tasks = db.get_active_tasks()
    if not active_tasks:
        await callback.message.edit_text("üìã –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    available_tasks = []
    for task in active_tasks:
        if not db.is_task_completed(user_id, task['id']):
            if task['max_completions'] is None or task['current_completions'] < task['max_completions']:
                available_tasks.append(task)
    
    if not available_tasks:
        text = "‚úÖ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è!\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤."
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tasks_back")]]
        )
        await callback.message.edit_text(text, reply_markup=keyboard)
        return
    
    text = f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è ({len(available_tasks)}):</b>\n\n"
    keyboard_buttons = []
    
    for task in available_tasks:
        type_emoji = "üì¢" if task['task_type'] == 'channel_subscription' else "üë•"
        text += (
            f"{type_emoji} <b>{task['title']}</b>\n"
            f"üè¢ –ü–∞—Ä—Ç–Ω–µ—Ä: {task['partner_name']}\n"
            f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {task['reward_capsules']} –∫–∞–ø—Å—É–ª\n"
            f"üë§ –í—ã–ø–æ–ª–Ω–∏–ª–∏: {task['current_completions']}\n\n"
        )
        
        keyboard_buttons.append([
            types.InlineKeyboardButton(
                text=f"{type_emoji} {task['title'][:25]}...",
                callback_data=f"do_task_{task['id']}"
            )
        ])
    
    keyboard_buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tasks_back")])
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("do_task_"))
async def execute_task(callback: CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    if not callback.from_user:
        return
    
    user_id = callback.from_user.id
    task_id = int(callback.data.split("_")[2])
    
    db = get_db()
    task = db.get_task(task_id)
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    if task['status'] != 'active':
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        return
    
    if db.is_task_completed(user_id, task_id):
        await callback.answer("‚úÖ –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ", show_alert=True)
        return
    
    type_emoji = "üì¢" if task['task_type'] == 'channel_subscription' else "üë•"
    action_text = "–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª" if task['task_type'] == 'channel_subscription' else "–≤—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É"
    
    text = (
        f"{type_emoji} <b>{task['title']}</b>\n\n"
        f"üè¢ <b>–ü–∞—Ä—Ç–Ω–µ—Ä:</b> {task['partner_name']}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task['description']}\n"
        f"üéÅ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> {task['reward_capsules']} –±–æ–Ω—É—Å–Ω—ã—Ö –∫–∞–ø—Å—É–ª\n\n"
        f"üìã <b>–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>\n"
        f"1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '{action_text}' –Ω–∏–∂–µ\n"
        f"2. {action_text.capitalize()} –ø–æ —Å—Å—ã–ª–∫–µ\n"
        f"3. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ'\n"
        f"4. –ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –∫–∞–ø—Å—É–ª—ã!\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ù–µ –æ—Ç–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å —Å—Ä–∞–∑—É, –∏–Ω–∞—á–µ –Ω–∞–≥—Ä–∞–¥–∞ –±—É–¥–µ—Ç –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∞."
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text=f"{type_emoji} {action_text.capitalize()}", 
            url=task['partner_url']
        )],
        [types.InlineKeyboardButton(
            text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", 
            callback_data=f"check_task_{task_id}"
        )],
        [types.InlineKeyboardButton(text="üîô –ö –∑–∞–¥–∞–Ω–∏—è–º", callback_data="available_tasks")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("check_task_"))
async def check_task_completion(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    if not callback.from_user or not callback.message or not callback.message.bot:
        return
    
    user_id = callback.from_user.id
    task_id = int(callback.data.split("_")[2])
    
    db = get_db()
    task = db.get_task(task_id)
    
    if not task or task['status'] != 'active':
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        return
    
    if db.is_task_completed(user_id, task_id):
        await callback.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º partner_url –≤–º–µ—Å—Ç–æ target_url (–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ –≤ –ë–î)
    subscription_verified, error_message = await verify_subscription(
        callback.message.bot, 
        user_id, 
        task['partner_url'], 
        task['task_type']
    )
    
    if subscription_verified:
        # –ó–∞—Å—á–∏—Ç–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        db.complete_user_task(user_id, task_id, task['reward_capsules'])
        db.add_bonus_capsules(user_id, task['reward_capsules'])
        
        success_text = (
            f"üéâ <b>–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!</b>\n\n"
            f"‚úÖ {task['title']}\n"
            f"üéÅ –ü–æ–ª—É—á–µ–Ω–æ: {task['reward_capsules']} –±–æ–Ω—É—Å–Ω—ã—Ö –∫–∞–ø—Å—É–ª\n"
            f"üì¶ –ö–∞–ø—Å—É–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –≤–∞—à–µ–º—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º—É –ª–∏–º–∏—Ç—É\n\n"
            f"üí° –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤!"
        )
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üéØ –î—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="available_tasks")],
            [types.InlineKeyboardButton(text="üì¶ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ø—Å—É–ª—ã", callback_data="open_capsule")],
            [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(success_text, reply_markup=keyboard)
        
        # –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        cfg = get_config()
        if not getattr(cfg, 'DISABLE_ADMIN_NOTIFICATIONS', False):
            user_info = f"@{callback.from_user.username}" if callback.from_user.username else callback.from_user.first_name
            admin_notification = f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\nüë§ {user_info}\nüéØ {task['title']}\nüéÅ {task['reward_capsules']} –∫–∞–ø—Å—É–ª"
            
            for admin_id in cfg.ADMIN_IDS:
                try:
                    await callback.message.bot.send_message(admin_id, admin_notification)
                except:
                    pass
                
    else:
        # –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        error_text = (
            f"‚ùå <b>–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</b>\n\n"
            f"üéØ {task['title']}\n"
            f"üîç –ü—Ä–æ–±–ª–µ–º–∞: {error_message or '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}\n\n"
            f"üìù <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
            f"1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å\n"
            f"2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã\n" 
            f"3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑\n\n"
            f"üí° –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É"
        )
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"check_task_{task_id}")],
            [types.InlineKeyboardButton(text="üîô –ö –∑–∞–¥–∞–Ω–∏—è–º", callback_data="available_tasks")]
        ])
        
        await callback.message.edit_text(error_text, reply_markup=keyboard)

# ================== –ê–î–ú–ò–ù–´ - –ö–û–ú–ê–ù–î–´ ==================
@router.message(Command("tasks"))
async def admin_tasks_command(message: types.Message):
    """–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    if not message.from_user:
        return
    
    cfg = get_config()
    if message.from_user.id not in cfg.ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    db = get_db()
    tasks = db.get_active_tasks()
    
    if not tasks:
        await message.answer("üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç")
        return
    
    text = f"üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è ({len(tasks)}):</b>\n\n"
    
    for task in tasks:
        text += (
            f"üÜî <b>ID {task['id']}</b> - {task['title']}\n"
            f"   üè¢ {task['partner_name']}\n"
            f"   üë§ –í—ã–ø–æ–ª–Ω–∏–ª–∏: {task['current_completions']}\n"
            f"   üéÅ –ù–∞–≥—Ä–∞–¥–∞: {task['reward_capsules']} –∫–∞–ø—Å—É–ª\n\n"
        )
    
    text += "‚ö° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n/off ID - –æ—Ç–∫–ª—é—á–∏—Ç—å\n/new - —Å–æ–∑–¥–∞—Ç—å"
    
    await message.answer(text)

@router.message(Command("off"))
async def disable_task_command(message: types.Message):
    """–ë—ã—Å—Ç—Ä–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"""
    if not message.from_user or not message.text:
        return
    
    cfg = get_config()
    if message.from_user.id not in cfg.ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    parts = message.text.strip().split()
    if len(parts) < 2:
        await message.answer("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /off ID\n–ü—Ä–∏–º–µ—Ä: /off 1")
        return
    
    try:
        task_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    db = get_db()
    task = db.get_task(task_id)
    
    if not task:
        await message.answer(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    if task['status'] != 'active':
        await message.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
        return
    
    if db.deactivate_task(task_id):
        await message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ\nüÜî ID {task_id}: {task['title']}")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏")

@router.message(Command("new"))
async def create_task_command(message: types.Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    if not message.from_user:
        return
    
    cfg = get_config()
    if message.from_user.id not in cfg.ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await message.answer(
        "üéØ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</b>\n\n"
        "üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ó–∞–¥–∞–Ω–∏—è' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n"
        "üí° –ò–ª–∏ –∫–æ–º–∞–Ω–¥—É:\n/tasks - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ"
    )

# ================== –ê–î–ú–ò–ù–´ - –ú–ï–ù–Æ ==================
@router.callback_query(F.data == "admin_tasks")
async def admin_tasks_menu(callback: CallbackQuery):
    """–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏"""
    if not callback.from_user:
        return
    
    cfg = get_config()
    if callback.from_user.id not in cfg.ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    db = get_db()
    active_tasks = db.get_active_tasks()
    total_tasks = len(active_tasks) if active_tasks else 0
    total_completions = sum(task['current_completions'] for task in active_tasks) if active_tasks else 0
    
    text = (
        f"üéØ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {total_tasks}\n"
        f"‚úÖ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {total_completions}\n\n"
        f"üí° –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="create_task_start")],
        [
            types.InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="admin_list_tasks"),
            types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="admin_delete_tasks")
        ],
        [types.InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data == "create_task_start")
async def start_task_creation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    if not callback.from_user:
        return
    
    cfg = get_config()
    if callback.from_user.id not in cfg.ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    text = (
        "üéØ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è</b>\n\n"
        "üìù <b>–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ü–µ—Å—Å:</b>\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è\n"
        "2. –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É\n"
        "4. –ì–æ—Ç–æ–≤–æ!\n\n"
        "üí° –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª", callback_data="type_channel")],
        [types.InlineKeyboardButton(text="üë• –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É", callback_data="type_group")],
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_tasks")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("type_"))
async def select_task_type(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è"""
    task_type = callback.data.split("_")[1]
    
    if task_type == "channel":
        await state.update_data(task_type="channel_subscription", type_name="–∫–∞–Ω–∞–ª")
        text = "üì¢ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:"
    else:
        await state.update_data(task_type="group_join", type_name="–≥—Ä—É–ø–ø—É")
        text = "üë• <b>–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É:"
    
    await state.set_state(TaskCreation.waiting_url)
    await callback.message.edit_text(text)

@router.message(TaskCreation.waiting_url)
async def process_task_url(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å URL –∑–∞–¥–∞–Ω–∏—è"""
    if not message.text or not message.text.startswith(('https://t.me/', 'http://t.me/', 't.me/')):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Telegram –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É")
        return
    
    data = await state.get_data()
    url = message.text
    type_name = data.get('type_name', '—Ä–µ—Å—É—Ä—Å')
    
    # –°–æ–∑–¥–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if 'channel' in data.get('task_type', ''):
        title = f"üîî –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ {url.split('/')[-1] if '/' in url else '–∫–∞–Ω–∞–ª'}"
        partner_name = url.split('/')[-1] if '/' in url else "–ü–∞—Ä—Ç–Ω–µ—Ä"
    else:
        title = f"üí¨ –í—Å—Ç—É–ø–∏ –≤ {url.split('/')[-1] if '/' in url else '–≥—Ä—É–ø–ø—É'}"
        partner_name = url.split('/')[-1] if '/' in url else "–ü–∞—Ä—Ç–Ω–µ—Ä"
    
    await state.update_data(partner_url=url, title=title, partner_name=partner_name)
    
    text = (
        f"üéÅ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ {type_name}:</b>\n\n"
        f"üì¢ –°—Å—ã–ª–∫–∞: {url}\n"
        f"üéØ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n\n"
        f"üí° –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:"
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üéÅ 3 –∫–∞–ø—Å—É–ª—ã", callback_data="reward_3")],
        [types.InlineKeyboardButton(text="üéÅ 5 –∫–∞–ø—Å—É–ª", callback_data="reward_5")],
        [types.InlineKeyboardButton(text="üéÅ 7 –∫–∞–ø—Å—É–ª", callback_data="reward_7")],
        [types.InlineKeyboardButton(text="‚úèÔ∏è –î—Ä—É–≥–∞—è –Ω–∞–≥—Ä–∞–¥–∞", callback_data="reward_custom")]
    ])
    
    await state.set_state(TaskCreation.waiting_reward)
    await message.answer(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("reward_"))
async def select_reward(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É"""
    reward_data = callback.data.split("_")[1]
    
    if reward_data == "custom":
        await callback.message.edit_text("‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø—Å—É–ª (–æ—Ç 1 –¥–æ 15):</b>")
        return
    
    try:
        reward = int(reward_data)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞", show_alert=True)
        return
    
    await finalize_task_creation(callback, state, reward)

@router.message(TaskCreation.waiting_reward)
async def process_custom_reward(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –Ω–∞–≥—Ä–∞–¥—É"""
    try:
        reward = int(message.text)
        if reward < 1 or reward > 15:
            await message.answer("‚ùå –ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 15 –∫–∞–ø—Å—É–ª")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 15")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ finalize_task_creation
    class FakeCallback:
        def __init__(self, message):
            self.message = message
            self.from_user = message.from_user
            self.answer = lambda text="", show_alert=False: None
    
    fake_callback = FakeCallback(message)
    await finalize_task_creation(fake_callback, state, reward)

async def finalize_task_creation(callback, state: FSMContext, reward: int):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    data = await state.get_data()
    
    task_data = {
        'task_type': data['task_type'],
        'title': data['title'],
        'description': f"–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ {reward} –±–æ–Ω—É—Å–Ω—ã—Ö –∫–∞–ø—Å—É–ª",
        'partner_name': data['partner_name'],
        'partner_url': data['partner_url'],
        'reward_capsules': reward,
        'max_completions': None,
        'status': 'active'
    }
    
    db = get_db()
    task_id = db.create_task(task_data)
    
    if task_id:
        success_text = (
            f"‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
            f"üÜî ID: {task_id}\n"
            f"üéØ {data['title']}\n"
            f"üè¢ –ü–∞—Ä—Ç–Ω–µ—Ä: {data['partner_name']}\n"
            f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {reward} –∫–∞–ø—Å—É–ª\n"
            f"üîó –°—Å—ã–ª–∫–∞: {data['partner_url']}\n\n"
            f"üéâ –ó–∞–¥–∞–Ω–∏–µ —Å—Ä–∞–∑—É –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!"
        )
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="create_task_start")],
            [types.InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_tasks")]
        ])
        
        if hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(success_text, reply_markup=keyboard)
        else:
            await callback.message.answer(success_text, reply_markup=keyboard)
    else:
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è"
        if hasattr(callback.message, 'edit_text'):
            await callback.message.edit_text(error_text)
        else:
            await callback.message.answer(error_text)
    
    await state.clear()

# ================== –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–ò ==================
@router.callback_query(F.data == "tasks_back")
async def tasks_back(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π"""
    await tasks_menu(callback.message)

@router.callback_query(F.data == "admin_delete_tasks")
async def admin_delete_tasks(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π"""
    if not callback.from_user:
        return
    
    cfg = get_config()
    if callback.from_user.id not in cfg.ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    db = get_db()
    tasks = db.get_all_tasks()
    
    if not tasks:
        text = "üìã <b>–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_tasks")]
        ])
        await callback.message.edit_text(text, reply_markup=keyboard)
        return
    
    text = "üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n"
    keyboard_buttons = []
    
    for task in tasks[:10]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10
        status_emoji = "‚úÖ" if task['status'] == 'active' else "‚ùå"
        type_emoji = "üì¢" if task['task_type'] == 'channel_subscription' else "üë•"
        
        text += (
            f"{status_emoji} <b>ID {task['id']}</b> {type_emoji} {task['title']}\n"
            f"   üë§ –í—ã–ø–æ–ª–Ω–∏–ª–∏: {task['current_completions']}\n\n"
        )
        
        keyboard_buttons.append([
            types.InlineKeyboardButton(
                text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ID {task['id']}", 
                callback_data=f"delete_task_{task['id']}"
            )
        ])
    
    keyboard_buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_tasks")])
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("delete_task_"))
async def confirm_delete_task(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    if not callback.from_user:
        return
    
    cfg = get_config()
    if callback.from_user.id not in cfg.ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    task_id = int(callback.data.split("_")[2])
    db = get_db()
    task = db.get_task(task_id)
    
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    text = (
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ</b>\n\n"
        f"üÜî ID: {task_id}\n"
        f"üéØ –ù–∞–∑–≤–∞–Ω–∏–µ: {task['title']}\n"
        f"üè¢ –ü–∞—Ä—Ç–Ω–µ—Ä: {task['partner_name']}\n"
        f"üë§ –í—ã–ø–æ–ª–Ω–∏–ª–∏: {task['current_completions']} —á–µ–ª–æ–≤–µ–∫\n\n"
        f"‚ùó <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n"
        f"–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è."
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{task_id}"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_delete_tasks")
        ]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("confirm_delete_"))
async def execute_delete_task(callback: CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    if not callback.from_user:
        return
    
    cfg = get_config()
    if callback.from_user.id not in cfg.ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    task_id = int(callback.data.split("_")[2])
    db = get_db()
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    success = db.delete_task(task_id)
    
    if success:
        text = (
            f"‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!</b>\n\n"
            f"üÜî ID {task_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n"
            f"üìã –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n\n"
            f"üí° –ó–∞–¥–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        )
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –µ—â–µ", callback_data="admin_delete_tasks")],
            [types.InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_tasks")]
        ])
    else:
        text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_delete_tasks")]
        ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data == "admin_list_tasks")
async def admin_list_tasks(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not callback.from_user:
        return
    
    cfg = get_config()
    if callback.from_user.id not in cfg.ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    db = get_db()
    tasks = db.get_all_tasks()  # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
    
    if not tasks:
        text = "üìã <b>–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</b>\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!"
    else:
        text = f"üìã <b>–í—Å–µ –∑–∞–¥–∞–Ω–∏—è ({len(tasks)}):</b>\n\n"
        
        active_count = 0
        for task in tasks:
            status_emoji = "‚úÖ" if task['status'] == 'active' else "‚ùå"
            type_emoji = "üì¢" if task['task_type'] == 'channel_subscription' else "üë•"
            
            if task['status'] == 'active':
                active_count += 1
            
            text += (
                f"{status_emoji} <b>ID {task['id']}</b> {type_emoji} {task['title']}\n"
                f"   üè¢ {task['partner_name']}\n"
                f"   üë§ –í—ã–ø–æ–ª–Ω–∏–ª–∏: {task['current_completions']}\n"
                f"   üéÅ {task['reward_capsules']} –∫–∞–ø—Å—É–ª\n\n"
            )
        
        text += f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}, –í—Å–µ–≥–æ: {len(tasks)}"
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_tasks")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)