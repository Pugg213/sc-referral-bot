"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ callback - –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç 100% –ø–æ–∫—Ä—ã—Ç–∏–µ
"""
import logging
from aiogram import Router, types, F
from aiogram.types import CallbackQuery

from app.context import get_config, get_db
from app.keyboards import (
    get_main_keyboard, get_profile_keyboard, 
    get_wallet_keyboard, get_referrals_keyboard
)
from app.utils.helpers import format_balance, format_user_mention

router = Router()

@router.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")
@router.callback_query(F.data == "referrals")
async def referrals_handler(message_or_callback):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö"""
    if hasattr(message_or_callback, 'from_user') and hasattr(message_or_callback, 'answer'):
        # –≠—Ç–æ message
        user = message_or_callback.from_user
        message = message_or_callback
        callback = None
    else:
        # –≠—Ç–æ callback
        user = message_or_callback.from_user
        message = message_or_callback.message
        callback = message_or_callback
        
    if not user:
        return
    
    user_id = user.id
    db = get_db()
    
    user_data = db.get_user(user_id)
    if not user_data:
        text = "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        if callback:
            await callback.answer(text, show_alert=True)
        else:
            await message.answer(text)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
    bot = message.bot if message else message_or_callback.bot
    bot_info = await bot.get_me()
    ref_link = f"https://t.me/{bot_info.username}?start=ref_{user_id}"
    
    referrals_text = (
        f"üë• <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b>\n\n"
        f"üìù –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user_data['total_referrals']}\n"
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {user_data['validated_referrals']}\n\n"
        f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
        f"<code>{ref_link}</code>\n\n"
        f"üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ:"
        f"‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–ø—Å—É–ª—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n"
        f"‚Ä¢ –ë–æ–Ω—É—Å—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    
    if callback:
        await callback.message.edit_text(referrals_text, reply_markup=get_referrals_keyboard())
        await callback.answer()
    else:
        await message.answer(referrals_text, reply_markup=get_referrals_keyboard())

@router.message(F.text == "üíº –ö–æ—à–µ–ª–µ–∫")
@router.callback_query(F.data == "wallet")
async def wallet_handler(message_or_callback):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ"""
    if hasattr(message_or_callback, 'from_user') and hasattr(message_or_callback, 'answer'):
        # –≠—Ç–æ message
        user = message_or_callback.from_user
        message = message_or_callback
        callback = None
    else:
        # –≠—Ç–æ callback
        user = message_or_callback.from_user
        message = message_or_callback.message
        callback = message_or_callback
        
    if not user:
        return
    
    user_id = user.id
    db = get_db()
    
    user_data = db.get_user(user_id)
    if not user_data:
        text = "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        if callback:
            await callback.answer(text, show_alert=True)
        else:
            await message.answer(text)
        return
    
    wallet_info = user_data['wallet_address'] if user_data['wallet_address'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    wallet_text = (
        f"üíº <b>–í–∞—à –∫–æ—à–µ–ª–µ–∫</b>\n\n"
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å SC:</b>\n"
        f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {format_balance(user_data['pending_balance'])}\n"
        f"‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ: {format_balance(user_data['paid_balance'])}\n"
        f"üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_balance(user_data['total_earnings'])}\n\n"
        f"üíº <b>TON –∫–æ—à–µ–ª–µ–∫:</b> <code>{wallet_info}</code>\n\n"
        f"üí° –ü—Ä–∏–≤—è–∂–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ TON –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç"
    )
    
    if callback:
        await callback.message.edit_text(wallet_text, reply_markup=get_wallet_keyboard())
        await callback.answer()
    else:
        await message.answer(wallet_text, reply_markup=get_wallet_keyboard())

@router.message(F.text == "üèÜ –¢–æ–ø")
@router.callback_query(F.data == "leaderboard")
async def leaderboard_handler(message_or_callback):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if hasattr(message_or_callback, 'from_user') and hasattr(message_or_callback, 'answer'):
        callback = None
        message = message_or_callback
    else:
        callback = message_or_callback
        message = message_or_callback.message
        
    db = get_db()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT first_name, username, total_earnings, total_referrals, total_capsules_opened
            FROM users 
            WHERE subscription_checked = 1 AND banned = 0
            ORDER BY total_earnings DESC 
            LIMIT 10
        """)
        top_users = cursor.fetchall()
    
    if not top_users:
        top_text = "üèÜ <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!"
    else:
        top_text = "üèÜ <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        for i, user in enumerate(top_users, 1):
            first_name, username, earnings, referrals, capsules = user
            user_mention = format_user_mention(first_name, username)
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
            top_text += f"{medal} {user_mention} - {format_balance(earnings)} SC\n"
    
    if callback:
        await callback.message.edit_text(top_text)
        await callback.answer()
    else:
        await message.answer(top_text)

@router.message(F.text == "üéØ –ó–∞–¥–∞–Ω–∏—è")
@router.callback_query(F.data == "tasks")
async def tasks_handler(message_or_callback):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"""
    if hasattr(message_or_callback, 'from_user') and hasattr(message_or_callback, 'answer'):
        callback = None
        message = message_or_callback
    else:
        callback = message_or_callback
        message = message_or_callback.message
        
    db = get_db()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT title, description, reward_capsules, partner_name 
            FROM tasks 
            WHERE status = 'active'
            ORDER BY created_at DESC
            LIMIT 5
        """)
        tasks = cursor.fetchall()
    
    if not tasks:
        tasks_text = "üéØ <b>–ó–∞–¥–∞–Ω–∏—è</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!"
    else:
        tasks_text = "üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</b>\n\n"
        for title, description, reward, partner in tasks:
            tasks_text += f"üìã <b>{title}</b>\n"
            tasks_text += f"üíº –ü–∞—Ä—Ç–Ω–µ—Ä: {partner or 'SC Team'}\n"
            tasks_text += f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {reward} –∫–∞–ø—Å—É–ª\n"
            tasks_text += f"üìù {description}\n\n"
    
    if callback:
        await callback.message.edit_text(tasks_text)
        await callback.answer()
    else:
        await message.answer(tasks_text)

@router.message(F.text == "üìã –ü—Ä–∞–≤–∏–ª–∞")
@router.callback_query(F.data == "rules")
async def rules_handler(message_or_callback):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –±–æ—Ç–∞"""
    if hasattr(message_or_callback, 'from_user') and hasattr(message_or_callback, 'answer'):
        callback = None
        message = message_or_callback
    else:
        callback = message_or_callback
        message = message_or_callback.message
        
    rules_text = (
        f"üìã <b>–ü—Ä–∞–≤–∏–ª–∞ –±–æ—Ç–∞ SC Referral</b>\n\n"
        f"‚úÖ <b>–†–∞–∑—Ä–µ—à–µ–Ω–æ:</b>\n"
        f"‚Ä¢ –ß–µ—Å—Ç–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ\n"
        f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ª—é–¥–µ–π\n"
        f"‚Ä¢ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞–ø—Å—É–ª —Å–æ–≥–ª–∞—Å–Ω–æ –ª–∏–º–∏—Ç–∞–º\n"
        f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π\n\n"
        f"‚ùå <b>–ó–∞–ø—Ä–µ—â–µ–Ω–æ:</b>\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–æ–≤ –∏ –Ω–∞–∫—Ä—É—Ç–∫–∏\n"
        f"‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–µ–π–∫–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        f"‚Ä¢ –°–ø–∞–º –∏ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è\n"
        f"‚Ä¢ –ü–æ–ø—ã—Ç–∫–∏ –æ–±–º–∞–Ω–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
        f"‚öñÔ∏è <b>–ù–∞–∫–∞–∑–∞–Ω–∏—è:</b>\n"
        f"‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n"
        f"‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞\n"
        f"‚Ä¢ –ü–æ–ª–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
        f"üíé <b>–ù–∞–≥—Ä–∞–¥—ã:</b>\n"
        f"‚Ä¢ 0.5 - 10 SC —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –∫–∞–ø—Å—É–ª—É\n"
        f"‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ –∫–∞–ø—Å—É–ª—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
        f"‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"
    )
    
    if callback:
        await callback.message.edit_text(rules_text)
        await callback.answer()
    else:
        await message.answer(rules_text)