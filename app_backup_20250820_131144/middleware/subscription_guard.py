"""
Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±–æ—Ç–æ–º
"""
import logging
from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Update, Message, CallbackQuery

from app.context import get_config, get_db
from app.utils.subscription import check_user_subscriptions
from app.keyboards import get_subscription_keyboard
from app.utils.helpers import format_user_mention

class SubscriptionGuardMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        super().__init__()
        self.exempt_commands = {'/start', '/help', '/admin', '/stats'}
        self.exempt_callbacks = {'check_subscription'}
        self.admin_ids = {545921}  # –ê–¥–º–∏–Ω—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã –æ—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫
        
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback'–æ–≤
        if not isinstance(event, (Message, CallbackQuery)):
            return await handler(event, data)
            
        # –ü–æ–ª—É—á–∞–µ–º user_id
        user_id = None
        if isinstance(event, Message) and event.from_user:
            user_id = event.from_user.id
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º exempt –∫–æ–º–∞–Ω–¥—ã
            if event.text and any(event.text.startswith(cmd) for cmd in self.exempt_commands):
                return await handler(event, data)
        elif isinstance(event, CallbackQuery) and event.from_user:
            user_id = event.from_user.id
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º exempt callback'—ã
            if event.data in self.exempt_callbacks:
                return await handler(event, data)
        
        if not user_id:
            return await handler(event, data)
        
        # –ê–¥–º–∏–Ω—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã –æ—Ç –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        if user_id in self.admin_ids:
            return await handler(event, data)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        db = get_db()
        user = db.get_user(user_id)
        
        if not user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            return await handler(event, data)
            
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏, –¥–µ–ª–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        if user.get('subscription_checked'):
            cfg = get_config()
            bot = data.get('bot')
            
            if bot:
                try:
                    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                    is_still_subscribed = await check_user_subscriptions(
                        bot, user_id, cfg.REQUIRED_CHANNEL_ID, cfg.REQUIRED_GROUP_ID
                    )
                    
                    if not is_still_subscribed:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è! –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
                        logging.warning(f"User {user_id} unsubscribed - blocking access")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                        db.update_subscription_status(user_id, False)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        keyboard = get_subscription_keyboard(cfg.CHANNEL_LINK, cfg.GROUP_LINK)
                        unsubscribe_text = (
                            "‚ö†Ô∏è <b>–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                            "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ Simple Coin\n\n"
                            "üìã <b>–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å:</b>\n"
                            f"üîó <a href='{cfg.CHANNEL_LINK}'>üì¢ –ö–∞–Ω–∞–ª Simple Coin</a>\n\n"
                            "üí° <i>–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\"</i>"
                        )
                        
                        if isinstance(event, Message):
                            await event.answer(unsubscribe_text, reply_markup=keyboard)
                        elif isinstance(event, CallbackQuery):
                            await event.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
                            try:
                                if event.message and hasattr(event.message, 'edit_text'):
                                    await event.message.edit_text(unsubscribe_text, reply_markup=keyboard)
                            except Exception:
                                pass  # Message might be inaccessible
                        
                        # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ handler'–∞
                        return
                        
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–≤–æ–∑–º–æ–∂–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API)
                    logging.warning(f"Subscription check failed for user {user_id}: {e}")
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        return await handler(event, data)