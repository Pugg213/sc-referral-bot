"""
–°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞–Ω–∏–π –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
"""
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from enum import Enum

class TaskType(Enum):
    CHANNEL_SUBSCRIPTION = "channel_subscription"
    GROUP_JOIN = "group_join" 
    WEBSITE_VISIT = "website_visit"
    SOCIAL_FOLLOW = "social_follow"
    DAILY_LOGIN = "daily_login"
    REFERRAL_MILESTONE = "referral_milestone"

class TaskStatus(Enum):
    ACTIVE = "active"
    COMPLETED = "completed"
    EXPIRED = "expired"
    PAUSED = "paused"

@dataclass
class Task:
    id: int
    title: str
    description: str
    task_type: TaskType
    reward_sc: float
    reward_capsules: int
    partner_name: str
    partner_url: str
    requirements: Dict[str, Any]  # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    expires_at: Optional[datetime]
    max_completions: Optional[int]  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
    current_completions: int = 0
    status: TaskStatus = TaskStatus.ACTIVE
    created_at: datetime = None

    def __post_init__(self):
        if self.created_at is None:
            self.created_at = datetime.now()

class TaskService:
    """–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏"""
    
    def __init__(self, db):
        self.db = db
        self._init_default_tasks()
    
    def _init_default_tasks(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
        default_tasks = [
            Task(
                id=1,
                title="üéØ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥",
                description="–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å!",
                task_type=TaskType.DAILY_LOGIN,
                reward_sc=10.0,
                reward_capsules=1,
                partner_name="SC Referral Bot",
                partner_url="",
                requirements={"consecutive_days": 1},
                expires_at=None,  # –ù–µ –∏—Å—Ç–µ–∫–∞–µ—Ç
                max_completions=None  # –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ
            ),
            Task(
                id=2,
                title="üë• –ü—Ä–∏–≥–ª–∞—Å–∏ 5 –¥—Ä—É–∑–µ–π",
                description="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–µ–≥–∞-–Ω–∞–≥—Ä–∞–¥—É!",
                task_type=TaskType.REFERRAL_MILESTONE,
                reward_sc=100.0,
                reward_capsules=5,
                partner_name="SC Referral Bot",
                partner_url="",
                requirements={"referral_count": 5},
                expires_at=None,
                max_completions=1  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            ),
            Task(
                id=3,
                title="üì∫ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ SC Channel",
                description="–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª SC –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å",
                task_type=TaskType.CHANNEL_SUBSCRIPTION,
                reward_sc=25.0,
                reward_capsules=2,
                partner_name="SC Project",
                partner_url="https://t.me/sc_official",
                requirements={"channel_id": "@sc_official"},
                expires_at=datetime.now() + timedelta(days=30),
                max_completions=1
            ),
        ]
        
        # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –≤ –ë–î –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        for task in default_tasks:
            if not self.db.get_task(task.id):
                self.db.add_task(task)
    
    def get_available_tasks(self, user_id: int) -> List[Task]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        all_tasks = self.db.get_active_tasks()
        user_completed = self.db.get_user_completed_tasks(user_id)
        completed_task_ids = {tc['task_id'] for tc in user_completed}
        
        available_tasks = []
        for task in all_tasks:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞
            if task.expires_at and datetime.now() > task.expires_at:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
            if task.max_completions and task.id in completed_task_ids:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            if self._check_task_requirements(user_id, task):
                available_tasks.append(task)
        
        return available_tasks
    
    def _check_task_requirements(self, user_id: int, task: Task) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∑–∞–¥–∞–Ω–∏—è"""
        if task.task_type == TaskType.DAILY_LOGIN:
            # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
            return True
            
        elif task.task_type == TaskType.REFERRAL_MILESTONE:
            user = self.db.get_user(user_id)
            if not user:
                return False
            required_refs = task.requirements.get("referral_count", 0)
            return user['validated_referrals'] >= required_refs
            
        elif task.task_type == TaskType.CHANNEL_SUBSCRIPTION:
            # –¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
            return True  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
            
        return True
    
    async def complete_task(self, user_id: int, task_id: int, bot = None) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"""
        task = self.db.get_task(task_id)
        if not task:
            return {"success": False, "error": "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        available_tasks = self.get_available_tasks(user_id)
        if task.id not in [t.id for t in available_tasks]:
            return {"success": False, "error": "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"}
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        if self.db.is_task_completed(user_id, task_id):
            return {"success": False, "error": "–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"}
        
        # –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        verification_result = await self._verify_task_completion(user_id, task, bot)
        if not verification_result["success"]:
            return verification_result
        
        # –ó–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        self.db.complete_user_task(user_id, task_id)
        
        # –í—ã–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã
        self.db.update_user_balance(user_id, task.reward_sc)
        if task.reward_capsules > 0:
            self.db.add_bonus_capsules(user_id, task.reward_capsules)
        
        return {
            "success": True,
            "task": task,
            "reward_sc": task.reward_sc,
            "reward_capsules": task.reward_capsules
        }
    
    async def _verify_task_completion(self, user_id: int, task: Task, bot = None) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
        if task.task_type == TaskType.DAILY_LOGIN:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥
            last_login = self.db.get_user_last_login(user_id)
            today = datetime.now().date()
            
            if last_login and last_login.date() == today:
                return {"success": True}
            else:
                # –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥
                self.db.update_user_last_login(user_id)
                return {"success": True}
        
        elif task.task_type == TaskType.REFERRAL_MILESTONE:
            user = self.db.get_user(user_id)
            required_refs = task.requirements.get("referral_count", 0)
            
            if user and user['validated_referrals'] >= required_refs:
                return {"success": True}
            else:
                return {"success": False, "error": f"–ù—É–∂–Ω–æ {required_refs} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"}
        
        elif task.task_type == TaskType.CHANNEL_SUBSCRIPTION:
            if not bot:
                return {"success": False, "error": "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"}
            
            channel_id = task.requirements.get("channel_id")
            try:
                member = await bot.get_chat_member(channel_id, user_id)
                if member.status in ['member', 'administrator', 'creator']:
                    return {"success": True}
                else:
                    return {"success": False, "error": "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"}
            except:
                return {"success": False, "error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"}
        
        return {"success": True}
    
    def get_user_task_stats(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        completed_tasks = self.db.get_user_completed_tasks(user_id)
        available_tasks = self.get_available_tasks(user_id)
        
        total_earned_sc = sum(ct['reward_sc'] for ct in completed_tasks)
        total_earned_capsules = sum(ct['reward_capsules'] for ct in completed_tasks)
        
        return {
            "completed_count": len(completed_tasks),
            "available_count": len(available_tasks),
            "total_earned_sc": total_earned_sc,
            "total_earned_capsules": total_earned_capsules,
            "completed_tasks": completed_tasks,
            "available_tasks": available_tasks
        }