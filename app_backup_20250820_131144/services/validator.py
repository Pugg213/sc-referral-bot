"""
–°–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
"""
import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot

from app.context import get_config, get_db
from app.services.scoring import RiskScorer

async def validator_loop(bot: Bot):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    logging.info("Validator loop started")
    
    while True:
        try:
            await validate_pending_referrals(bot)
        except Exception as e:
            logging.error(f"Error in validator loop: {e}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ (30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        await asyncio.sleep(30)

async def validate_pending_referrals(bot: Bot):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    db = get_db()
    cfg = get_config()
    
    # –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    pending_validations = db.get_pending_validations(100)
    
    if not pending_validations:
        return
    
    risk_scorer = RiskScorer()
    
    for validation in pending_validations:
        try:
            await validate_single_referral(bot, validation, risk_scorer, cfg)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            await asyncio.sleep(1)
            
        except Exception as e:
            logging.error(f"Error validating referral {validation['id']}: {e}")

async def validate_single_referral(bot: Bot, validation: dict, risk_scorer: RiskScorer, cfg):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞"""
    db = get_db()
    
    referred_id = validation['referred_id']
    validation_id = validation['id']
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞—Ä–∞–Ω—Ç–∏–Ω
    quarantine_time = cfg.RISK_THRESHOLDS.quarantine_hours
    validation_date = datetime.fromisoformat(validation['validation_date'])
    quarantine_end = validation_date + timedelta(hours=quarantine_time)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"Checking referral {referred_id}: quarantine ends at {quarantine_end}, now is {datetime.now()}")
    
    if datetime.now() < quarantine_end:
        # –ï—â–µ –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ
        logging.info(f"Referral {referred_id} still in quarantine")
        return
    
    # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    referred_user = db.get_user(referred_id)
    if not referred_user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å
        risk_flags = "user_not_found"
        db.validate_referral(validation_id, False, risk_flags)
        logging.info(f"Referral {referred_id} rejected: user not found")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not referred_user['subscription_checked']:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å
        risk_flags = "no_subscription_check"
        db.validate_referral(validation_id, False, risk_flags)
        logging.info(f"Referral {referred_id} rejected: no subscription check")
        return
    
    # –í—ã—á–∏—Å–ª–∏—Ç—å —Ä–∏—Å–∫-—Å–∫–æ—Ä
    user_data = {
        'user_id': referred_id,
        'registration_date': validation['registration_date'],
        'captcha_score': validation['captcha_score'],
        'subscription_checked': validation['subscription_checked']
    }
    
    risk_score = await risk_scorer.calculate_risk_score(bot, user_data, cfg.RISK_THRESHOLDS)
    
    # –û–±–Ω–æ–≤–∏—Ç—å —Ä–∏—Å–∫-—Å–∫–æ—Ä –≤ –±–∞–∑–µ
    db.update_user_scores(referred_id, risk_score=risk_score)
    
    # –ü—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    risk_threshold = 0.7  # –ü–æ—Ä–æ–≥ —Ä–∏—Å–∫–∞ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    
    if risk_score < risk_threshold:
        # –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ - –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        db.validate_referral(validation_id, True)
        logging.info(f"Referral {referred_id} validated (risk score: {risk_score:.2f})")
        
        # –£–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        try:
            referrer_id = validation['referrer_id']
            await bot.send_message(
                referrer_id,
                f"‚úÖ <b>–†–µ—Ñ–µ—Ä–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
                f"üë§ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É\n"
                f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 1.0 SC –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!"
            )
        except:
            pass  # –†–µ—Ñ–µ—Ä–µ—Ä –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
            
    else:
        # –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å
        risk_flags = f"high_risk_score_{risk_score:.2f}"
        db.validate_referral(validation_id, False, risk_flags)
        logging.info(f"Referral {referred_id} rejected: high risk score {risk_score:.2f}")
        
        # –£–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
        try:
            referrer_id = validation['referrer_id']
            await bot.send_message(
                referrer_id,
                f"‚ùå <b>–†–µ—Ñ–µ—Ä–∞–ª –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</b>\n\n"
                f"üë§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
                f"‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ª—é–¥–µ–π"
            )
        except:
            pass

async def check_daily_limits(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    db = get_db()
    cfg = get_config()
    
    # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT COUNT(*) as refs_today
            FROM referral_validations rv
            JOIN users u ON rv.referred_id = u.user_id
            WHERE rv.referrer_id = ? 
            AND u.registration_date >= datetime('now', '-1 day')
        """, (user_id,))
        
        result = cursor.fetchone()
        refs_today = result['refs_today'] if result else 0
    
    return refs_today < cfg.RISK_THRESHOLDS.max_refs_per_day

async def check_hourly_limits(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∞—Å–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    db = get_db()
    cfg = get_config()
    
    # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT COUNT(*) as refs_hour
            FROM referral_validations rv
            JOIN users u ON rv.referred_id = u.user_id
            WHERE rv.referrer_id = ? 
            AND u.registration_date >= datetime('now', '-1 hour')
        """, (user_id,))
        
        result = cursor.fetchone()
        refs_hour = result['refs_hour'] if result else 0
    
    return refs_hour < cfg.RISK_THRESHOLDS.max_refs_per_hour
